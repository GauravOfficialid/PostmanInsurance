{
	"info": {
		"_postman_id": "7b342b10-13c0-4fe2-92f8-4367a838576a",
		"name": "IVANS Exchange/Download API",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "21246027"
	},
	"item": [
		{
			"name": "_Tokens_",
			"item": [
				{
					"name": "Global Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.unset(\"carrierAdminToken\");\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Got token and saved to this environment\", () => {\r",
									"    pm.response.to.be.ok\r",
									"    \r",
									"    let res = JSON.parse(pm.response.text());\r",
									"    \r",
									"    pm.environment.set(\"globalAdminToken\", res.access_token);\r",
									"    \r",
									"    })"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{ivanTokenClient}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{ivanGlobal}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{ivanPassword}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "{{allScope}}",
									"type": "text"
								}
							]
						},
						"url": "{{tokenUrl}}"
					},
					"response": []
				},
				{
					"name": "Global Admin with Exchange access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.unset(\"carrierAdminToken\");\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Got token and saved to this environment\", () => {\r",
									"    pm.response.to.be.ok\r",
									"    \r",
									"    let res = JSON.parse(pm.response.text());\r",
									"    \r",
									"    pm.environment.set(\"globalAdminToken\", res.access_token);\r",
									"    \r",
									"    })"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{ivanTokenClient}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{ivanGlobal}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{ivanPassword}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "{{internalScope}}",
									"type": "text"
								}
							]
						},
						"url": "{{tokenUrl}}"
					},
					"response": []
				},
				{
					"name": "Global Admin With Identity access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.unset(\"carrierAdminToken\");\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Got token and saved to this environment\", () => {\r",
									"    pm.response.to.be.ok\r",
									"    \r",
									"    let res = JSON.parse(pm.response.text());\r",
									"    \r",
									"    pm.environment.set(\"globalAdminToken\", res.access_token);\r",
									"    \r",
									"    })"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{ivanTokenClient}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{ivanGlobal}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{ivanPassword}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "{{IdentityScope}}",
									"type": "text"
								}
							]
						},
						"url": "{{tokenUrl}}"
					},
					"response": []
				},
				{
					"name": "Global admin with Csio access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{ivanTokenClient}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{ivanCsioAdmin}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{ivanPassword}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "{{csioScope}}",
									"type": "text"
								}
							]
						},
						"url": "{{tokenUrl}}"
					},
					"response": []
				},
				{
					"name": "IVAN SYS USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.unset(\"carrierAdminToken\");\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Got token and saved to this environment\", () => {\r",
									"    pm.response.to.be.ok\r",
									"    \r",
									"    let res = JSON.parse(pm.response.text());\r",
									"    \r",
									"    pm.environment.set(\"globalAdminToken\", res.access_token);\r",
									"    \r",
									"    })"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{ivanTokenClient}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{ivanSysUser}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{ivanPassword}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "{{allScope}}",
									"type": "text"
								}
							]
						},
						"url": "{{tokenUrl}}"
					},
					"response": []
				},
				{
					"name": "Carrier Mailbox",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{carrierTokenClient}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{carrierMailboxAutomation}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{carrierMailboxAutomationPassword}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "{{allScope}}",
									"type": "text"
								},
								{
									"key": "",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": "{{tokenUrl}}"
					},
					"response": []
				},
				{
					"name": "Carrier Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{carrierTokenClient}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{carrierAdmin}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{carrierPassword}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "{{allScope}}",
									"type": "text"
								}
							]
						},
						"url": "{{tokenUrl}}"
					},
					"response": []
				},
				{
					"name": "Carrier Sys User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{carrierTokenClient}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{carrierSysUser}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{carrierPassword}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "{{allScope}}",
									"type": "text"
								}
							]
						},
						"url": "{{tokenUrl}}"
					},
					"response": []
				},
				{
					"name": "Carrier User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{carrierTokenClient}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{carrierUser}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{carrierPassword}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "{{allScope}}",
									"type": "text"
								}
							]
						},
						"url": "{{tokenUrl}}"
					},
					"response": []
				},
				{
					"name": "Agency Mailbox",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{agencyTokenClient}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{agencyMailboxyx50vnv}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{agencyMailboxPassword}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "{{allScope}}",
									"type": "text"
								}
							]
						},
						"url": "{{tokenUrl}}"
					},
					"response": []
				},
				{
					"name": "Agency Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"got token and saved to this environment\", () => {\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"    pm.response.to.be.ok\r",
									"    \r",
									"    let res = JSON.parse(pm.response.text())\r",
									"    let currentToken = pm.environment.get(\"agencyAdminToken\")\r",
									"    pm.environment.set(\"agencyAdminToken\", res.access_token)\r",
									"    let newToken = pm.environment.get(\"agencyAdminToken\")\r",
									"    \r",
									"    pm.expect(currentToken).to.not.eql(newToken)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{agencyTokenClient}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{agencyAdmin}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{agencyPassword}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "{{allScope}}",
									"type": "text"
								}
							]
						},
						"url": "{{tokenUrl}}"
					},
					"response": []
				},
				{
					"name": "Agency User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"got token and saved to this environment\", () => {\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"    pm.response.to.be.ok\r",
									"    \r",
									"    let res = JSON.parse(pm.response.text())\r",
									"    let currentToken = pm.environment.get(\"agencyUserToken\")\r",
									"    pm.environment.set(\"agencyUserToken\", res.access_token)\r",
									"    let newToken = pm.environment.get(\"agencyUserToken\")\r",
									"    \r",
									"    pm.expect(currentToken).to.not.eql(newToken)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{agencyTokenClient}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{agencyUser}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{agencyPassword}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "{{allScope}}",
									"type": "text"
								}
							]
						},
						"url": "{{tokenUrl}}"
					},
					"response": []
				},
				{
					"name": "Agency Sys User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"got token and saved to this environment\", () => {\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"    pm.response.to.be.ok\r",
									"    \r",
									"    let res = JSON.parse(pm.response.text())\r",
									"    let currentToken = pm.environment.get(\"agencyUserToken\")\r",
									"    pm.environment.set(\"agencyUserToken\", res.access_token)\r",
									"    let newToken = pm.environment.get(\"agencyUserToken\")\r",
									"    \r",
									"    pm.expect(currentToken).to.not.eql(newToken)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{agencyTokenClient}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{agencySysUser}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{agencyPassword}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "{{allScope}}",
									"type": "text"
								}
							]
						},
						"url": "{{tokenUrl}}"
					},
					"response": []
				},
				{
					"name": "Vendor User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"got token and saved to this environment\", () => {\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"    pm.response.to.be.ok\r",
									"    \r",
									"    let res = JSON.parse(pm.response.text())\r",
									"    let currentToken = pm.environment.get(\"agencyUserToken\")\r",
									"    pm.environment.set(\"agencyUserToken\", res.access_token)\r",
									"    let newToken = pm.environment.get(\"agencyUserToken\")\r",
									"    \r",
									"    pm.expect(currentToken).to.not.eql(newToken)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{vendorTokenClient}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{vendorUser}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{vendorPassword}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "{{allScope}}",
									"type": "text"
								}
							]
						},
						"url": "{{tokenUrl}}"
					},
					"response": []
				},
				{
					"name": "Vednor Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"got token and saved to this environment\", () => {\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"    pm.response.to.be.ok\r",
									"    \r",
									"    let res = JSON.parse(pm.response.text())\r",
									"    let currentToken = pm.environment.get(\"agencyUserToken\")\r",
									"    pm.environment.set(\"agencyUserToken\", res.access_token)\r",
									"    let newToken = pm.environment.get(\"agencyUserToken\")\r",
									"    \r",
									"    pm.expect(currentToken).to.not.eql(newToken)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{vendorTokenClient}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{vendorAdmin}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{vendorPassword}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "{{allScope}}",
									"type": "text"
								}
							]
						},
						"url": "{{tokenUrl}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "Files",
			"item": [
				{
					"name": "Agency Mailbox",
					"item": [
						{
							"name": "File Contents",
							"item": [
								{
									"name": "GET return 200ok for File index one",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Body is as expected\", () => {\r",
													"    let res = pm.response.json()\r",
													"    \r",
													"    pm.expect(res).to.have.property(\"id\")\r",
													"    pm.expect(res).to.have.property(\"index\")\r",
													"    pm.expect(res).to.have.property(\"contentCode\")\r",
													"    pm.expect(res).to.have.property(\"description\")    \r",
													"    pm.expect(res).to.have.property(\"policyNumber\")\r",
													"    pm.expect(res).to.have.property(\"claimNumber\")\r",
													"    pm.expect(res).to.have.property(\"claimType\")\r",
													"    pm.expect(res).to.have.property(\"broadLob\")\r",
													"    pm.expect(res).to.have.property(\"lob\")\r",
													"    pm.expect(res).to.have.property(\"cycle\")\r",
													"    pm.expect(res).to.have.property(\"naic\")\r",
													"    pm.expect(res).to.have.property(\"producerCode\")\r",
													"    pm.expect(res).to.have.property(\"insuredName\")\r",
													"    pm.expect(res).to.have.property(\"effectiveDate\")\r",
													"    pm.expect(res).to.have.property(\"expirationDate\")\r",
													"    pm.expect(res).to.have.property(\"transactionEffectiveDate\")\r",
													"    pm.expect(res).to.have.property(\"transactionResponseDate\")\r",
													"    pm.expect(res).to.have.property(\"lossDate\")\r",
													"    pm.expect(res).to.have.property(\"transactionType\")\r",
													"   })"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyMailboxToken}}"
											}
										],
										"url": "{{reqUrl}}/api/files/{{fileIDwithitems}}/items/01"
									},
									"response": []
								},
								{
									"name": "GET return 200ok for File contents",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyMailboxToken}}"
											}
										],
										"url": "{{reqUrl}}/api/files/{{fileIDwithitems}}/items"
									},
									"response": []
								},
								{
									"name": "GET return 204Ok for Empty Zip",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyMailboxToken}}"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files/{{emptyZipfile}}/items/01",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files",
												"{{emptyZipfile}}",
												"items",
												"01"
											],
											"query": [
												{
													"key": "decompressFile",
													"value": "false",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET return 401 Ok for fake Id ( non existing )",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyMailboxToken}}"
											}
										],
										"url": "{{reqUrl}}/api/files/{{fakeFileID}}/items"
									},
									"response": []
								},
								{
									"name": "return 401 UnAuthorized for File Id I don't have access toFile Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyMailboxToken}}"
											}
										],
										"url": "{{reqUrl}}/api/files/{{YDUXHFileID}}"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"agencyMailboxyx50vnv\");",
											"const Pass = pm.globals.get(\"agencyMailboxPassword\");",
											"const BasicToken = pm.environment.get(\"agencyTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"agencyMailboxToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('agencyMailboxToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "File Get Metadata by Id",
							"item": [
								{
									"name": "Get 404 Not found fake Id (In correct ID)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyMailboxToken}}"
											}
										],
										"url": "{{reqUrl}}/api/files/{{fakeFileId}}/metadata"
									},
									"response": []
								},
								{
									"name": "Get 200OK  return Zip metadata",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyMailboxToken}}"
											}
										],
										"url": "{{reqUrl}}/api/files/{{zipFileId}}/metadata"
									},
									"response": []
								},
								{
									"name": "Get 200OK  return edoc metadata",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyMailboxToken}}"
											}
										],
										"url": "{{reqUrl}}/api/files/{{edocFileid}}/metadata"
									},
									"response": []
								},
								{
									"name": "Get 401 Unauthorized for file on other account",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const URL = pm.environment.get(\"tokenUrl\");\r",
													"const User = pm.environment.get(\"agencyAdmin\");\r",
													"const Pass = pm.environment.get(\"agencyPassword\");\r",
													"const BasicToken = pm.environment.get(\"agencyTokenClient\");\r",
													"const Scope = pm.environment.get(\"allScope\")\r",
													"const postRequest = {\r",
													"  url: URL,\r",
													"  method: 'POST',\r",
													"  timeout: 10,\r",
													"  header: {\r",
													"    \"Content-Type\": \"application/x-www-raw-urlencoded\",\r",
													"    \"Authorization\": \"Basic \" + BasicToken\r",
													"  },\r",
													"  body: {\r",
													"    mode: 'urlencoded',\r",
													"    urlencoded: [\r",
													"        {key: \"grant_type\", value: \"password\"},\r",
													"        {key:\"username\", value: User},\r",
													"        {key:\"Password\", value: Pass},\r",
													"        {key:\"scope\", value: Scope}\r",
													"    ]}\r",
													"};\r",
													"pm.environment.unset(\"agencyAdminToken\");\r",
													"pm.sendRequest(postRequest, function (err, res) {\r",
													"    var responseJson = res.json();\r",
													"    console.log(responseJson);\r",
													"    pm.environment.set('agencyAdminToken', responseJson['access_token']);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyMailboxToken}}"
											}
										],
										"url": "{{reqUrl}}/api/files/{{YDUXHFileID}}/metadata"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"agencyMailboxyx50vnv\");",
											"const Pass = pm.globals.get(\"agencyMailboxPassword\");",
											"const BasicToken = pm.environment.get(\"agencyTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"agencyMailboxToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('agencyMailboxToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "File History",
							"item": [
								{
									"name": "Get 401 returns Unauthorized file",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyMailboxToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{unAuthorizedFile}}/history"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"agencyMailboxyx50vnv\");",
											"const Pass = pm.globals.get(\"agencyMailboxPassword\");",
											"const BasicToken = pm.environment.get(\"agencyTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"agencyMailboxToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('agencyMailboxToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "File Put Status ( Please run in sequence )",
							"item": [
								{
									"name": "Get 200ok for Status to Send",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyMailboxToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"status\":\"s\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{reqUrl}}/api/files/{{changeFileStatus}}/status"
									},
									"response": []
								},
								{
									"name": "Put 200 return 200 for sucessfull file Sent for Receive",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyMailboxToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{changeFileStatus}}/received"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"agencyMailboxyx50vnv\");",
											"const Pass = pm.globals.get(\"agencyMailboxPassword\");",
											"const BasicToken = pm.environment.get(\"agencyTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"agencyMailboxToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('agencyMailboxToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "File Send",
							"item": [
								{
									"name": "Post 401 returns Unauthorized due to user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyMailboxToken}}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "multipart/form-data",
												"type": "text",
												"disabled": true
											},
											{
												"key": "X-IVANS-File-Metadata",
												"value": "{\"originalName\":\"TestPolicy2\",\"remoteName\":\"TestPolicy2\",\"sendAccount\":\"YDUXH\",\"sendUserId\":\"YX66XU6\",\"receiveAccount\":\"{{carrierAccount}}\",\"receiveUserId\":\"{{carrierMailbox}}\",\"ClassCode\":\"{{policy}}\"}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "text/plain",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "",
													"type": "file",
													"src": "Policies/test file for 3136/Policies/Policies/TestPolicy2"
												}
											]
										},
										"url": {
											"raw": "{{reqUrl}}/api/files?type=media",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "type",
													"value": "media"
												}
											]
										},
										"description": "Send a file using files api. This example sends a file from carrier HIG1 to agency Y1234 (mailbox associated on oh-dev-34)"
									},
									"response": []
								},
								{
									"name": "Put 400 returns Bad Request due to file already received",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyMailboxToken}}"
											}
										],
										"url": "{{reqUrl}}/api/files/{{changeFileStatus}}/Received",
										"description": "Send a file using files api. This example sends a file from carrier HIG1 to agency Y1234 (mailbox associated on oh-dev-34)"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"agencyMailboxyx50vnv\");",
											"const Pass = pm.globals.get(\"agencyMailboxPassword\");",
											"const BasicToken = pm.environment.get(\"agencyTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"agencyMailboxToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('agencyMailboxToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Files Get by ID",
							"item": [
								{
									"name": "GET 200 OKreturns.edoc file",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyMailboxToken}}"
											}
										],
										"url": "{{reqUrl}}/api/files/{{edocFileid}}"
									},
									"response": []
								},
								{
									"name": "GET 200 OKreturns.Zip file",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyMailboxToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files/{{zipFileId}}",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files",
												"{{zipFileId}}"
											],
											"query": [
												{
													"key": "decompressFile",
													"value": "true",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET 200 OKreturns.Zip file decompressed is true",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyMailboxToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files/{{zipFileId}}?decompressFile=true",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files",
												"{{zipFileId}}"
											],
											"query": [
												{
													"key": "decompressFile",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET 400 returns Bad Request due to invalid type for decompressFile boolean",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyMailboxToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files/{{zipFileId}}?decompressFile=1",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files",
												"{{zipFileId}}"
											],
											"query": [
												{
													"key": "decompressFile",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET 404 return Not Found to non-existent id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyMailboxToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files/{{wrongFileId}}",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files",
												"{{wrongFileId}}"
											],
											"query": [
												{
													"key": "decompressFile",
													"value": "1",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"agencyMailboxyx50vnv\");",
											"const Pass = pm.globals.get(\"agencyMailboxPassword\");",
											"const BasicToken = pm.environment.get(\"agencyTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"agencyMailboxToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('agencyMailboxToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Files Metadata",
							"item": [
								{
									"name": "Get 500 returns API Error dur to invalid status code",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 500\", function () {\r",
													"    pm.response.to.have.status(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyMailboxToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files?account={{agencyAccount}}&userId={{agencyMailbox}}&statuscode=random%C2%A7%CE%A6#gh",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "{{agencyAccount}}"
												},
												{
													"key": "userId",
													"value": "{{agencyMailbox}}"
												},
												{
													"key": "statuscode",
													"value": "random%C2%A7%CE%A6"
												}
											],
											"hash": "gh"
										}
									},
									"response": []
								},
								{
									"name": "Get 400 returns API Error dur to empty status code",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyMailboxToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files?account={{agencyAccount}}&userId={{agencyEmptyMailbox}}&statuscode=",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "{{agencyAccount}}"
												},
												{
													"key": "userId",
													"value": "{{agencyEmptyMailbox}}"
												},
												{
													"key": "statuscode",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get 400 return bad request  to empty class code",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyMailboxToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files?account=null&userId=null&classcode=",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "null"
												},
												{
													"key": "userId",
													"value": "null"
												},
												{
													"key": "classcode",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get  400 returns Bad Request due to empty page int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyMailboxToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files?account=null&userId=null&page=",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "null"
												},
												{
													"key": "userId",
													"value": "null"
												},
												{
													"key": "page",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get 400 returns Bad Request due to empty pagesize int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyMailboxToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files?account=null&userId=null&pagesize=",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "null"
												},
												{
													"key": "userId",
													"value": "null"
												},
												{
													"key": "pagesize",
													"value": ""
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"agencyMailboxyx50vnv\");",
											"const Pass = pm.globals.get(\"agencyMailboxPassword\");",
											"const BasicToken = pm.environment.get(\"agencyTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"agencyMailboxToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('agencyMailboxToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Files V2 Metadata",
							"item": [
								{
									"name": "Get 200ok V2 gets one record",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.test(\"Record-Count\", function () {\r",
													"    pm.response.to.have.header(\"Record-Count\");\r",
													"});\r",
													"\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyMailboxToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/v2/files?account={{agencyAccount}}&userId={{agencyMailboxOneFile}}",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"v2",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "{{agencyAccount}}"
												},
												{
													"key": "userId",
													"value": "{{agencyMailboxOneFile}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get 200ok V2 has Next and Last Headers",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.test(\"Next is present\", function () {\r",
													"    pm.response.to.have.header(\"Next\");\r",
													"});\r",
													"pm.test(\"Last is present\", function () {\r",
													"    pm.response.to.have.header(\"Last\");\r",
													"});\r",
													"pm.test(\"Record-Count is present\", function () {\r",
													"    pm.response.to.have.header(\"Record-Count\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyMailboxToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/v2/files?account={{agencyAccount}}&userId={{agencyMailbox}}",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"v2",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "{{agencyAccount}}"
												},
												{
													"key": "userId",
													"value": "{{agencyMailbox}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get 200ok V2 has prev and First headers",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"   \r",
													"});\r",
													"pm.test(\"Last is present\", function () {\r",
													"    pm.response.to.have.header(\"Prev\");\r",
													"});\r",
													"pm.test(\"Record-Count is present\", function () {\r",
													"    pm.response.to.have.header(\"Record-Count\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"pm.test(\"First is present\", function () {\r",
													"    pm.response.to.have.header(\"First\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyMailboxToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/v2/files?account={{agencyAccount}}&userId={{agencyMailbox}}&page=2",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"v2",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "{{agencyAccount}}"
												},
												{
													"key": "userId",
													"value": "{{agencyMailbox}}"
												},
												{
													"key": "page",
													"value": "2"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"agencyMailboxyx50vnv\");",
											"const Pass = pm.globals.get(\"agencyMailboxPassword\");",
											"const BasicToken = pm.environment.get(\"agencyTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"agencyMailboxToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('agencyMailboxToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Files V3 Metadata",
							"item": [
								{
									"name": "One Param",
									"item": [
										{
											"name": "Get 204 Class Code not found",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyMailboxToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&classCode=CLMDWN\"",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "classCode",
															"value": "CLMDWN\""
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200OK class code- file returned",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyMailboxToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&classCode=AIDOWN",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "classCode",
															"value": "AIDOWN"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200ok direction -Inbond returns file",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    pm.test(\"response size is not eaqual to null\", function () {\r",
															"    pm.expect(pm.response.responseSize).not.eq(0);\r",
															"});\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyMailboxToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&direction=inbound",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "direction",
															"value": "inbound"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 204ok direction -Outbond",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// pm.test(\"Status code is 204\", function () {\r",
															"//     pm.response.to.have.status(204);\r",
															"    \r",
															"// });\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyMailboxToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&direction=outbound",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "direction",
															"value": "outbound"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 filterAccount",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    \r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyMailboxToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&filterAccount={{carrierAccount}}",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "filterAccount",
															"value": "{{carrierAccount}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 filterUserId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    \r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyMailboxToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&filterUserId={{carrierMailbox}}",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "filterUserId",
															"value": "{{carrierMailbox}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 204 ok for fake status code",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyMailboxToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&statusCode=random%C2%A7%CE%A6",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "random%C2%A7%CE%A6"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Start date 204 for date after files",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyMailboxToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&startDate=11-14-2023",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "startDate",
															"value": "11-14-2023"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get stop date 204 for date before files",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyMailboxToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&stopDate=05-1-2001",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "stopDate",
															"value": "05-1-2001"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200ok Stop date- file returned",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyMailboxToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&stopDate=05-1-2022",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "stopDate",
															"value": "05-1-2022"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Start date 200- files returned",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyMailboxToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&startDate=11-10-2022",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "startDate",
															"value": "11-10-2022"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Acknowledged or A",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyMailboxToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&statusCode=A",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "A"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Auto -acknowledged or T",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyMailboxToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&statusCode=T",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "T"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Available or V",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyMailboxToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&statusCode=V",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "V"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Canceled or C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyMailboxToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&statusCode=C",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "C"
														},
														{
															"key": null,
															"value": "1f70e807-22a0-4084-bf51-742b7e162226",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Hold or H",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyMailboxToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&statusCode=H",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "H"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Incomplete or I",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// pm.test(\"Status code is 200\", function () {\r",
															"//     pm.response.to.have.status(204);\r",
															"// });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyMailboxToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&statusCode=I",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "I"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Received or R",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyMailboxToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&statusCode=R",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "R"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Send or S",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyMailboxToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&statusCode=S",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "S"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const URL = pm.environment.get(\"tokenUrl\");",
													"const User = pm.globals.get(\"agencyMailboxyx50vnv\");",
													"const Pass = pm.globals.get(\"agencyMailboxPassword\");",
													"const BasicToken = pm.environment.get(\"agencyTokenClient\");",
													"const Scope = pm.globals.get(\"allScope\")",
													"const postRequest = {",
													"  url: URL,",
													"  method: 'POST',",
													"  timeout: 10,",
													"  header: {",
													"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
													"    \"Authorization\": \"Basic \" + BasicToken",
													"  },",
													"  body: {",
													"    mode: 'urlencoded',",
													"    urlencoded: [",
													"        {key: \"grant_type\", value: \"password\"},",
													"        {key:\"username\", value: User},",
													"        {key:\"Password\", value: Pass},",
													"        {key:\"scope\", value: Scope}",
													"    ]}",
													"};",
													"pm.environment.unset(\"agencyMailboxToken\");",
													"pm.sendRequest(postRequest, function (err, res) {",
													"    var responseJson = res.json();",
													"    console.log(responseJson);",
													"    pm.environment.set('agencyMailboxToken', responseJson['access_token']);",
													"});"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Two Params",
									"item": [
										{
											"name": "Get start and stop date-  return 400 for bad dates",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyMailboxToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&startDate=2019-06-01&stopDate=2018-06-01",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "startDate",
															"value": "2019-06-01"
														},
														{
															"key": "stopDate",
															"value": "2018-06-01"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 204 Status code -Canceled or C & direction inbound",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyMailboxToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&statusCode=C&direction=inbound",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "C"
														},
														{
															"key": "direction",
															"value": "inbound"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200ok Two Status Codes",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyMailboxToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&statusCode=T&statusCode=X",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "T"
														},
														{
															"key": "statusCode",
															"value": "X"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200OK Start and Stop date- file returns",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyMailboxToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&startDate=11-1-2022&stopDate=11-11-2022",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "startDate",
															"value": "11-1-2022"
														},
														{
															"key": "stopDate",
															"value": "11-11-2022"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const URL = pm.environment.get(\"tokenUrl\");",
													"const User = pm.globals.get(\"agencyMailboxyx50vnv\");",
													"const Pass = pm.globals.get(\"agencyMailboxPassword\");",
													"const BasicToken = pm.environment.get(\"agencyTokenClient\");",
													"const Scope = pm.globals.get(\"allScope\")",
													"const postRequest = {",
													"  url: URL,",
													"  method: 'POST',",
													"  timeout: 10,",
													"  header: {",
													"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
													"    \"Authorization\": \"Basic \" + BasicToken",
													"  },",
													"  body: {",
													"    mode: 'urlencoded',",
													"    urlencoded: [",
													"        {key: \"grant_type\", value: \"password\"},",
													"        {key:\"username\", value: User},",
													"        {key:\"Password\", value: Pass},",
													"        {key:\"scope\", value: Scope}",
													"    ]}",
													"};",
													"pm.environment.unset(\"agencyMailboxToken\");",
													"pm.sendRequest(postRequest, function (err, res) {",
													"    var responseJson = res.json();",
													"    console.log(responseJson);",
													"    pm.environment.set('agencyMailboxToken', responseJson['access_token']);",
													"});"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Get 400 returns Bad Request due to empty pagesize int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyMailboxToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/v3/files?account=null&userId=null&pagesize=",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"v3",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "null"
												},
												{
													"key": "userId",
													"value": "null"
												},
												{
													"key": "pagesize",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get 204Ok returns No content due to no files",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyMailboxToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyEmptyMailbox}}",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"v3",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "{{agencyAccount}}"
												},
												{
													"key": "userId",
													"value": "{{agencyEmptyMailbox}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get  400 returns Bad Request due to empty page int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyMailboxToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/v3/files?account=&userId=&page=",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"v3",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": ""
												},
												{
													"key": "userId",
													"value": ""
												},
												{
													"key": "page",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get 401 returns Unauthorized for agency mailbox",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyMailboxToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/v3/files?account=yduxh&userId=yx66xu6",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"v3",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "yduxh"
												},
												{
													"key": "userId",
													"value": "yx66xu6"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"agencyMailboxyx50vnv\");",
											"const Pass = pm.globals.get(\"agencyMailboxPassword\");",
											"const BasicToken = pm.environment.get(\"agencyTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"agencyMailboxToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('agencyMailboxToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "Agency System User",
					"item": [
						{
							"name": "File Contents",
							"item": [
								{
									"name": "GET return 200ok for File index one",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencySysUserToken}}"
											}
										],
										"url": "{{reqUrl}}/api/files/{{fileIDwithitems}}/items/01"
									},
									"response": []
								},
								{
									"name": "GET return 200ok for File contents",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencySysUserToken}}"
											}
										],
										"url": "{{reqUrl}}/api/files/{{fileIDwithitems}}/items"
									},
									"response": []
								},
								{
									"name": "GET return 204Ok for Empty Zip",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencySysUserToken}}"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files/{{emptyZipfile}}/items/01",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files",
												"{{emptyZipfile}}",
												"items",
												"01"
											],
											"query": [
												{
													"key": "decompressFile",
													"value": "false",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET return 404Ok for fake Id ( non existing )",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencySysUserToken}}"
											}
										],
										"url": "{{reqUrl}}/api/files/{{fakeFileID}}/items"
									},
									"response": []
								},
								{
									"name": "return 401 UnAuthorized for File Id I don't have access toFile Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const URL = pm.environment.get(\"tokenUrl\");\r",
													"const User = pm.environment.get(\"agencyAdmin\");\r",
													"const Pass = pm.environment.get(\"agencyPassword\");\r",
													"const BasicToken = pm.environment.get(\"agencyTokenClient\");\r",
													"const Scope = pm.environment.get(\"allScope\")\r",
													"const postRequest = {\r",
													"  url: URL,\r",
													"  method: 'POST',\r",
													"  timeout: 10,\r",
													"  header: {\r",
													"    \"Content-Type\": \"application/x-www-raw-urlencoded\",\r",
													"    \"Authorization\": \"Basic \" + BasicToken\r",
													"  },\r",
													"  body: {\r",
													"    mode: 'urlencoded',\r",
													"    urlencoded: [\r",
													"        {key: \"grant_type\", value: \"password\"},\r",
													"        {key:\"username\", value: User},\r",
													"        {key:\"Password\", value: Pass},\r",
													"        {key:\"scope\", value: Scope}\r",
													"    ]}\r",
													"};\r",
													"pm.environment.unset(\"agencyAdminToken\");\r",
													"pm.sendRequest(postRequest, function (err, res) {\r",
													"    var responseJson = res.json();\r",
													"    console.log(responseJson);\r",
													"    pm.environment.set('agencyAdminToken', responseJson['access_token']);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencySysUserToken}}"
											}
										],
										"url": "{{reqUrl}}/api/files/{{YDUXHFileID}}"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"agencySysUser\");",
											"const Pass = pm.globals.get(\"agencyPassword\");",
											"const BasicToken = pm.environment.get(\"agencyTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"agencySysUserToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('agencySysUserToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "File Get Metadata by Id",
							"item": [
								{
									"name": "Get 404 Not found fake Id (In correct ID)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencySysUserToken}}"
											}
										],
										"url": "{{reqUrl}}/api/files/{{fakeFileId}}/metadata"
									},
									"response": []
								},
								{
									"name": "Get 200OK  return Zip metadata",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencySysUserToken}}"
											}
										],
										"url": "{{reqUrl}}/api/files/{{zipFileId}}/metadata"
									},
									"response": []
								},
								{
									"name": "Get 200OK  return edoc metadata",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencySysUserToken}}"
											}
										],
										"url": "{{reqUrl}}/api/files/{{edocFileid}}/metadata"
									},
									"response": []
								},
								{
									"name": "Get 401 Unauthorized for file on other account",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencySysUserToken}}"
											}
										],
										"url": "{{reqUrl}}/api/files/{{YDUXHFileID}}/metadata"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"agencySysUser\");",
											"const Pass = pm.globals.get(\"agencyPassword\");",
											"const BasicToken = pm.environment.get(\"agencyTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"agencySysUserToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('agencySysUserToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "File History",
							"item": [
								{
									"name": "Get 403 returns for fake id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencySysUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{fakeFileId}}/history"
									},
									"response": []
								},
								{
									"name": "Get 403 returns Unauthorized file",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencySysUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{unAuthorizedFile}}/history"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"agencySysUser\");",
											"const Pass = pm.globals.get(\"agencyPassword\");",
											"const BasicToken = pm.environment.get(\"agencyTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"agencySysUserToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('agencySysUserToken', responseJson['access_token']);",
											"    });"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "File Put Status ( Please run in sequence )",
							"item": [
								{
									"name": "Get 200ok for Status to Send",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencySysUserToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"status\":\"s\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{reqUrl}}/api/files/{{changeFileStatus}}/status"
									},
									"response": []
								},
								{
									"name": "Put 200 return 200 for sucessfull file Sent for Receive",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencySysUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{changeFileStatus}}/received"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"agencySysUser\");",
											"const Pass = pm.globals.get(\"agencyPassword\");",
											"const BasicToken = pm.environment.get(\"agencyTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"agencySysUserToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('agencySysUserToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "File Send",
							"item": [
								{
									"name": "Post 401 returns Unauthorized due to user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencySysUserToken}}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "multipart/form-data",
												"type": "text",
												"disabled": true
											},
											{
												"key": "X-IVANS-File-Metadata",
												"value": "{\"originalName\":\"QA_dbcd\",\"remoteName\":\"QA_dbcd\",\"sendAccount\":\"{{carrierAccount}}\",\"sendUserId\":\"{{carrierMailbox}}\",\"receiveAccount\":\"yduxh\",\"receiveUserId\":\"yx66xu6\",\"ClassCode\":\"{{dbcd}}\"}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "text/plain",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "",
													"type": "file",
													"src": "DBCS/QA_dbcd.zip"
												}
											]
										},
										"url": {
											"raw": "{{reqUrl}}/api/files?type=media",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "type",
													"value": "media"
												}
											]
										},
										"description": "Send a file using files api. This example sends a file from carrier HIG1 to agency Y1234 (mailbox associated on oh-dev-34)"
									},
									"response": []
								},
								{
									"name": "Put 400 returns Bad Request due to file already received",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencySysUserToken}}"
											}
										],
										"url": "{{reqUrl}}/api/files/{{changeFileStatus}}/Received",
										"description": "Send a file using files api. This example sends a file from carrier HIG1 to agency Y1234 (mailbox associated on oh-dev-34)"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"agencySysUser\");",
											"const Pass = pm.globals.get(\"agencyPassword\");",
											"const BasicToken = pm.environment.get(\"agencyTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"agencySysUserToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('agencySysUserToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Files Get by ID",
							"item": [
								{
									"name": "GET 200 OKreturns.edoc file",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencySysUserToken}}"
											}
										],
										"url": "{{reqUrl}}/api/files/{{edocFileid}}"
									},
									"response": []
								},
								{
									"name": "GET 200 OKreturns.Zip file",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencySysUserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files/{{zipFileId}}?decompressFile=true",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files",
												"{{zipFileId}}"
											],
											"query": [
												{
													"key": "decompressFile",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET 400 returns Bad Request due to invalid type for decompressFile boolean",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencySysUserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files/{{zipFileId}}?decompressFile=1",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files",
												"{{zipFileId}}"
											],
											"query": [
												{
													"key": "decompressFile",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET 404 return Not Found to non-existent id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencySysUserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files/{{wrongFileId}}",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files",
												"{{wrongFileId}}"
											],
											"query": [
												{
													"key": "decompressFile",
													"value": "1",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"agencySysUser\");",
											"const Pass = pm.globals.get(\"agencyPassword\");",
											"const BasicToken = pm.environment.get(\"agencyTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"agencySysUserToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('agencySysUserToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Files Metadata",
							"item": [
								{
									"name": "Get 204Ok returns No content due to no files",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencySysUserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files?account={{agencyAccount}}&userId={{agencyEmptyMailbox}}",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "{{agencyAccount}}"
												},
												{
													"key": "userId",
													"value": "{{agencyEmptyMailbox}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get 500 returns API Error dur to invalid status code",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 500\", function () {\r",
													"    pm.response.to.have.status(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencySysUserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files?account={{agencyAccount}}&userId={{agencyMailboxOneFile}}&statuscode=random%C2%A7%CE%A6",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "{{agencyAccount}}"
												},
												{
													"key": "userId",
													"value": "{{agencyMailboxOneFile}}"
												},
												{
													"key": "statuscode",
													"value": "random%C2%A7%CE%A6"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get 400 return bad request  to empty class code",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencySysUserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files?account=null&userId=null&classcode=",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "null"
												},
												{
													"key": "userId",
													"value": "null"
												},
												{
													"key": "classcode",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get  400 returns Bad Request due to empty page int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencySysUserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files?account=null&userId=null&page=",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "null"
												},
												{
													"key": "userId",
													"value": "null"
												},
												{
													"key": "page",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get 400 returns Bad Request due to empty pagesize int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencySysUserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files?account=null&userId=null&pagesize=",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "null"
												},
												{
													"key": "userId",
													"value": "null"
												},
												{
													"key": "pagesize",
													"value": ""
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"agencySysUser\");",
											"const Pass = pm.globals.get(\"agencyPassword\");",
											"const BasicToken = pm.environment.get(\"agencyTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"agencySysUserToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('agencySysUserToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Files V2 Metadata",
							"item": [
								{
									"name": "Get 200ok V2 gets one record",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.test(\"Record-Count\", function () {\r",
													"    pm.response.to.have.header(\"Record-Count\");\r",
													"});\r",
													"\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencySysUserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/v2/files?account={{agencyAccount}}&userId={{agencyMailboxOneFile}}",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"v2",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "{{agencyAccount}}"
												},
												{
													"key": "userId",
													"value": "{{agencyMailboxOneFile}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get 200ok V2 has Next and Last Headers",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.test(\"Next is present\", function () {\r",
													"    pm.response.to.have.header(\"Next\");\r",
													"});\r",
													"pm.test(\"Last is present\", function () {\r",
													"    pm.response.to.have.header(\"Last\");\r",
													"});\r",
													"pm.test(\"Record-Count is present\", function () {\r",
													"    pm.response.to.have.header(\"Record-Count\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencySysUserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/v2/files?account={{agencyAccount}}&userId={{agencyMailbox}}",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"v2",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "{{agencyAccount}}"
												},
												{
													"key": "userId",
													"value": "{{agencyMailbox}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get 200ok V2 has prev and First headers",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"   \r",
													"});\r",
													"pm.test(\"Last is present\", function () {\r",
													"    pm.response.to.have.header(\"Prev\");\r",
													"});\r",
													"pm.test(\"Record-Count is present\", function () {\r",
													"    pm.response.to.have.header(\"Record-Count\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"pm.test(\"First is present\", function () {\r",
													"    pm.response.to.have.header(\"First\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencySysUserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/v2/files?account={{agencyAccount}}&userId={{agencyMailbox}}&page=2",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"v2",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "{{agencyAccount}}"
												},
												{
													"key": "userId",
													"value": "{{agencyMailbox}}"
												},
												{
													"key": "page",
													"value": "2"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"agencySysUser\");",
											"const Pass = pm.globals.get(\"agencyPassword\");",
											"const BasicToken = pm.environment.get(\"agencyTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"agencySysUserToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('agencySysUserToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Files V3 Metadata",
							"item": [
								{
									"name": "One Param",
									"item": [
										{
											"name": "Get 204 Class Code not found",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencySysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&classCode=CLMDWN\"",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "classCode",
															"value": "CLMDWN\""
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200OK class code- file returned",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencySysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&classCode=AIDOWN",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "classCode",
															"value": "AIDOWN"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200ok direction -Inbond returns file",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    pm.test(\"response size is not eaqual to null\", function () {\r",
															"    pm.expect(pm.response.responseSize).not.eq(0);\r",
															"});\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencySysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&direction=inbound",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "direction",
															"value": "inbound"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 204ok direction -Outbond",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// pm.test(\"Status code is 204\", function () {\r",
															"//     pm.response.to.have.status(204);\r",
															"    \r",
															"// });\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencySysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&direction=outbound",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "direction",
															"value": "outbound"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 filterAccount",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    \r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencySysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&filterAccount={{carrierAccount}}",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "filterAccount",
															"value": "{{carrierAccount}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 filterUserId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    \r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencySysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&filterUserId={{carrierMailbox}}",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "filterUserId",
															"value": "{{carrierMailbox}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 204 ok for fake status code",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencySysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&statusCode=random%C2%A7%CE%A6",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "random%C2%A7%CE%A6"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Start date 204 for date after files",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencySysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&startDate=11-14-2023",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "startDate",
															"value": "11-14-2023"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get stop date 204 for date before files",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencySysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&stopDate=05-1-2001",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "stopDate",
															"value": "05-1-2001"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200ok Stop date- file returned",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencySysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&stopDate=05-1-2022",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "stopDate",
															"value": "05-1-2022"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Start date 200- files returned",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencySysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&startDate=11-10-2022",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "startDate",
															"value": "11-10-2022"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Acknowledged or A",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencySysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&statusCode=A",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "A"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Auto -acknowledged or T",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencySysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&statusCode=T",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "T"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Available or V",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencySysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&statusCode=V",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "V"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Canceled or C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencySysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&statusCode=C",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "C"
														},
														{
															"key": null,
															"value": "1f70e807-22a0-4084-bf51-742b7e162226",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Hold or H",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencySysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&statusCode=H",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "H"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Incomplete or I",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// pm.test(\"Status code is 200\", function () {\r",
															"//     pm.response.to.have.status(200);\r",
															"// });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencySysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&statusCode=I",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "I"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Received or R",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencySysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&statusCode=R",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "R"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Send or S",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencySysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&statusCode=S",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "S"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const URL = pm.environment.get(\"tokenUrl\");",
													"const User = pm.globals.get(\"agencySysUser\");",
													"const Pass = pm.globals.get(\"agencyPassword\");",
													"const BasicToken = pm.environment.get(\"agencyTokenClient\");",
													"const Scope = pm.globals.get(\"allScope\")",
													"const postRequest = {",
													"  url: URL,",
													"  method: 'POST',",
													"  timeout: 10,",
													"  header: {",
													"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
													"    \"Authorization\": \"Basic \" + BasicToken",
													"  },",
													"  body: {",
													"    mode: 'urlencoded',",
													"    urlencoded: [",
													"        {key: \"grant_type\", value: \"password\"},",
													"        {key:\"username\", value: User},",
													"        {key:\"Password\", value: Pass},",
													"        {key:\"scope\", value: Scope}",
													"    ]}",
													"};",
													"pm.environment.unset(\"agencySysUserToken\");",
													"pm.sendRequest(postRequest, function (err, res) {",
													"    var responseJson = res.json();",
													"    console.log(responseJson);",
													"    pm.environment.set('agencySysUserToken', responseJson['access_token']);",
													"});"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Two Params",
									"item": [
										{
											"name": "Get start and stop date-  return 400 for bad dates",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencySysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&startDate=2019-06-01&stopDate=2018-06-01",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "startDate",
															"value": "2019-06-01"
														},
														{
															"key": "stopDate",
															"value": "2018-06-01"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 204 Status code -Canceled or C & direction inbound",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencySysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&statusCode=C&direction=inbound",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "C"
														},
														{
															"key": "direction",
															"value": "inbound"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200ok Two Status Codes",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencySysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&statusCode=T&statusCode=X",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "T"
														},
														{
															"key": "statusCode",
															"value": "X"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200OK Start and Stop date- file returns",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencySysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&startDate=11-1-2022&stopDate=11-11-2022",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "startDate",
															"value": "11-1-2022"
														},
														{
															"key": "stopDate",
															"value": "11-11-2022"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const URL = pm.environment.get(\"tokenUrl\");",
													"const User = pm.globals.get(\"agencySysUser\");",
													"const Pass = pm.globals.get(\"agencyPassword\");",
													"const BasicToken = pm.environment.get(\"agencyTokenClient\");",
													"const Scope = pm.globals.get(\"allScope\")",
													"const postRequest = {",
													"  url: URL,",
													"  method: 'POST',",
													"  timeout: 10,",
													"  header: {",
													"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
													"    \"Authorization\": \"Basic \" + BasicToken",
													"  },",
													"  body: {",
													"    mode: 'urlencoded',",
													"    urlencoded: [",
													"        {key: \"grant_type\", value: \"password\"},",
													"        {key:\"username\", value: User},",
													"        {key:\"Password\", value: Pass},",
													"        {key:\"scope\", value: Scope}",
													"    ]}",
													"};",
													"pm.environment.unset(\"agencySysUserToken\");",
													"pm.sendRequest(postRequest, function (err, res) {",
													"    var responseJson = res.json();",
													"    console.log(responseJson);",
													"    pm.environment.set('agencySysUserToken', responseJson['access_token']);",
													"});"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Get 400 returns Bad Request due to empty pagesize int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencySysUserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/v3/files?account=null&userId=null&pagesize=",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"v3",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "null"
												},
												{
													"key": "userId",
													"value": "null"
												},
												{
													"key": "pagesize",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get 204Ok returns No content due to no files",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencySysUserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyEmptymailbox}}",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"v3",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "{{agencyAccount}}"
												},
												{
													"key": "userId",
													"value": "{{agencyEmptymailbox}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get  400 returns Bad Request due to empty page int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencySysUserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/v3/files?account=&userId=&page=",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"v3",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": ""
												},
												{
													"key": "userId",
													"value": ""
												},
												{
													"key": "page",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get 401 returns Unauthorized for agency mailbox",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencySysUserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/v3/files?account=yduxh&userId=yx66xu6",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"v3",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "yduxh"
												},
												{
													"key": "userId",
													"value": "yx66xu6"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"agencySysUser\");",
											"const Pass = pm.globals.get(\"agencyPassword\");",
											"const BasicToken = pm.environment.get(\"agencyTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"agencySysUserToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('agencySysUserToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Other",
							"item": [
								{
									"name": "GET Files Using ID",
									"item": [
										{
											"name": "return 500 for any file which is not complete with DecompressFile Parameter",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencySysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/files/{{fileIDwithitems}}?decompressFile=false",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"files",
														"{{fileIDwithitems}}"
													],
													"query": [
														{
															"key": "decompressFile",
															"value": "false"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "return 500 for any file ID of Accesible Mailbox with DecompressFile Parameter to True(Valid Data Stream i.e. Corrupted or cannot be decompressed)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencySysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/files/f6cd7426-3b36-447f-9594-24d559534ab5?decompressFile=true",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"files",
														"f6cd7426-3b36-447f-9594-24d559534ab5"
													],
													"query": [
														{
															"key": "decompressFile",
															"value": "true"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "return 200 OK with data for File Id of Mailbox I have Access to",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencySysUserToken}}",
														"type": "text"
													}
												],
												"url": "{{reqUrl}}/api/files/{{fileIDwithitems}}"
											},
											"response": []
										},
										{
											"name": "return 401 Not Found for File ID Belonging To Mailbox I don't have Access",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 401\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencySysUserToken}}",
														"type": "text"
													}
												],
												"url": "{{reqUrl}}/api/files/{{YDUXHFileID}}"
											},
											"response": []
										},
										{
											"name": "return 200 OK with Decompressed file Content for File Id Belonging to Mailbox I have Access and decompressfile Param is True(Valid Compressed Data Stream)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencySysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/files/{{fileIDwithitems}}?decompressFile=true",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"files",
														"{{fileIDwithitems}}"
													],
													"query": [
														{
															"key": "decompressFile",
															"value": "true"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "return 200 OK with raw file Content for File Id Belonging to Mailbox I have Access and decompressfile Param is True(Valid Non-Compressed Data Stream)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencySysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/files/{{fileIDwithitems}}?decompressFile=true",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"files",
														"{{fileIDwithitems}}"
													],
													"query": [
														{
															"key": "decompressFile",
															"value": "true"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const URL = pm.environment.get(\"tokenUrl\");",
													"const User = pm.globals.get(\"agencySysUser\");",
													"const Pass = pm.globals.get(\"agencyPassword\");",
													"const BasicToken = pm.environment.get(\"agencyTokenClient\");",
													"const Scope = pm.globals.get(\"allScope\")",
													"const postRequest = {",
													"  url: URL,",
													"  method: 'POST',",
													"  timeout: 10,",
													"  header: {",
													"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
													"    \"Authorization\": \"Basic \" + BasicToken",
													"  },",
													"  body: {",
													"    mode: 'urlencoded',",
													"    urlencoded: [",
													"        {key: \"grant_type\", value: \"password\"},",
													"        {key:\"username\", value: User},",
													"        {key:\"Password\", value: Pass},",
													"        {key:\"scope\", value: Scope}",
													"    ]}",
													"};",
													"pm.environment.unset(\"agencySysUserToken\");",
													"pm.sendRequest(postRequest, function (err, res) {",
													"    var responseJson = res.json();",
													"    console.log(responseJson);",
													"    pm.environment.set('agencySysUserToken', responseJson['access_token']);",
													"});"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Agency User",
					"item": [
						{
							"name": "File Contents",
							"item": [
								{
									"name": "GET return 200ok for File index one",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyUserToken}}"
											}
										],
										"url": "{{reqUrl}}/api/files/{{fileIDwithitems}}/items/01"
									},
									"response": []
								},
								{
									"name": "GET return 200ok for File contents",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyUserToken}}"
											}
										],
										"url": "{{reqUrl}}/api/files/{{fileIDwithitems}}/items"
									},
									"response": []
								},
								{
									"name": "GET return 204Ok for Empty Zip",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyUserToken}}"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files/{{emptyZipfile}}/items/01",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files",
												"{{emptyZipfile}}",
												"items",
												"01"
											],
											"query": [
												{
													"key": "decompressFile",
													"value": "false",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET return 401Ok for fake Id ( non existing )",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyUserToken}}"
											}
										],
										"url": "{{reqUrl}}/api/files/{{fakeFileID}}/items"
									},
									"response": []
								},
								{
									"name": "return 401 UnAuthorized for File Id I don't have access toFile Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const URL = pm.environment.get(\"tokenUrl\");\r",
													"const User = pm.environment.get(\"agencyAdmin\");\r",
													"const Pass = pm.environment.get(\"agencyPassword\");\r",
													"const BasicToken = pm.environment.get(\"agencyTokenClient\");\r",
													"const Scope = pm.environment.get(\"allScope\")\r",
													"const postRequest = {\r",
													"  url: URL,\r",
													"  method: 'POST',\r",
													"  timeout: 10,\r",
													"  header: {\r",
													"    \"Content-Type\": \"application/x-www-raw-urlencoded\",\r",
													"    \"Authorization\": \"Basic \" + BasicToken\r",
													"  },\r",
													"  body: {\r",
													"    mode: 'urlencoded',\r",
													"    urlencoded: [\r",
													"        {key: \"grant_type\", value: \"password\"},\r",
													"        {key:\"username\", value: User},\r",
													"        {key:\"Password\", value: Pass},\r",
													"        {key:\"scope\", value: Scope}\r",
													"    ]}\r",
													"};\r",
													"pm.environment.unset(\"agencyAdminToken\");\r",
													"pm.sendRequest(postRequest, function (err, res) {\r",
													"    var responseJson = res.json();\r",
													"    console.log(responseJson);\r",
													"    pm.environment.set('agencyAdminToken', responseJson['access_token']);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyUserToken}}"
											}
										],
										"url": "{{reqUrl}}/api/files/{{YDUXHFileID}}"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"agencyUser\");",
											"const Pass = pm.globals.get(\"agencyPassword\");",
											"const BasicToken = pm.environment.get(\"agencyTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"agencyUserToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('agencyUserToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "File Get Metadata by Id",
							"item": [
								{
									"name": "Get 404 Not found fake Id (In correct ID)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyUserToken}}"
											}
										],
										"url": "{{reqUrl}}/api/files/{{fakeFileId}}/metadata"
									},
									"response": []
								},
								{
									"name": "Get 200OK  return Zip metadata",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyUserToken}}"
											}
										],
										"url": "{{reqUrl}}/api/files/{{zipFileId}}/metadata"
									},
									"response": []
								},
								{
									"name": "Get 200OK  return edoc metadata",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyUserToken}}"
											}
										],
										"url": "{{reqUrl}}/api/files/{{edocFileid}}/metadata"
									},
									"response": []
								},
								{
									"name": "Get 401 Unauthorized for file on other account",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const URL = pm.environment.get(\"tokenUrl\");\r",
													"const User = pm.environment.get(\"agencyAdmin\");\r",
													"const Pass = pm.environment.get(\"agencyPassword\");\r",
													"const BasicToken = pm.environment.get(\"agencyTokenClient\");\r",
													"const Scope = pm.environment.get(\"allScope\")\r",
													"const postRequest = {\r",
													"  url: URL,\r",
													"  method: 'POST',\r",
													"  timeout: 10,\r",
													"  header: {\r",
													"    \"Content-Type\": \"application/x-www-raw-urlencoded\",\r",
													"    \"Authorization\": \"Basic \" + BasicToken\r",
													"  },\r",
													"  body: {\r",
													"    mode: 'urlencoded',\r",
													"    urlencoded: [\r",
													"        {key: \"grant_type\", value: \"password\"},\r",
													"        {key:\"username\", value: User},\r",
													"        {key:\"Password\", value: Pass},\r",
													"        {key:\"scope\", value: Scope}\r",
													"    ]}\r",
													"};\r",
													"pm.environment.unset(\"agencyAdminToken\");\r",
													"pm.sendRequest(postRequest, function (err, res) {\r",
													"    var responseJson = res.json();\r",
													"    console.log(responseJson);\r",
													"    pm.environment.set('agencyAdminToken', responseJson['access_token']);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyUserToken}}"
											}
										],
										"url": "{{reqUrl}}/api/files/{{YDUXHFileID}}/metadata"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"agencyUser\");",
											"const Pass = pm.globals.get(\"agencyPassword\");",
											"const BasicToken = pm.environment.get(\"agencyTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"agencyUserToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('agencyUserToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "File History",
							"item": [
								{
									"name": "Get 403 returns for fake id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{fakeFileId}}/history"
									},
									"response": []
								},
								{
									"name": "Get 403 returns Unauthorized file",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{unAuthorizedFile}}/history"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"agencyUser\");",
											"const Pass = pm.globals.get(\"agencyPassword\");",
											"const BasicToken = pm.environment.get(\"agencyTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"agencyUserToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('agencyUserToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "File Put Status ( Please run in sequence )",
							"item": [
								{
									"name": "Put 200 return 200 for sucessfull file Sent for Receive",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyUserToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"status\":\"R\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{reqUrl}}/api/files/{{changeFileStatus}}/status"
									},
									"response": []
								},
								{
									"name": "Get 200ok for Status to Send",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyUserToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"status\":\"s\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{reqUrl}}/api/files/{{changeFileStatus}}/status"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"agencyUser\");",
											"const Pass = pm.globals.get(\"agencyPassword\");",
											"const BasicToken = pm.environment.get(\"agencyTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"agencyUserToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('agencyUserToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "File Send",
							"item": [
								{
									"name": "Post 401 returns Unauthorized due to user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyUserToken}}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "multipart/form-data",
												"type": "text",
												"disabled": true
											},
											{
												"key": "X-IVANS-File-Metadata",
												"value": "{\"originalName\":\"TestPolicy2\",\"remoteName\":\"TestPolicy2\",\"sendAccount\":\"{{carrierAccount}}\",\"sendUserId\":\"{{carrierMailbox}}\",\"receiveAccount\":\"yduxh\",\"receiveUserId\":\"yx66xu6\",\"ClassCode\":\"{{policy}}\"}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "text/plain",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "",
													"type": "file",
													"src": "/C:/Users/Cloud Analogy/Desktop/IVANS/FilesForTeam/Policies/test file for 3136/Policies/Policies/TestPolicy2"
												}
											]
										},
										"url": {
											"raw": "{{reqUrl}}/api/files?type=media",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "type",
													"value": "media"
												}
											]
										},
										"description": "Send a file using files api. This example sends a file from carrier HIG1 to agency Y1234 (mailbox associated on oh-dev-34)"
									},
									"response": []
								},
								{
									"name": "Put 400 returns Bad Request due to file already received",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyUserToken}}"
											}
										],
										"url": "{{reqUrl}}/api/files/{{changeFileStatus}}/Received",
										"description": "Send a file using files api. This example sends a file from carrier HIG1 to agency Y1234 (mailbox associated on oh-dev-34)"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"agencyUser\");",
											"const Pass = pm.globals.get(\"agencyPassword\");",
											"const BasicToken = pm.environment.get(\"agencyTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"agencyUserToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('agencyUserToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Files Metadata",
							"item": [
								{
									"name": "GET 401 return",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyMailboxToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files?account={{agencyAccount}}&userId={{onefile}}/metadata",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "{{agencyAccount}}"
												},
												{
													"key": "userId",
													"value": "{{onefile}}/metadata"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"agencyUser\");",
											"const Pass = pm.globals.get(\"agencyPassword\");",
											"const BasicToken = pm.environment.get(\"agencyTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"agencyUserToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('agencyUserToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Files V3 Metadata",
							"item": [
								{
									"name": "One Param",
									"item": [
										{
											"name": "Get 204 Class Code not found",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&classCode=CLMDWN\"",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "classCode",
															"value": "CLMDWN\""
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200OK class code- file returned",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&classCode=AIDOWN",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "classCode",
															"value": "AIDOWN"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200ok direction -Inbond returns file",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    pm.test(\"response size is not eaqual to null\", function () {\r",
															"    pm.expect(pm.response.responseSize).not.eq(0);\r",
															"});\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&direction=inbound",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "direction",
															"value": "inbound"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 204ok direction -Outbond",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// pm.test(\"Status code is 204\", function () {\r",
															"//     pm.response.to.have.status(204);\r",
															"    \r",
															"// // });\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&direction=outbound",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "direction",
															"value": "outbound"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 filterAccount",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    \r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&filterAccount={{carrierAccount}}",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "filterAccount",
															"value": "{{carrierAccount}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 filterUserId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    \r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&filterUserId={{carrierMailbox}}",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "filterUserId",
															"value": "{{carrierMailbox}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 204 ok for fake status code",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&statusCode=random%C2%A7%CE%A6",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "random%C2%A7%CE%A6"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Start date 204 for date after files",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&startDate=11-14-2023",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "startDate",
															"value": "11-14-2023"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get stop date 204 for date before files",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&stopDate=05-1-2001",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "stopDate",
															"value": "05-1-2001"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200ok Stop date- file returned",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&stopDate=05-1-2022",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "stopDate",
															"value": "05-1-2022"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Start date 200- files returned",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&startDate=11-10-2022",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "startDate",
															"value": "11-10-2022"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Acknowledged or A",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&statusCode=A",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "A"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Auto -acknowledged or T",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&statusCode=T",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "T"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Available or V",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&statusCode=V",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "V"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Canceled or C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&statusCode=C",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "C"
														},
														{
															"key": null,
															"value": "1f70e807-22a0-4084-bf51-742b7e162226",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Hold or H",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&statusCode=H",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "H"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Incomplete or I",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// pm.test(\"Status code is 200\", function () {\r",
															"//     pm.response.to.have.status(200);\r",
															"// });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&statusCode=I",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "I"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Received or R",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&statusCode=R",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "R"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Send or S",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&statusCode=S",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "S"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const URL = pm.environment.get(\"tokenUrl\");",
													"const User = pm.globals.get(\"agencyUser\");",
													"const Pass = pm.globals.get(\"agencyPassword\");",
													"const BasicToken = pm.environment.get(\"agencyTokenClient\");",
													"const Scope = pm.globals.get(\"allScope\")",
													"const postRequest = {",
													"  url: URL,",
													"  method: 'POST',",
													"  timeout: 10,",
													"  header: {",
													"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
													"    \"Authorization\": \"Basic \" + BasicToken",
													"  },",
													"  body: {",
													"    mode: 'urlencoded',",
													"    urlencoded: [",
													"        {key: \"grant_type\", value: \"password\"},",
													"        {key:\"username\", value: User},",
													"        {key:\"Password\", value: Pass},",
													"        {key:\"scope\", value: Scope}",
													"    ]}",
													"};",
													"pm.environment.unset(\"agencyUserToken\");",
													"pm.sendRequest(postRequest, function (err, res) {",
													"    var responseJson = res.json();",
													"    console.log(responseJson);",
													"    pm.environment.set('agencyUserToken', responseJson['access_token']);",
													"});"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Two Params",
									"item": [
										{
											"name": "Get start and stop date-  return 400 for bad dates",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&startDate=2019-06-01&stopDate=2018-06-01",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "startDate",
															"value": "2019-06-01"
														},
														{
															"key": "stopDate",
															"value": "2018-06-01"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 204 Status code -Canceled or C & direction inbound",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&statusCode=C&direction=inbound",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "C"
														},
														{
															"key": "direction",
															"value": "inbound"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200ok Two Status Codes",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&statusCode=T&statusCode=X",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "T"
														},
														{
															"key": "statusCode",
															"value": "X"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200OK Start and Stop date- file returns",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&startDate=11-1-2022&stopDate=11-11-2022",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "startDate",
															"value": "11-1-2022"
														},
														{
															"key": "stopDate",
															"value": "11-11-2022"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const URL = pm.environment.get(\"tokenUrl\");",
													"const User = pm.globals.get(\"agencyUser\");",
													"const Pass = pm.globals.get(\"agencyPassword\");",
													"const BasicToken = pm.environment.get(\"agencyTokenClient\");",
													"const Scope = pm.globals.get(\"allScope\")",
													"const postRequest = {",
													"  url: URL,",
													"  method: 'POST',",
													"  timeout: 10,",
													"  header: {",
													"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
													"    \"Authorization\": \"Basic \" + BasicToken",
													"  },",
													"  body: {",
													"    mode: 'urlencoded',",
													"    urlencoded: [",
													"        {key: \"grant_type\", value: \"password\"},",
													"        {key:\"username\", value: User},",
													"        {key:\"Password\", value: Pass},",
													"        {key:\"scope\", value: Scope}",
													"    ]}",
													"};",
													"pm.environment.unset(\"agencyUserToken\");",
													"pm.sendRequest(postRequest, function (err, res) {",
													"    var responseJson = res.json();",
													"    console.log(responseJson);",
													"    pm.environment.set('agencyUserToken', responseJson['access_token']);",
													"});"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Get 400 returns Bad Request due to empty pagesize int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyUserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/v3/files?account=null&userId=null&pagesize=",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"v3",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "null"
												},
												{
													"key": "userId",
													"value": "null"
												},
												{
													"key": "pagesize",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get 204Ok returns No content due to no files",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyUserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyEmptymailbox}}",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"v3",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "{{agencyAccount}}"
												},
												{
													"key": "userId",
													"value": "{{agencyEmptymailbox}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get  400 returns Bad Request due to empty page int",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyUserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/v3/files?account=&userId=&page=",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"v3",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": ""
												},
												{
													"key": "userId",
													"value": ""
												},
												{
													"key": "page",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get 401 returns Unauthorized for agency mailbox",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyUserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/v3/files?account=yduxh&userId=yx66xu6",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"v3",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "yduxh"
												},
												{
													"key": "userId",
													"value": "yx66xu6"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"agencyUser\");",
											"const Pass = pm.globals.get(\"agencyPassword\");",
											"const BasicToken = pm.environment.get(\"agencyTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"agencyUserToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('agencyUserToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "Carrier Mailbox",
					"item": [
						{
							"name": "File Contents",
							"item": [
								{
									"name": "Get 200OK for File Contents",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierMailboxToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{fileIDwithitems}}/items"
									},
									"response": []
								},
								{
									"name": "Get 200OK for File index one",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierMailboxToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{fileIDwithitems}}/items/01"
									},
									"response": []
								},
								{
									"name": "Get 204OK for Empty Zip file",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierMailboxToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{emptyZipfile}}/items"
									},
									"response": []
								},
								{
									"name": "Get 401 for file on another account",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierMailboxToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{unAuthorizedFile}}/items"
									},
									"response": []
								},
								{
									"name": "Get 401 for fake ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierMailboxToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{fakeFileID}}/items"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"carrierMailboxAutomation\");",
											"const Pass = pm.globals.get(\"carrierMailboxAutomationPassword\");",
											"const BasicToken = pm.environment.get(\"carrierTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"carrierMailboxToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('carrierMailboxToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "File Get Metadata by Id",
							"item": [
								{
									"name": "Get 404 Not found fake Id (In correct ID)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierMailboxToken}}"
											}
										],
										"url": "{{reqUrl}}/api/files/{{fakeFileId}}/metadata"
									},
									"response": []
								},
								{
									"name": "Get 200OK  return Zip metadata",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierMailboxToken}}"
											}
										],
										"url": "{{reqUrl}}/api/files/{{zipFileId}}/metadata"
									},
									"response": []
								},
								{
									"name": "Get 200OK  return edoc metadata",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierMailboxToken}}"
											}
										],
										"url": "{{reqUrl}}/api/files/{{edocFileid}}/metadata"
									},
									"response": []
								},
								{
									"name": "Get 401 Unauthorized for file on other account",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const URL = pm.environment.get(\"tokenUrl\");\r",
													"const User = pm.environment.get(\"agencyAdmin\");\r",
													"const Pass = pm.environment.get(\"agencyPassword\");\r",
													"const BasicToken = pm.environment.get(\"agencyTokenClient\");\r",
													"const Scope = pm.environment.get(\"allScope\")\r",
													"const postRequest = {\r",
													"  url: URL,\r",
													"  method: 'POST',\r",
													"  timeout: 10,\r",
													"  header: {\r",
													"    \"Content-Type\": \"application/x-www-raw-urlencoded\",\r",
													"    \"Authorization\": \"Basic \" + BasicToken\r",
													"  },\r",
													"  body: {\r",
													"    mode: 'urlencoded',\r",
													"    urlencoded: [\r",
													"        {key: \"grant_type\", value: \"password\"},\r",
													"        {key:\"username\", value: User},\r",
													"        {key:\"Password\", value: Pass},\r",
													"        {key:\"scope\", value: Scope}\r",
													"    ]}\r",
													"};\r",
													"pm.environment.unset(\"agencyAdminToken\");\r",
													"pm.sendRequest(postRequest, function (err, res) {\r",
													"    var responseJson = res.json();\r",
													"    console.log(responseJson);\r",
													"    pm.environment.set('agencyAdminToken', responseJson['access_token']);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierMailboxToken}}"
											}
										],
										"url": "{{reqUrl}}/api/files/{{unAuthorizedFile}}/metadata"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"carrierMailboxAutomation\");",
											"const Pass = pm.globals.get(\"carrierMailboxAutomationPassword\");",
											"const BasicToken = pm.environment.get(\"carrierTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"carrierMailboxToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('carrierMailboxToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "File History",
							"item": [
								{
									"name": "Get 404 returns for fake id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierMailboxToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{fakeFileId}}/history"
									},
									"response": []
								},
								{
									"name": "Get 401 returns Unauthorized file",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierMailboxToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files/{{unAuthorizedFile}}/history",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files",
												"{{unAuthorizedFile}}",
												"history"
											],
											"query": [
												{
													"key": null,
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"carrierMailboxAutomation\");",
											"const Pass = pm.globals.get(\"carrierMailboxAutomationPassword\");",
											"const BasicToken = pm.environment.get(\"carrierTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"carrierMailboxToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('carrierMailboxToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Send Files",
							"item": [
								{
									"name": "return 202 Accepted when sending Policy file with Valid Param",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 202\", function () {\r",
													"    pm.response.to.have.status(202);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierMailboxToken}}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "multipart/form-data",
												"type": "text",
												"disabled": true
											},
											{
												"key": "X-IVANS-File-Metadata",
												"value": "{\"originalName\":\"QAPolicyTest\",\"remoteName\":\"QAPolicyTest\",\"sendAccount\":\"{{carrierAccount}}\",\"sendUserId\":\"{{carrierMailbox}}\",\"receiveAccount\":\"{{agencyAccount}}\",\"receiveUserId\":\"{{agencyMailbox}}\",\"ClassCode\":\"{{policy}}\"}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "text/plain",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "",
													"type": "file",
													"src": "QAPolicyTest"
												}
											]
										},
										"url": {
											"raw": "{{reqUrl}}/api/files?type=media",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "type",
													"value": "media"
												}
											]
										},
										"description": "Send a file using files api. This example sends a file from carrier HIG1 to agency Y1234 (mailbox associated on oh-dev-34)"
									},
									"response": []
								},
								{
									"name": "return 202 Accepted when sending Edoc file with Valid Param",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 202\", function () {\r",
													"    pm.response.to.have.status(202);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierMailboxToken}}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "multipart/form-data",
												"type": "text",
												"disabled": true
											},
											{
												"key": "X-IVANS-File-Metadata",
												"value": "{\"originalName\":\"edoctest.eDoc\",\"remoteName\":\"edoctest.eDoc\",\"sendAccount\":\"{{carrierAccount}}\",\"sendUserId\":\"{{carrierMailbox}}\",\"receiveAccount\":\"{{agencyAccount}}\",\"receiveUserId\":\"{{agencyMailbox}}\",\"ClassCode\":\"{{edoc}}\"}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "text/plain",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "",
													"type": "file",
													"src": "eDocs/edoctest.eDoc"
												}
											]
										},
										"url": {
											"raw": "{{reqUrl}}/api/files?type=media",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "type",
													"value": "media"
												}
											]
										},
										"description": "Send a file using files api. This example sends a file from carrier HIG1 to agency Y1234 (mailbox associated on oh-dev-34)"
									},
									"response": []
								},
								{
									"name": "return 202 Accepted when sending Claim file with Valid Param",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 202\", function () {\r",
													"    pm.response.to.have.status(202);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierMailboxToken}}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "multipart/form-data",
												"type": "text",
												"disabled": true
											},
											{
												"key": "X-IVANS-File-Metadata",
												"value": "{\"originalName\":\"ClaimQATEST\",\"remoteName\":\"ClaimQATEST\",\"sendAccount\":\"{{carrierAccount}}\",\"sendUserId\":\"{{carrierMailbox}}\",\"receiveAccount\":\"{{agencyAccount}}\",\"receiveUserId\":\"{{agencyMailbox}}\",\"ClassCode\":\"{{claim}}\"}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "text/plain",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "",
													"type": "file",
													"src": "Claims/Claim_QATEST"
												}
											]
										},
										"url": {
											"raw": "{{reqUrl}}/api/files?type=media",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "type",
													"value": "media"
												}
											]
										},
										"description": "Send a file using files api. This example sends a file from carrier HIG1 to agency Y1234 (mailbox associated on oh-dev-34)"
									},
									"response": []
								},
								{
									"name": "return 202 Accepted when sending DBCD file with Valid Param",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 202\", function () {\r",
													"    pm.response.to.have.status(202);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierMailboxToken}}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "multipart/form-data",
												"type": "text",
												"disabled": true
											},
											{
												"key": "X-IVANS-File-Metadata",
												"value": "{\"originalName\":\"DBCFile.001\",\"remoteName\":\"DBCFile.001\",\"sendAccount\":\"{{carrierAccount}}\",\"sendUserId\":\"{{carrierMailbox}}\",\"receiveAccount\":\"{{agencyAccount}}\",\"receiveUserId\":\"{{agencyMailbox}}\",\"ClassCode\":\"{{dbcd}}\"}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "text/plain",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "",
													"type": "file",
													"src": "DBCS/DBCFile.001/DBCFile_QATEST.xls"
												}
											]
										},
										"url": {
											"raw": "{{reqUrl}}/api/files?type=media",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "type",
													"value": "media"
												}
											]
										},
										"description": "Send a file using files api. This example sends a file from carrier HIG1 to agency Y1234 (mailbox associated on oh-dev-34)"
									},
									"response": []
								},
								{
									"name": "Get 400 return Bad Request due to empty type.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierMailboxToken}}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "multipart/form-data",
												"type": "text",
												"disabled": true
											},
											{
												"key": "X-IVANS-File-Metadata",
												"value": "{\"originalName\":\"DBCFile.001\",\"remoteName\":\"DBCFile.001\",\"sendAccount\":\"{{carrierAccount}}\",\"sendUserId\":\"{{carrierMailbox}}\",\"receiveAccount\":\"{{agencyAccount}}\",\"receiveUserId\":\"{{agencyMailbox}}\",\"ClassCode\":\"{{dbcd}}\"}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "text/plain",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "",
													"type": "file",
													"src": "TestPolicy4/DBCFile.001.zip"
												}
											]
										},
										"url": {
											"raw": "{{reqUrl}}/api/files?type=",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "type",
													"value": ""
												}
											]
										},
										"description": "Send a file using files api. This example sends a file from carrier HIG1 to agency Y1234 (mailbox associated on oh-dev-34)"
									},
									"response": []
								},
								{
									"name": "Get 400 return Bad Request due to missing header data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierMailboxToken}}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "multipart/form-data",
												"type": "text",
												"disabled": true
											},
											{
												"key": "X-IVANS-File-Metadata",
												"value": "{\"originalName\":\"DBCFile.001\",\"remoteName\":\"DBCFile.001\",\"sendAccount\":\"{{carrierAccount}}\",\"sendUserId\":\"{{carrierMailbox}}\",\"receiveAccount\":\"{{agencyAccount}}\",\"receiveUserId\":\"{{agencyMailbox}}\",\"ClassCode\":\"{{dbcd}}\"}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "content-type",
												"value": "text/plain",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "",
													"type": "file",
													"src": "TestPolicy4/DBCFile.001.zip"
												}
											]
										},
										"url": {
											"raw": "{{reqUrl}}/api/files?type=media",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "type",
													"value": "media"
												}
											]
										},
										"description": "Send a file using files api. This example sends a file from carrier HIG1 to agency Y1234 (mailbox associated on oh-dev-34)"
									},
									"response": []
								},
								{
									"name": "Get 404 returns Not Found to missing params",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierMailboxToken}}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "multipart/form-data",
												"type": "text",
												"disabled": true
											},
											{
												"key": "X-IVANS-File-Metadata",
												"value": "{\"originalName\":\"DBCFile.001\",\"remoteName\":\"DBCFile.001\",\"sendAccount\":\"{{carrierAccount}}\",\"sendUserId\":\"{{carrierMailbox}}\",\"receiveAccount\":\"{{agencyAccount}}\",\"receiveUserId\":\"{{agencyMailbox}}\",\"ClassCode\":\"{{dbcd}}\"}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "content-type",
												"value": "text/plain",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "",
													"type": "file",
													"src": "TestPolicy4/DBCFile.001.zip"
												}
											]
										},
										"url": {
											"raw": "{{reqUrl}}/api/files",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "type",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Send a file using files api. This example sends a file from carrier HIG1 to agency Y1234 (mailbox associated on oh-dev-34)"
									},
									"response": []
								},
								{
									"name": "return 503 Service Unavailable when sending file with type Param not equal to media",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 503\", function () {\r",
													"    pm.response.to.have.status(503);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierMailboxToken}}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "multipart/form-data",
												"type": "text",
												"disabled": true
											},
											{
												"key": "X-IVANS-File-Metadata",
												"value": "{\"originalName\":\"testData\",\"remoteName\":\"testData\",\"sendAccount\":\"{{carrierAccount}}\",\"sendUserId\":\"{{carrierMailbox}}\",\"receiveAccount\":\"{{agencyAccount}}\",\"receiveUserId\":\"{{agencyMailbox}}\",\"ClassCode\":\"AIDOWN\"}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "text/plain",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "",
													"type": "file",
													"src": "/C:/Users/Cloud Analogy/Downloads/testfile.csv"
												}
											]
										},
										"url": {
											"raw": "{{reqUrl}}/api/files?type=med",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "type",
													"value": "med"
												}
											]
										},
										"description": "Send a file using files api. This example sends a file from carrier HIG1 to agency Y1234 (mailbox associated on oh-dev-34)"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"carrierMailboxAutomation\");",
											"const Pass = pm.globals.get(\"carrierMailboxAutomationPassword\");",
											"const BasicToken = pm.environment.get(\"carrierTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"carrierMailboxToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('carrierMailboxToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Files Get by ID",
							"item": [
								{
									"name": "GET 400 returns Bad Request due to invalid type for decompressFile boolean",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierMailboxToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files/{{zipFileId}}?decompressFile=1",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files",
												"{{zipFileId}}"
											],
											"query": [
												{
													"key": "decompressFile",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET 404 return Not Found to non-existent id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierMailboxToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files/{{wrongFileId}}",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files",
												"{{wrongFileId}}"
											],
											"query": [
												{
													"key": "decompressFile",
													"value": "1",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get 401 returns unauthorized for carrier",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierMailboxToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{unAuthorizedFile}}"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"carrierMailboxAutomation\");",
											"const Pass = pm.globals.get(\"carrierMailboxAutomationPassword\");",
											"const BasicToken = pm.environment.get(\"carrierTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"carrierMailboxToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('carrierMailboxToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Files Metadata",
							"item": [
								{
									"name": "Get 500 returns API Error dur to invalid status code",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 500\", function () {\r",
													"    pm.response.to.have.status(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierMailboxToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files?account={{carrierAccount}}&userId={{carrierEmptyMailbox}}&statuscode=asdf!@#gh",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "{{carrierAccount}}"
												},
												{
													"key": "userId",
													"value": "{{carrierEmptyMailbox}}"
												},
												{
													"key": "statuscode",
													"value": "asdf!@"
												}
											],
											"hash": "gh"
										}
									},
									"response": []
								},
								{
									"name": "Get 400 return bad request  to empty class code",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierMailboxToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files?account=null&userId=null&classcode=",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "null"
												},
												{
													"key": "userId",
													"value": "null"
												},
												{
													"key": "classcode",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get  400 returns Bad Request due to empty page int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierMailboxToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files?account=null&userId=null&page=",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "null"
												},
												{
													"key": "userId",
													"value": "null"
												},
												{
													"key": "page",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get 400 returns Bad Request due to empty pagesize int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierMailboxToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files?account=null&userId=null&pagesize=",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "null"
												},
												{
													"key": "userId",
													"value": "null"
												},
												{
													"key": "pagesize",
													"value": ""
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"carrierMailboxAutomation\");",
											"const Pass = pm.globals.get(\"carrierMailboxAutomationPassword\");",
											"const BasicToken = pm.environment.get(\"carrierTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"carrierMailboxToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('carrierMailboxToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Files V3 Metadata",
							"item": [
								{
									"name": "Two Params",
									"item": [
										{
											"name": "Get start and stop date-  return 400 for bad dates",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierMailboxToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierMailbox}}&userId={{carrierMailbox}}&startDate=2019-06-01&stopDate=2018-06-01",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "startDate",
															"value": "2019-06-01"
														},
														{
															"key": "stopDate",
															"value": "2018-06-01"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 204 Status code -Canceled or C & direction inbound",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierMailboxToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&statusCode=C&direction=inbound",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "C"
														},
														{
															"key": "direction",
															"value": "inbound"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200ok Two Status Codes",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierMailboxToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierV3Mailbox}}&statusCode=T&statusCode=X",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierV3Mailbox}}"
														},
														{
															"key": "statusCode",
															"value": "T"
														},
														{
															"key": "statusCode",
															"value": "X"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200OK Start and Stop date- file returns",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierMailboxToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&startDate=11-1-2022&stopDate=11-11-2022",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "startDate",
															"value": "11-1-2022"
														},
														{
															"key": "stopDate",
															"value": "11-11-2022"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const URL = pm.environment.get(\"tokenUrl\");",
													"const User = pm.globals.get(\"carrierMailboxAutomation\");",
													"const Pass = pm.globals.get(\"carrierMailboxAutomationPassword\");",
													"const BasicToken = pm.environment.get(\"carrierTokenClient\");",
													"const Scope = pm.globals.get(\"allScope\")",
													"const postRequest = {",
													"  url: URL,",
													"  method: 'POST',",
													"  timeout: 10,",
													"  header: {",
													"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
													"    \"Authorization\": \"Basic \" + BasicToken",
													"  },",
													"  body: {",
													"    mode: 'urlencoded',",
													"    urlencoded: [",
													"        {key: \"grant_type\", value: \"password\"},",
													"        {key:\"username\", value: User},",
													"        {key:\"Password\", value: Pass},",
													"        {key:\"scope\", value: Scope}",
													"    ]}",
													"};",
													"pm.environment.unset(\"carrierMailboxToken\");",
													"pm.sendRequest(postRequest, function (err, res) {",
													"    var responseJson = res.json();",
													"    console.log(responseJson);",
													"    pm.environment.set('carrierMailboxToken', responseJson['access_token']);",
													"});"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "One Param",
									"item": [
										{
											"name": "Get 200 ok Status code- Received or R",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierMailboxToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&statusCode=R",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "R"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 204 Class Code not found",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierMailboxToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{onefile}}&classCode=CLMDWN",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{onefile}}"
														},
														{
															"key": "classCode",
															"value": "CLMDWN"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Start date 204 for date after files",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierMailboxToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&startDate=11-14-2023",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "startDate",
															"value": "11-14-2023"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Hold or H",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierMailboxToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&statusCode=H",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "H"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200ok Stop date- file returned",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierMailboxToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierV3Mailbox}}&stopDate=05-1-2023",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierV3Mailbox}}"
														},
														{
															"key": "stopDate",
															"value": "05-1-2023"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Purged or X",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierMailboxToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&statusCode=X",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "X"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Send or S",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{carrierMailboxToken}}"
													}
												},
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierV3Mailbox}}&statusCode=S&page=1",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierV3Mailbox}}"
														},
														{
															"key": "statusCode",
															"value": "S"
														},
														{
															"key": "page",
															"value": "1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Acknowledged or A",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierMailboxToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&statusCode=A",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "A"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Start date 200- files returned",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierMailboxToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&startDate=11-10-2022",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "startDate",
															"value": "11-10-2022"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Incomplete or I",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierMailboxToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&statusCode=I",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "I"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200OK class code- file returned",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierMailboxToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierV3Mailbox}}&classCode=AIDOWN",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierV3Mailbox}}"
														},
														{
															"key": "classCode",
															"value": "AIDOWN"
														},
														{
															"key": "pageSize",
															"value": "1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 204 ok for fake status code",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierMailboxToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&statusCode=random%C2%A7%CE%A6",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "random%C2%A7%CE%A6"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Auto -acknowledged or T",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierMailboxToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&statusCode=T",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "T"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 204ok direction -Outbond",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    \r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierMailboxToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierV3Mailbox}}&direction=outbound",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierV3Mailbox}}"
														},
														{
															"key": "direction",
															"value": "outbound"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Canceled or C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierMailboxToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?statusCode=C&account={{carrierAccount}}&userId={{carrierMailbox}}",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "statusCode",
															"value": "C"
														},
														{
															"key": null,
															"value": "1f70e807-22a0-4084-bf51-742b7e162226",
															"disabled": true
														},
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 filterAccount",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    \r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierMailboxToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&filterAccount={{agencyAccount}}",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "filterAccount",
															"value": "{{agencyAccount}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200ok direction -Inbond returns file",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    pm.test(\"response size is not eaqual to null\", function () {\r",
															"    pm.expect(pm.response.responseSize).not.eq(0);\r",
															"});\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierMailboxToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&direction=inbound",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "direction",
															"value": "inbound"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Available or V",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierMailboxToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&statusCode=V",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "V"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 filterUserId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    \r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierMailboxToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&filterUserId={{agencyMailbox}}",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "filterUserId",
															"value": "{{agencyMailbox}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get stop date 204 for date before files",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierMailboxToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&stopDate=05-1-2001",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "stopDate",
															"value": "05-1-2001"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const URL = pm.environment.get(\"tokenUrl\");",
													"const User = pm.globals.get(\"carrierMailboxAutomation\");",
													"const Pass = pm.globals.get(\"carrierMailboxAutomationPassword\");",
													"const BasicToken = pm.environment.get(\"carrierTokenClient\");",
													"const Scope = pm.globals.get(\"allScope\")",
													"const postRequest = {",
													"  url: URL,",
													"  method: 'POST',",
													"  timeout: 10,",
													"  header: {",
													"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
													"    \"Authorization\": \"Basic \" + BasicToken",
													"  },",
													"  body: {",
													"    mode: 'urlencoded',",
													"    urlencoded: [",
													"        {key: \"grant_type\", value: \"password\"},",
													"        {key:\"username\", value: User},",
													"        {key:\"Password\", value: Pass},",
													"        {key:\"scope\", value: Scope}",
													"    ]}",
													"};",
													"pm.environment.unset(\"carrierMailboxToken\");",
													"pm.sendRequest(postRequest, function (err, res) {",
													"    var responseJson = res.json();",
													"    console.log(responseJson);",
													"    pm.environment.set('carrierMailboxToken', responseJson['access_token']);",
													"});"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Get 400 returns Bad Request due to empty pagesize int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierMailboxToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/v3/files?account=null&userId=null&pagesize=",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"v3",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "null"
												},
												{
													"key": "userId",
													"value": "null"
												},
												{
													"key": "pagesize",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get 204Ok returns No content due to no files",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierMailboxToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{emptyAgencyMailbox}}",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"v3",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "{{carrierAccount}}"
												},
												{
													"key": "userId",
													"value": "{{emptyAgencyMailbox}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get  400 returns Bad Request due to empty page int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierMailboxToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/v3/files?account=&userId=&page=",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"v3",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": ""
												},
												{
													"key": "userId",
													"value": ""
												},
												{
													"key": "page",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get 401 returns Unauthorized for agency mailbox",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierMailboxToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/v3/files?account=yduxh&userId=yx66xu6",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"v3",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "yduxh"
												},
												{
													"key": "userId",
													"value": "yx66xu6"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"carrierMailboxAutomation\");",
											"const Pass = pm.globals.get(\"carrierMailboxAutomationPassword\");",
											"const BasicToken = pm.environment.get(\"carrierTokenClient\");",
											"const Scope = pm.globals.get(\"allScopes\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"carrierMailboxToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('carrierMailboxToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "Carrier System User",
					"item": [
						{
							"name": "File Contents",
							"item": [
								{
									"name": "Get 200OK for File Contents",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{fileIDwithitems}}/items"
									},
									"response": []
								},
								{
									"name": "Get 200OK for File index one",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{fileIDwithitems}}/items/01"
									},
									"response": []
								},
								{
									"name": "Get 204OK for Empty Zip file",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{emptyZipfile}}/items"
									},
									"response": []
								},
								{
									"name": "Get 401 for file on another account",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{unAuthorizedFile}}/items"
									},
									"response": []
								},
								{
									"name": "Get 401 for fake ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{fakeFileID}}/items"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"carrierSysUser\");",
											"const Pass = pm.globals.get(\"carrierPassword\");",
											"const BasicToken = pm.environment.get(\"carrierTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"carrierSysUserToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('carrierSysUserToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "FIles Get by ID",
							"item": [
								{
									"name": "Get 400 returns Bad Request dur to Invalid for decompressFile Boolean",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files/{{fileIDwithitems}}?decompressFile=1",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files",
												"{{fileIDwithitems}}"
											],
											"query": [
												{
													"key": "decompressFile",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get 404  returns Not Found due to non-existent id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{wrongFileId}}"
									},
									"response": []
								},
								{
									"name": "Get 401 returns unauthoried for carrier",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{unAuthorizedFile}}"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"carrierSysUser\");",
											"const Pass = pm.globals.get(\"carrierPassword\");",
											"const BasicToken = pm.environment.get(\"carrierTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"carrierSysUserToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('carrierSysUserToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "File Get Matadata by Id",
							"item": [
								{
									"name": "Get 200OK -return edoc metadata",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{edocFileid}}/metadata"
									},
									"response": []
								},
								{
									"name": "return 200 Ok with any account and any UserId for a non-empty \"inbox\" Mailbox",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 OK\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    var jsonData = JSON.parse(responseBody);\r",
													"    // pm.expect(jsonData).to.have.property()\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const URL = pm.environment.get(\"tokenUrl\");\r",
													"const User = pm.globals.get(\"agencyAdmin\");\r",
													"const Pass = pm.globals.get(\"agencyPassword\");\r",
													"const BasicToken = pm.environment.get(\"agencyTokenClient\");\r",
													"const Scope = pm.globals.get(\"allScopes\")\r",
													"const postRequest = {\r",
													"  url: URL,\r",
													"  method: 'POST',\r",
													"  timeout: 10,\r",
													"  header: {\r",
													"    \"Content-Type\": \"application/x-www-raw-urlencoded\",\r",
													"    \"Authorization\": \"Basic \" + BasicToken\r",
													"  },\r",
													"  body: {\r",
													"    mode: 'urlencoded',\r",
													"    urlencoded: [\r",
													"        {key: \"grant_type\", value: \"password\"},\r",
													"        {key:\"username\", value: User},\r",
													"        {key:\"Password\", value: Pass},\r",
													"        {key:\"scope\", value: Scope}\r",
													"    ]}\r",
													"};\r",
													"pm.environment.unset(\"agencyAdminToken\");\r",
													"pm.sendRequest(postRequest, function (err, res) {\r",
													"    var responseJson = res.json();\r",
													"    console.log(responseJson);\r",
													"    pm.environment.set('agencyAdminToken', responseJson['access_token']);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyAdminToken}}"
											},
											{
												"key": "pageSize",
												"value": "1",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"v3",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "{{agencyAccount}}"
												},
												{
													"key": "userId",
													"value": "{{agencyMailbox}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "return 204 No Content with any account and UserId with Empty Inbox",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files?account={{carrierAccount}}&userId={{carrierEmptymailbox}}",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "leadRoute",
													"value": "",
													"disabled": true
												},
												{
													"key": "account",
													"value": "{{carrierAccount}}"
												},
												{
													"key": "userId",
													"value": "{{carrierEmptymailbox}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "return 200 Ok with any account and any UserId with Status code received",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 OK\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    // var jsonData = JSON.parse(responseBody);\r",
													"    //pm.expect(jsonData).to.have.property()\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files?account={{carrierAccount}}&userId={{carrierMailbox}}&statuscode=received",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "{{carrierAccount}}"
												},
												{
													"key": "userId",
													"value": "{{carrierMailbox}}"
												},
												{
													"key": "statuscode",
													"value": "received"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "return 200 Ok with any account and any UserId with pagesize = 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 OK\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    // var jsonData = JSON.parse(responseBody);\r",
													"    // pm.expect(jsonData).to.have.length(25)\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "pageSize",
													"value": "1",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{reqUrl}}/api/files?account={{carrierAccount}}&userId={{carrierMailbox}}&pageSize=1",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "{{carrierAccount}}"
												},
												{
													"key": "userId",
													"value": "{{carrierMailbox}}"
												},
												{
													"key": "pageSize",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "return 401 Unauthorized with Non Existing account and UserId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files?account={{wrongAccount}}&userId={{wrongUserID}}",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "{{wrongAccount}}"
												},
												{
													"key": "userId",
													"value": "{{wrongUserID}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "return 401 Unauthorized with any account and UserId I don't have access",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files?account={{carrierAcoountNoAccess}}&userId={{carrierMailboxNoAcess}}",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "{{carrierAcoountNoAccess}}"
												},
												{
													"key": "userId",
													"value": "{{carrierMailboxNoAcess}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "return 404 Not Found without Account",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"\r",
													"    const REQURL = pm.environment.get(\"reqUrl\")\r",
													"    var jsonData = JSON.parse(responseBody);\r",
													"    pm.expect(jsonData).to.have.property(\"message\", \"No HTTP resource was found that matches the request URI '\" + REQURL + \"/api/files'.\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "",
													"disabled": true
												},
												{
													"key": "userId",
													"value": "${userId}",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "return 404 Not Found without UserId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"    \r",
													"    const REQURL = pm.environment.get(\"reqUrl\")\r",
													"    var jsonData = JSON.parse(responseBody);\r",
													"    pm.expect(jsonData).to.have.property(\"message\", \"No HTTP resource was found that matches the request URI '\" + REQURL + \"/api/files'.\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "",
													"disabled": true
												},
												{
													"key": "userId",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "return 400 Bad Request with Empty account and Non-Empty User Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"\r",
													"    var jsonData = JSON.parse(responseBody);\r",
													"    pm.expect(jsonData).to.have.property(\"message\", \"The request is invalid.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files?account=&userId={{carrierMailbox}}",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": ""
												},
												{
													"key": "userId",
													"value": "{{carrierMailbox}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "return 400 Bad Request with Non-Empty account and Empty User Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"\r",
													"    var jsonData = JSON.parse(responseBody);\r",
													"    pm.expect(jsonData).to.have.property(\"message\", \"The request is invalid.\");\r",
													"    //pm.expect(jsonData.modelState).to.have.property(\"userId.String\", [\"A value is required but was not present in the request.\"]);\r",
													"}); "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files?account={{carrierAccount}}&userId=",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "{{carrierAccount}}"
												},
												{
													"key": "userId",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "return 400 Bad Request with Empty account and Empty User Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"\r",
													"    var jsonData = JSON.parse(responseBody);\r",
													"    pm.expect(jsonData).to.have.property(\"message\", \"The request is invalid.\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files?account=&userId=",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": ""
												},
												{
													"key": "userId",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get 404 for fake ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{fakeFileID}}/metadata"
									},
									"response": []
								},
								{
									"name": "Get 200Ok return Zip file Metadata",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{zipFileId}}/metadata"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"carrierSysUser\");",
											"const Pass = pm.globals.get(\"carrierPassword\");",
											"const BasicToken = pm.environment.get(\"carrierTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"carrierSysUserToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('carrierSysUserToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "GET History by File ID",
							"item": [
								{
									"name": "Get 200Ok edoc file History",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{edocFileid}}/history"
									},
									"response": []
								},
								{
									"name": "Get 200Ok  Returns Zip file history",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{zipFileId}}/history"
									},
									"response": []
								},
								{
									"name": "Get 200 Ok with History Of File using Valid File ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 OK\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{carrierfileId}}/history"
									},
									"response": []
								},
								{
									"name": "Get 401  returns Unauthorized on other account",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysuserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{YDUXHFileID}}/history"
									},
									"response": []
								},
								{
									"name": "return 404 using Invalid File ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"\r",
													"    //var jsonData = JSON.parse(responseBody);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{wrongFileId}}/history"
									},
									"response": []
								},
								{
									"name": "return 400 using Empty File ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"\r",
													"    var jsonData = JSON.parse(responseBody);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": "{{reqUrl}}/api/files/ /history"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"carrierSysUser\");",
											"const Pass = pm.globals.get(\"carrierPassword\");",
											"const BasicToken = pm.environment.get(\"carrierTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"carrierSysUserToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('carrierSysUserToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "File Put Status ( Please run in sequence )",
							"item": [
								{
									"name": "Get 200ok for Status to Send",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"status\":\"S\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{reqUrl}}/api/files/{{changeFileStatus}}/status"
									},
									"response": []
								},
								{
									"name": "Put 200 return 200 for sucessfull file Sent for Receive",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const URL = pm.environment.get(\"tokenUrl\");\r",
													"const User = pm.globals.get(\"agencySysUser\");\r",
													"const Pass = pm.globals.get(\"agencyPassword\");\r",
													"const BasicToken = pm.environment.get(\"agencyTokenClient\");\r",
													"const Scope = pm.globals.get(\"allScope\")\r",
													"const postRequest = {\r",
													"  url: URL,\r",
													"  method: 'POST',\r",
													"  timeout: 10,\r",
													"  header: {\r",
													"    \"Content-Type\": \"application/x-www-raw-urlencoded\",\r",
													"    \"Authorization\": \"Basic \" + BasicToken\r",
													"  },\r",
													"  body: {\r",
													"    mode: 'urlencoded',\r",
													"    urlencoded: [\r",
													"        {key: \"grant_type\", value: \"password\"},\r",
													"        {key:\"username\", value: User},\r",
													"        {key:\"Password\", value: Pass},\r",
													"        {key:\"scope\", value: Scope}\r",
													"    ]}\r",
													"};\r",
													"pm.environment.unset(\"agencySysUserToken\");\r",
													"pm.sendRequest(postRequest, function (err, res) {\r",
													"    var responseJson = res.json();\r",
													"    console.log(responseJson);\r",
													"    pm.environment.set('agencySysUserToken', responseJson['access_token']);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencySysUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{changeFileStatus}}/received"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"carrierSysUser\");",
											"const Pass = pm.globals.get(\"carrierPassword\");",
											"const BasicToken = pm.environment.get(\"carrierTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"carrierSysUserToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('carrierSysUserToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Send Files",
							"item": [
								{
									"name": "return 202 Accepted when sending Policy file with Valid Param",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 202\", function () {\r",
													"    pm.response.to.have.status(202);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "multipart/form-data",
												"type": "text",
												"disabled": true
											},
											{
												"key": "X-IVANS-File-Metadata",
												"value": "{\"originalName\":\"QAPolicyTest\",\"remoteName\":\"QAPolicyTest\",\"sendAccount\":\"{{carrierAccount}}\",\"sendUserId\":\"{{carrierMailbox}}\",\"receiveAccount\":\"{{agencyAccount}}\",\"receiveUserId\":\"{{agencyMailbox}}\",\"ClassCode\":\"{{policy}}\"}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "text/plain",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "",
													"type": "file",
													"src": "Policies/QAPolicyTest"
												}
											]
										},
										"url": {
											"raw": "{{reqUrl}}/api/files?type=media",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "type",
													"value": "media"
												}
											]
										},
										"description": "Send a file using files api. This example sends a file from carrier HIG1 to agency Y1234 (mailbox associated on oh-dev-34)"
									},
									"response": []
								},
								{
									"name": "return 202 Accepted when sending Edoc file with Valid Param",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 202\", function () {\r",
													"    pm.response.to.have.status(202);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "multipart/form-data",
												"type": "text",
												"disabled": true
											},
											{
												"key": "X-IVANS-File-Metadata",
												"value": "{\"originalName\":\"eDoc_QA_TEST\",\"remoteName\":\"eDoc_QA_TEST\",\"sendAccount\":\"{{carrierAccount}}\",\"sendUserId\":\"{{carrierMailbox}}\",\"receiveAccount\":\"{{agencyAccount}}\",\"receiveUserId\":\"{{agencyMailbox}}\",\"ClassCode\":\"{{edoc}}\"}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "text/plain",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "",
													"type": "file",
													"src": "eDocs/edoctest.eDoc"
												}
											]
										},
										"url": {
											"raw": "{{reqUrl}}/api/files?type=media",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "type",
													"value": "media"
												}
											]
										},
										"description": "Send a file using files api. This example sends a file from carrier HIG1 to agency Y1234 (mailbox associated on oh-dev-34)"
									},
									"response": []
								},
								{
									"name": "return 202 Accepted when sending Claim file with Valid Param",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 202\", function () {\r",
													"    pm.response.to.have.status(202);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "multipart/form-data",
												"type": "text",
												"disabled": true
											},
											{
												"key": "X-IVANS-File-Metadata",
												"value": "{\"originalName\":\"ClaimQATEST\",\"remoteName\":\"ClaimQATEST\",\"sendAccount\":\"{{carrierAccount}}\",\"sendUserId\":\"{{carrierMailbox}}\",\"receiveAccount\":\"{{agencyAccount}}\",\"receiveUserId\":\"{{agencyMailbox}}\",\"ClassCode\":\"{{claim}}\"}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "text/plain",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "",
													"type": "file",
													"src": "ClaimQATEST.xml"
												}
											]
										},
										"url": {
											"raw": "{{reqUrl}}/api/files?type=media",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "type",
													"value": "media"
												}
											]
										},
										"description": "Send a file using files api. This example sends a file from carrier HIG1 to agency Y1234 (mailbox associated on oh-dev-34)"
									},
									"response": []
								},
								{
									"name": "return 202 Accepted when sending DBCD file with Valid Param",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 202\", function () {\r",
													"    pm.response.to.have.status(202);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "multipart/form-data",
												"type": "text",
												"disabled": true
											},
											{
												"key": "X-IVANS-File-Metadata",
												"value": "{\"originalName\":\"DBCFile.001\",\"remoteName\":\"DBCFile.001\",\"sendAccount\":\"{{carrierAccount}}\",\"sendUserId\":\"{{carrierMailbox}}\",\"receiveAccount\":\"{{agencyAccount}}\",\"receiveUserId\":\"{{agencyMailbox}}\",\"ClassCode\":\"{{dbcd}}\"}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "text/plain",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "",
													"type": "file",
													"src": "TestPolicy4/DBCFile.001.zip"
												}
											]
										},
										"url": {
											"raw": "{{reqUrl}}/api/files?type=media",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "type",
													"value": "media"
												}
											]
										},
										"description": "Send a file using files api. This example sends a file from carrier HIG1 to agency Y1234 (mailbox associated on oh-dev-34)"
									},
									"response": []
								},
								{
									"name": "Get 400 return Bad Request due to empty type.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "multipart/form-data",
												"type": "text",
												"disabled": true
											},
											{
												"key": "X-IVANS-File-Metadata",
												"value": "{\"originalName\":\"DBCFile.001\",\"remoteName\":\"DBCFile.001\",\"sendAccount\":\"{{carrierAccount}}\",\"sendUserId\":\"{{carrierMailbox}}\",\"receiveAccount\":\"{{agencyAccount}}\",\"receiveUserId\":\"{{agencyMailbox}}\",\"ClassCode\":\"{{dbcd}}\"}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "text/plain",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "",
													"type": "file",
													"src": "TestPolicy4/DBCFile.001.zip"
												}
											]
										},
										"url": {
											"raw": "{{reqUrl}}/api/files?type=",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "type",
													"value": ""
												}
											]
										},
										"description": "Send a file using files api. This example sends a file from carrier HIG1 to agency Y1234 (mailbox associated on oh-dev-34)"
									},
									"response": []
								},
								{
									"name": "Get 400 return Bad Request due to missing header data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "multipart/form-data",
												"type": "text",
												"disabled": true
											},
											{
												"key": "X-IVANS-File-Metadata",
												"value": "{\"originalName\":\"DBCFile.001\",\"remoteName\":\"DBCFile.001\",\"sendAccount\":\"{{carrierAccount}}\",\"sendUserId\":\"{{carrierMailbox}}\",\"receiveAccount\":\"{{agencyAccount}}\",\"receiveUserId\":\"{{agencyMailbox}}\",\"ClassCode\":\"{{dbcd}}\"}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "content-type",
												"value": "text/plain",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "",
													"type": "file",
													"src": "TestPolicy4/DBCFile.001.zip"
												}
											]
										},
										"url": {
											"raw": "{{reqUrl}}/api/files?type=media",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "type",
													"value": "media"
												}
											]
										},
										"description": "Send a file using files api. This example sends a file from carrier HIG1 to agency Y1234 (mailbox associated on oh-dev-34)"
									},
									"response": []
								},
								{
									"name": "Get 404 returns Not Found to missing params",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "multipart/form-data",
												"type": "text",
												"disabled": true
											},
											{
												"key": "X-IVANS-File-Metadata",
												"value": "{\"originalName\":\"DBCFile.001\",\"remoteName\":\"DBCFile.001\",\"sendAccount\":\"{{carrierAccount}}\",\"sendUserId\":\"{{carrierMailbox}}\",\"receiveAccount\":\"{{agencyAccount}}\",\"receiveUserId\":\"{{agencyMailbox}}\",\"ClassCode\":\"{{dbcd}}\"}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "content-type",
												"value": "text/plain",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "",
													"type": "file",
													"src": "TestPolicy4/DBCFile.001.zip"
												}
											]
										},
										"url": {
											"raw": "{{reqUrl}}/api/files",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "type",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Send a file using files api. This example sends a file from carrier HIG1 to agency Y1234 (mailbox associated on oh-dev-34)"
									},
									"response": []
								},
								{
									"name": "return 503 Service Unavailable when sending file with type Param not equal to media",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 503\", function () {\r",
													"    pm.response.to.have.status(503);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "multipart/form-data",
												"type": "text",
												"disabled": true
											},
											{
												"key": "X-IVANS-File-Metadata",
												"value": "{\"originalName\":\"testData\",\"remoteName\":\"testData\",\"sendAccount\":\"{{carrierAccount}}\",\"sendUserId\":\"{{carrierMailbox}}\",\"receiveAccount\":\"{{agencyAccount}}\",\"receiveUserId\":\"{{agencyMailbox}}\",\"ClassCode\":\"AIDOWN\"}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "text/plain",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "",
													"type": "file",
													"src": "/C:/Users/Cloud Analogy/Downloads/testfile.csv"
												}
											]
										},
										"url": {
											"raw": "{{reqUrl}}/api/files?type=med",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "type",
													"value": "med"
												}
											]
										},
										"description": "Send a file using files api. This example sends a file from carrier HIG1 to agency Y1234 (mailbox associated on oh-dev-34)"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"carrierSysUser\");",
											"const Pass = pm.globals.get(\"carrierPassword\");",
											"const BasicToken = pm.environment.get(\"carrierTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"carrierSysUserToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('carrierSysUserToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Files Metadata",
							"item": [
								{
									"name": "Get 400 return bad request  to empty class code",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files?account=null&userId=null&classcode=",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "null"
												},
												{
													"key": "userId",
													"value": "null"
												},
												{
													"key": "classcode",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get  400 returns Bad Request due to empty page int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files?account=null&userId=null&page=",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "null"
												},
												{
													"key": "userId",
													"value": "null"
												},
												{
													"key": "page",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get 400 returns Bad Request due to empty pagesize int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files?account=null&userId=null&pagesize=",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "null"
												},
												{
													"key": "userId",
													"value": "null"
												},
												{
													"key": "pagesize",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get 500 returns API Error dur to invalid status code",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 500\", function () {\r",
													"    pm.response.to.have.status(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files?account={{carrierAccount}}&userId={{carrierEmptyMailbox}}&statuscode=asdf!@#gh",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "{{carrierAccount}}"
												},
												{
													"key": "userId",
													"value": "{{carrierEmptyMailbox}}"
												},
												{
													"key": "statuscode",
													"value": "asdf!@"
												}
											],
											"hash": "gh"
										}
									},
									"response": []
								},
								{
									"name": "Get 204Ok returns No content due to no files",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files?account={{carrierAccount}}&userId={{carrierEmptymailbox}}",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "{{carrierAccount}}"
												},
												{
													"key": "userId",
													"value": "{{carrierEmptymailbox}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"carrierSysUser\");",
											"const Pass = pm.globals.get(\"carrierPassword\");",
											"const BasicToken = pm.environment.get(\"carrierTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"carrierSysUserToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('carrierSysUserToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Files V3 Metadata",
							"item": [
								{
									"name": "Two Params",
									"item": [
										{
											"name": "Get 200ok Two Status Codes",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierSysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierV3Mailbox}}&statusCode=T&statusCode=X",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierV3Mailbox}}"
														},
														{
															"key": "statusCode",
															"value": "T"
														},
														{
															"key": "statusCode",
															"value": "X"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get start and stop date-  return 400 for bad dates",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierSysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&startDate=2019-06-01&stopDate=2018-06-01",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "startDate",
															"value": "2019-06-01"
														},
														{
															"key": "stopDate",
															"value": "2018-06-01"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200OK Start and Stop date- file returns",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierSysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&startDate=11-1-2022&stopDate=11-11-2022",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "startDate",
															"value": "11-1-2022"
														},
														{
															"key": "stopDate",
															"value": "11-11-2022"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 204 Status code -Canceled or C & direction inbound",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierSysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&statusCode=C&direction=inbound",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "C"
														},
														{
															"key": "direction",
															"value": "inbound"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const URL = pm.environment.get(\"tokenUrl\");",
													"const User = pm.globals.get(\"carrierSysUser\");",
													"const Pass = pm.globals.get(\"carrierPassword\");",
													"const BasicToken = pm.environment.get(\"carrierTokenClient\");",
													"const Scope = pm.globals.get(\"allScope\")",
													"const postRequest = {",
													"  url: URL,",
													"  method: 'POST',",
													"  timeout: 10,",
													"  header: {",
													"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
													"    \"Authorization\": \"Basic \" + BasicToken",
													"  },",
													"  body: {",
													"    mode: 'urlencoded',",
													"    urlencoded: [",
													"        {key: \"grant_type\", value: \"password\"},",
													"        {key:\"username\", value: User},",
													"        {key:\"Password\", value: Pass},",
													"        {key:\"scope\", value: Scope}",
													"    ]}",
													"};",
													"pm.environment.unset(\"carrierSysUserToken\");",
													"pm.sendRequest(postRequest, function (err, res) {",
													"    var responseJson = res.json();",
													"    console.log(responseJson);",
													"    pm.environment.set('carrierSysUserToken', responseJson['access_token']);",
													"});"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "One Param",
									"item": [
										{
											"name": "Get 200 ok Status code- Canceled or C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierSysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?statusCode=C&account={{carrierAccount}}&userId={{carrierMailbox}}",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "statusCode",
															"value": "C"
														},
														{
															"key": null,
															"value": "1f70e807-22a0-4084-bf51-742b7e162226",
															"disabled": true
														},
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 204 ok for fake status code",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierSysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&statusCode=random%C2%A7%CE%A6",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "random%C2%A7%CE%A6"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Available or V",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierSysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&statusCode=V",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "V"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 filterAccount",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    \r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierSysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&filterAccount={{agencyAccount}}",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "filterAccount",
															"value": "{{agencyAccount}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200ok Stop date- file returned",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierSysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierV3Mailbox}}&stopDate=05-1-2023",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierV3Mailbox}}"
														},
														{
															"key": "stopDate",
															"value": "05-1-2023"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Start date 204 for date after files",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierSysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&startDate=11-14-2023",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "startDate",
															"value": "11-14-2023"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Start date 200- files returned",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierSysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&startDate=11-10-2022",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "startDate",
															"value": "11-10-2022"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 filterUserId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    \r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierSysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&filterUserId={{agencyMailbox}}",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "filterUserId",
															"value": "{{agencyMailbox}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get stop date 204 for date before files",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierSysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&stopDate=05-1-2001",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "stopDate",
															"value": "05-1-2001"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Acknowledged or A",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierSysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&statusCode=A",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "A"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Send or S",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierSysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierV3Mailbox}}&statusCode=S",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierV3Mailbox}}"
														},
														{
															"key": "statusCode",
															"value": "S"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Auto -acknowledged or T",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierSysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&statusCode=T",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "T"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200OK class code- file returned",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierSysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierV3Mailbox}}&classCode=AIDOWN",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierV3Mailbox}}"
														},
														{
															"key": "classCode",
															"value": "AIDOWN"
														},
														{
															"key": "pageSize",
															"value": "1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200ok direction -Inbond returns file",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    pm.test(\"response size is not eaqual to null\", function () {\r",
															"    pm.expect(pm.response.responseSize).not.eq(0);\r",
															"});\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierSysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&direction=inbound",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "direction",
															"value": "inbound"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200ok direction -Outbond",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    \r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierSysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierV3Mailbox}}&direction=outbound",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierV3Mailbox}}"
														},
														{
															"key": "direction",
															"value": "outbound"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Hold or H",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierSysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&statusCode=H",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "H"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Incomplete or I",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierSysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&statusCode=I",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "I"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 204 Class Code not found",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierSysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&classCode=CLMDWN\"",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "classCode",
															"value": "CLMDWN\""
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Received or R",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierSysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&statusCode=R",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "R"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Purged or X",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierSysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&statusCode=X",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "X"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const URL = pm.environment.get(\"tokenUrl\");",
													"const User = pm.globals.get(\"carrierSysUser\");",
													"const Pass = pm.globals.get(\"carrierPassword\");",
													"const BasicToken = pm.environment.get(\"carrierTokenClient\");",
													"const Scope = pm.globals.get(\"allScope\")",
													"const postRequest = {",
													"  url: URL,",
													"  method: 'POST',",
													"  timeout: 10,",
													"  header: {",
													"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
													"    \"Authorization\": \"Basic \" + BasicToken",
													"  },",
													"  body: {",
													"    mode: 'urlencoded',",
													"    urlencoded: [",
													"        {key: \"grant_type\", value: \"password\"},",
													"        {key:\"username\", value: User},",
													"        {key:\"Password\", value: Pass},",
													"        {key:\"scope\", value: Scope}",
													"    ]}",
													"};",
													"pm.environment.unset(\"carrierSysUserToken\");",
													"pm.sendRequest(postRequest, function (err, res) {",
													"    var responseJson = res.json();",
													"    console.log(responseJson);",
													"    pm.environment.set('carrierSysUserToken', responseJson['access_token']);",
													"});"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Get 400 returns Bad Request due to empty pagesize int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/v3/files?account=null&userId=null&pagesize=",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"v3",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "null"
												},
												{
													"key": "userId",
													"value": "null"
												},
												{
													"key": "pagesize",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get 401 returns Unauthorized for agency mailbox",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/v3/files?account=yduxh&userId=yx66xu6",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"v3",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "yduxh"
												},
												{
													"key": "userId",
													"value": "yx66xu6"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get  400 returns Bad Request due to empty page int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/v3/files?account=&userId=&page=",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"v3",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": ""
												},
												{
													"key": "userId",
													"value": ""
												},
												{
													"key": "page",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get 204Ok returns No content due to no files",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierEmptymailbox}}",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"v3",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "{{carrierAccount}}"
												},
												{
													"key": "userId",
													"value": "{{carrierEmptymailbox}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"carrierSysUser\");",
											"const Pass = pm.globals.get(\"carrierPassword\");",
											"const BasicToken = pm.environment.get(\"carrierTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"carrierSysUserToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('carrierSysUserToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Other",
							"item": [
								{
									"name": "GET Metadata by File ID(User With File Metadata Permissions)",
									"item": [
										{
											"name": "return 200 Ok with Metadata Of File using Valid File ID",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200 OK\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierAdminToken}}",
														"type": "text"
													}
												],
												"url": "{{reqUrl}}/api/files/{{carrierfileId}}/metadata"
											},
											"response": []
										},
										{
											"name": "return 404 using Invalid File ID",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"\r",
															"    //var jsonData = JSON.parse(responseBody);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierAdminToken}}",
														"type": "text"
													}
												],
												"url": "{{reqUrl}}/api/files/ec4681dc-f288-4691-a36d-91436e611ae7/metadata"
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const URL = pm.environment.get(\"tokenUrl\");",
													"const User = pm.globals.get(\"carrierSysUser\");",
													"const Pass = pm.globals.get(\"carrierPassword\");",
													"const BasicToken = pm.environment.get(\"carrierTokenClient\");",
													"const Scope = pm.globals.get(\"allScope\")",
													"const postRequest = {",
													"  url: URL,",
													"  method: 'POST',",
													"  timeout: 10,",
													"  header: {",
													"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
													"    \"Authorization\": \"Basic \" + BasicToken",
													"  },",
													"  body: {",
													"    mode: 'urlencoded',",
													"    urlencoded: [",
													"        {key: \"grant_type\", value: \"password\"},",
													"        {key:\"username\", value: User},",
													"        {key:\"Password\", value: Pass},",
													"        {key:\"scope\", value: Scope}",
													"    ]}",
													"};",
													"pm.environment.unset(\"carrierAdminToken\");",
													"pm.sendRequest(postRequest, function (err, res) {",
													"    var responseJson = res.json();",
													"    console.log(responseJson);",
													"    pm.environment.set('carrierAdminToken', responseJson['access_token']);",
													"});"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "GET Metadata by File ID(User Without File Metadata Permissions)",
									"item": [
										{
											"name": "return 401 using Valid File ID",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 401\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{hig0Carrier_token}}",
														"type": "text"
													}
												],
												"url": "{{reqUrl}}/api/files/{{carrierfileId}}/metadata"
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const URL = pm.environment.get(\"tokenUrl\");",
													"const User = pm.environment.get(\"hig0CarrierAdmin\");",
													"const Pass = pm.environment.get(\"hig0CarrierAdminPassword\");",
													"const clientToken = pm.environment.get(\"carrierTokenClient\");",
													"const Scope = pm.environment.get(\"allScope\")",
													"const postRequest = {",
													"  url: URL,",
													"  method: 'POST',",
													"  timeout: 10,",
													"  header: {",
													"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
													"    \"Authorization\": \"Basic \" + clientToken",
													"  },",
													"  body: {",
													"    mode: 'urlencoded',",
													"    urlencoded: [",
													"        {key: \"grant_type\", value: \"password\"},",
													"        {key:\"username\", value: User},",
													"        {key:\"Password\", value: \"Password@123\"},",
													"        {key:\"scope\", value: Scope}",
													"    ]}",
													"};",
													"pm.environment.unset(\"hig0Carrier_token\");",
													"pm.sendRequest(postRequest, function (err, res) {",
													"    var responseJson = res.json();",
													"    console.log(responseJson);",
													"    pm.environment.set('hig0Carrier_token', responseJson['access_token']);",
													"});"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "PUT File Status by File ID",
									"item": [
										{
											"name": "return 200 Ok with  Valid File ID",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															"// postman.sendRequest(\"return 200 Ok with  Valid File ID\");\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200 OK\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierSysUserToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"status\":\"V\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{reqUrl}}/api/files/cce1d1ab-954a-4919-b1a3-a5cfa30db863/status"
											},
											"response": []
										},
										{
											"name": "return 200 Ok with  set file status to \"R\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200 OK\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierSysUserToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"status\":\"R\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{reqUrl}}/api/files/cce1d1ab-954a-4919-b1a3-a5cfa30db863/status"
											},
											"response": []
										},
										{
											"name": "return 404 using Invalid File ID(File Id Not Available to System)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"\r",
															"    //var jsonData = JSON.parse(responseBody);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierSysUserToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"status\":\"s\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{reqUrl}}/api/files/ec4681dc-f288-4691-a36d-91436e611ae7/status"
											},
											"response": []
										},
										{
											"name": "return 404 using Empty File ID",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"\r",
															"    var jsonData = JSON.parse(responseBody);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierSysUserToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"status=\":\"R\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{reqUrl}}/api/files//status"
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const URL = pm.environment.get(\"tokenUrl\");",
													"const User = pm.environment.get(\"carrierSysUser\");",
													"const Pass = pm.environment.get(\"carrierPassword\");",
													"const BasicToken = pm.environment.get(\"carrierTokenClient\");",
													"const Scope = pm.globals.get(\"allScopes\")",
													"const postRequest = {",
													"  url: URL,",
													"  method: 'POST',",
													"  timeout: 10,",
													"  header: {",
													"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
													"    \"Authorization\": \"Basic \" + BasicToken",
													"  },",
													"  body: {",
													"    mode: 'urlencoded',",
													"    urlencoded: [",
													"        {key: \"grant_type\", value: \"password\"},",
													"        {key:\"username\", value: User},",
													"        {key:\"Password\", value: Pass},",
													"        {key:\"scope\", value: Scope}",
													"    ]}",
													"};",
													"pm.environment.unset(\"carrierSysUserToken\");",
													"pm.sendRequest(postRequest, function (err, res) {",
													"    var responseJson = res.json();",
													"    console.log(responseJson);",
													"    pm.environment.set('carrierSysUserToken', responseJson['access_token']);",
													"});"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "PUT File Status to Received by File ID",
									"item": [
										{
											"name": "return 200 Ok with  Valid File ID",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200 OK\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierAdminToken}}",
														"type": "text"
													}
												],
												"url": "{{reqUrl}}/api/files/fcccaacc-ae89-48b0-8fcf-73860bef60d1/Received"
											},
											"response": []
										},
										{
											"name": "return 204 with Valid File ID(Already in Received Status)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const URL = pm.environment.get(\"tokenUrl\");\r",
															"const User = pm.environment.get(\"yduy7AgencyAdmin\");\r",
															"const Pass = pm.environment.get(\"agencyPassword\");\r",
															"const BasicToken = pm.environment.get(\"agencyTokenClient\");\r",
															"const Scope = pm.globals.get(\"allScopes\")\r",
															"const postRequest = {\r",
															"  url: URL,\r",
															"  method: 'POST',\r",
															"  timeout: 10,\r",
															"  header: {\r",
															"    \"Content-Type\": \"application/x-www-raw-urlencoded\",\r",
															"    \"Authorization\": \"Basic \" + BasicToken\r",
															"  },\r",
															"  body: {\r",
															"    mode: 'urlencoded',\r",
															"    urlencoded: [\r",
															"        {key: \"grant_type\", value: \"password\"},\r",
															"        {key:\"username\", value: User},\r",
															"        {key:\"Password\", value: Pass},\r",
															"        {key:\"scope\", value: Scope}\r",
															"    ]}\r",
															"};\r",
															"pm.environment.unset(\"agencyAdminToken\");\r",
															"pm.sendRequest(postRequest, function (err, res) {\r",
															"    var responseJson = res.json();\r",
															"    console.log(responseJson);\r",
															"    pm.environment.set('agencyAdminToken', responseJson['access_token']);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyAdminToken}}"
													}
												],
												"url": "{{reqUrl}}/api/v3/files/89b3d6e1-2e99-45f3-bd33-ee442d0f0553/Received"
											},
											"response": []
										},
										{
											"name": "return 404 using Invalid File ID(File Id Not Available to System)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"\r",
															"    //var jsonData = JSON.parse(responseBody);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierAdminToken}}",
														"type": "text"
													}
												],
												"url": "{{reqUrl}}/api/files/83f9e793-405b-4a6e-88f2-30ecb5893e10/Received"
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const URL = pm.environment.get(\"tokenUrl\");",
													"const User = pm.environment.get(\"carrierSysUser\");",
													"const Pass = pm.environment.get(\"carrierPassword\");",
													"const BasicToken = pm.environment.get(\"carrierTokenClient\");",
													"const Scope = pm.globals.get(\"allScopes\")",
													"const postRequest = {",
													"  url: URL,",
													"  method: 'POST',",
													"  timeout: 10,",
													"  header: {",
													"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
													"    \"Authorization\": \"Basic \" + BasicToken",
													"  },",
													"  body: {",
													"    mode: 'urlencoded',",
													"    urlencoded: [",
													"        {key: \"grant_type\", value: \"password\"},",
													"        {key:\"username\", value: User},",
													"        {key:\"Password\", value: Pass},",
													"        {key:\"scope\", value: Scope}",
													"    ]}",
													"};",
													"pm.environment.unset(\"carrierAdminToken\");",
													"pm.sendRequest(postRequest, function (err, res) {",
													"    var responseJson = res.json();",
													"    console.log(responseJson);",
													"    pm.environment.set('carrierAdminToken', responseJson['access_token']);",
													"});"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "File Endpoints (Unautorized User)",
									"item": [
										{
											"name": "return 401 using Valid File ID",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 401\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{hig0Carrier_token}}",
														"type": "text"
													}
												],
												"url": "{{reqUrl}}/api/files/{{carrierfileId}}/history"
											},
											"response": []
										},
										{
											"name": "return 401 Unauthorized with Valid File ID",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 401\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{hig0Carrier_token}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/files/{{carrierfileId}}/Received",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"files",
														"{{carrierfileId}}",
														"Received"
													],
													"query": [
														{
															"key": null,
															"value": "",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const URL = pm.environment.get(\"tokenUrl\");",
													"const User = pm.environment.get(\"hig0CarrierAdmin\");",
													"const Pass = pm.environment.get(\"hig0CarrierAdminPassword\");",
													"const BasicToken = pm.environment.get(\"carrierTokenClient\");",
													"const Scope = pm.environment.get(\"allScope\")",
													"const postRequest = {",
													"  url: URL,",
													"  method: 'POST',",
													"  timeout: 10,",
													"  header: {",
													"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
													"    \"Authorization\": \"Basic \" + BasicToken",
													"  },",
													"  body: {",
													"    mode: 'urlencoded',",
													"    urlencoded: [",
													"        {key: \"grant_type\", value: \"password\"},",
													"        {key:\"username\", value: User},",
													"        {key:\"Password\", value: \"Password@123\"},",
													"        {key:\"scope\", value: Scope}",
													"    ]}",
													"};",
													"pm.environment.unset(\"hig0Carrier_token\");",
													"pm.sendRequest(postRequest, function (err, res) {",
													"    var responseJson = res.json();",
													"    console.log(responseJson);",
													"    pm.environment.set('hig0Carrier_token', responseJson['access_token']);",
													"});"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Carrier User",
					"item": [
						{
							"name": "File Contents",
							"item": [
								{
									"name": "Get 200OK for File Contents",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{fileIDwithitems}}/items"
									},
									"response": []
								},
								{
									"name": "Get 204OK for Empty Zip file",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{emptyZipfile}}/items"
									},
									"response": []
								},
								{
									"name": "Get 401 for fake ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{fakeFileID}}/items"
									},
									"response": []
								},
								{
									"name": "Get 401 for file on another account",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{unAuthorizedFile}}/items"
									},
									"response": []
								},
								{
									"name": "Get 200OK for File index one",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{fileIDwithitems}}/items/01"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"carrierUser\");",
											"const Pass = pm.globals.get(\"carrierPassword\");",
											"const BasicToken = pm.environment.get(\"carrierTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"carrierUserToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('carrierUserToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "File Get Matadata by Id",
							"item": [
								{
									"name": "Get 404 for fake ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{fakeFileID}}/metadata"
									},
									"response": []
								},
								{
									"name": "Get 200OK -return edoc metadata",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{edocFileid}}/metadata"
									},
									"response": []
								},
								{
									"name": "GET 401 returns unauyhorized for files on other account",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files/{{unAuthorizedFile}}/metadata",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files",
												"{{unAuthorizedFile}}",
												"metadata"
											],
											"query": [
												{
													"key": "leadRoute",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get 200Ok return Zip file Metadata",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{zipFileId}}/metadata"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"carrierUser\");",
											"const Pass = pm.globals.get(\"carrierPassword\");",
											"const BasicToken = pm.environment.get(\"carrierTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"carrierUserToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('carrierUserToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "GET History by File ID",
							"item": [
								{
									"name": "Get 200Ok edoc file History",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{edocFileid}}/history"
									},
									"response": []
								},
								{
									"name": "Get 200Ok  Returns Zip file history",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{zipFileId}}/history"
									},
									"response": []
								},
								{
									"name": "Get 200 Ok with History Of File using Valid File ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 OK\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{carrierfileId}}/history"
									},
									"response": []
								},
								{
									"name": "Get 401  returns Unauthorized on other account",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysuserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{unAuthorizedFile}}/history"
									},
									"response": []
								},
								{
									"name": "return 404 using Invalid File ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"\r",
													"    //var jsonData = JSON.parse(responseBody);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{wrongFileId}}/history"
									},
									"response": []
								},
								{
									"name": "return 400 using Empty File ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"\r",
													"    var jsonData = JSON.parse(responseBody);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": "{{reqUrl}}/api/files/ /history"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"carrierUser\");",
											"const Pass = pm.globals.get(\"carrierPassword\");",
											"const BasicToken = pm.environment.get(\"carrierTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"carrierUserToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('carrierUserToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "File Put Status ( Please run in sequence )",
							"item": [
								{
									"name": "Get 200ok for Status to Send",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierUserToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"status\":\"S\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{reqUrl}}/api/files/{{changeFileStatus}}/status"
									},
									"response": []
								},
								{
									"name": "Put 200 return 200 for sucessfull file Sent for Receive",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const URL = pm.environment.get(\"tokenUrl\");\r",
													"const User = pm.environment.get(\"agencySysUser\");\r",
													"const Pass = pm.environment.get(\"agencyPassword\");\r",
													"const BasicToken = pm.environment.get(\"agencyTokenClient\");\r",
													"const Scope = pm.environment.get(\"allScope\")\r",
													"const postRequest = {\r",
													"  url: URL,\r",
													"  method: 'POST',\r",
													"  timeout: 10,\r",
													"  header: {\r",
													"    \"Content-Type\": \"application/x-www-raw-urlencoded\",\r",
													"    \"Authorization\": \"Basic \" + BasicToken\r",
													"  },\r",
													"  body: {\r",
													"    mode: 'urlencoded',\r",
													"    urlencoded: [\r",
													"        {key: \"grant_type\", value: \"password\"},\r",
													"        {key:\"username\", value: User},\r",
													"        {key:\"Password\", value: Pass},\r",
													"        {key:\"scope\", value: Scope}\r",
													"    ]}\r",
													"};\r",
													"pm.environment.unset(\"agencySysUserToken\");\r",
													"pm.sendRequest(postRequest, function (err, res) {\r",
													"    var responseJson = res.json();\r",
													"    console.log(responseJson);\r",
													"    pm.environment.set('agencySysUserToken', responseJson['access_token']);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencySysUserToken}}"
											}
										],
										"url": "{{reqUrl}}/api/files/{{changeFileStatus}}/received"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"carrierUser\");",
											"const Pass = pm.globals.get(\"carrierPassword\");",
											"const BasicToken = pm.environment.get(\"carrierTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"carrierUserToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('carrierUserToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Files Metadata",
							"item": [
								{
									"name": "Get 401 return 401",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierUserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files?account={{carrierAccount}}&userId={{carrierMailbox}}",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "{{carrierAccount}}"
												},
												{
													"key": "userId",
													"value": "{{carrierMailbox}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"carrierUser\");",
											"const Pass = pm.globals.get(\"carrierPassword\");",
											"const BasicToken = pm.environment.get(\"carrierTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"carrierUserToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('carrierUserToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Files V3 Metadata",
							"item": [
								{
									"name": "One Param",
									"item": [
										{
											"name": "Get 200 ok Status code- Received or R",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&statusCode=R",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "R"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 204 Class Code not found",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&classCode=CLMDWN\"",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "classCode",
															"value": "CLMDWN\""
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Start date 204 for date after files",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&startDate=11-14-2023",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "startDate",
															"value": "11-14-2023"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Hold or H",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&statusCode=H",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "H"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200ok Stop date- file returned",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierSysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierV3Mailbox}}&stopDate=05-1-2023",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierV3Mailbox}}"
														},
														{
															"key": "stopDate",
															"value": "05-1-2023"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Purged or X",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierSysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&statusCode=X",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "X"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Send or S",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierSysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierV3Mailbox}}&statusCode=S",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierV3Mailbox}}"
														},
														{
															"key": "statusCode",
															"value": "S"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Acknowledged or A",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierSysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&statusCode=A",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "A"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Start date 200- files returned",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierSysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&startDate=11-10-2022",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "startDate",
															"value": "11-10-2022"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Incomplete or I",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierSysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&statusCode=I",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "I"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200OK class code- file returned",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierSysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierV3Mailbox}}&classCode=AIDOWN",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierV3Mailbox}}"
														},
														{
															"key": "classCode",
															"value": "AIDOWN"
														},
														{
															"key": "pageSize",
															"value": "1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 204 ok for fake status code",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierSysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&statusCode=random%C2%A7%CE%A6",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "random%C2%A7%CE%A6"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Auto -acknowledged or T",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierSysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&statusCode=T",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "T"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 204ok direction -Outbond",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"    \r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierSysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{onefile}}&direction=outbound",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{onefile}}"
														},
														{
															"key": "direction",
															"value": "outbound"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Canceled or C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierSysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?statusCode=C&account={{carrierAccount}}&userId={{carrierMailbox}}",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "statusCode",
															"value": "C"
														},
														{
															"key": null,
															"value": "1f70e807-22a0-4084-bf51-742b7e162226",
															"disabled": true
														},
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 filterAccount",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    \r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierSysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&filterAccount={{agencyAccount}}",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "filterAccount",
															"value": "{{agencyAccount}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200ok direction -Inbond returns file",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    pm.test(\"response size is not eaqual to null\", function () {\r",
															"    pm.expect(pm.response.responseSize).not.eq(0);\r",
															"});\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierSysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&direction=inbound",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "direction",
															"value": "inbound"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Available or V",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierSysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&statusCode=V",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "V"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 filterUserId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    \r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierSysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&filterUserId={{agencyMailbox}}",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "filterUserId",
															"value": "{{agencyMailbox}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get stop date 204 for date before files",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierSysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&stopDate=05-1-2001",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "stopDate",
															"value": "05-1-2001"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const URL = pm.environment.get(\"tokenUrl\");",
													"const User = pm.globals.get(\"carrierUser\");",
													"const Pass = pm.globals.get(\"carrierPassword\");",
													"const BasicToken = pm.environment.get(\"carrierTokenClient\");",
													"const Scope = pm.globals.get(\"allScope\")",
													"const postRequest = {",
													"  url: URL,",
													"  method: 'POST',",
													"  timeout: 10,",
													"  header: {",
													"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
													"    \"Authorization\": \"Basic \" + BasicToken",
													"  },",
													"  body: {",
													"    mode: 'urlencoded',",
													"    urlencoded: [",
													"        {key: \"grant_type\", value: \"password\"},",
													"        {key:\"username\", value: User},",
													"        {key:\"Password\", value: Pass},",
													"        {key:\"scope\", value: Scope}",
													"    ]}",
													"};",
													"pm.environment.unset(\"carrierUserToken\");",
													"pm.sendRequest(postRequest, function (err, res) {",
													"    var responseJson = res.json();",
													"    console.log(responseJson);",
													"    pm.environment.set('carrierUserToken', responseJson['access_token']);",
													"});"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Two Params",
									"item": [
										{
											"name": "Get start and stop date-  return 400 for bad dates",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierSysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&startDate=2019-06-01&stopDate=2018-06-01",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "startDate",
															"value": "2019-06-01"
														},
														{
															"key": "stopDate",
															"value": "2018-06-01"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200OK Start and Stop date- file returns",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierSysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&startDate=11-1-2022&stopDate=11-11-2022",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "startDate",
															"value": "11-1-2022"
														},
														{
															"key": "stopDate",
															"value": "11-11-2022"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 204 Status code -Canceled or C & direction inbound",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierSysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&statusCode=C&direction=inbound",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "C"
														},
														{
															"key": "direction",
															"value": "inbound"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200ok Two Status Codes",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carrierSysUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}&statusCode=T&statusCode=X",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "T"
														},
														{
															"key": "statusCode",
															"value": "X"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const URL = pm.environment.get(\"tokenUrl\");",
													"const User = pm.globals.get(\"carrierUser\");",
													"const Pass = pm.globals.get(\"carrierPassword\");",
													"const BasicToken = pm.environment.get(\"carrierTokenClient\");",
													"const Scope = pm.globals.get(\"allScope\")",
													"const postRequest = {",
													"  url: URL,",
													"  method: 'POST',",
													"  timeout: 10,",
													"  header: {",
													"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
													"    \"Authorization\": \"Basic \" + BasicToken",
													"  },",
													"  body: {",
													"    mode: 'urlencoded',",
													"    urlencoded: [",
													"        {key: \"grant_type\", value: \"password\"},",
													"        {key:\"username\", value: User},",
													"        {key:\"Password\", value: Pass},",
													"        {key:\"scope\", value: Scope}",
													"    ]}",
													"};",
													"pm.environment.unset(\"carrierUserToken\");",
													"pm.sendRequest(postRequest, function (err, res) {",
													"    var responseJson = res.json();",
													"    console.log(responseJson);",
													"    pm.environment.set('carrierUserToken', responseJson['access_token']);",
													"});"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Get 204Ok returns No content due to no files",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierUserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierEmptymailbox}}",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"v3",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "{{carrierAccount}}"
												},
												{
													"key": "userId",
													"value": "{{carrierEmptymailbox}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get  400 returns Bad Request due to empty page int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierUserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/v3/files?account=&userId=&page=",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"v3",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": ""
												},
												{
													"key": "userId",
													"value": ""
												},
												{
													"key": "page",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get 401 returns Unauthorized for agency mailbox",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierUserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/v3/files?account=yduxh&userId=yx66xu6",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"v3",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "yduxh"
												},
												{
													"key": "userId",
													"value": "yx66xu6"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get 400 returns Bad Request due to empty pagesize int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierUserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/v3/files?account=null&userId=null&pagesize=",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"v3",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "null"
												},
												{
													"key": "userId",
													"value": "null"
												},
												{
													"key": "pagesize",
													"value": ""
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"carrierUser\");",
											"const Pass = pm.globals.get(\"carrierPassword\");",
											"const BasicToken = pm.environment.get(\"carrierTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"carrierUserToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('carrierUserToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "Ivan Global Admin",
					"item": [
						{
							"name": "File Contents",
							"item": [
								{
									"name": "Get 200OK for File Content of Index one",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivanGlobalToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{fileIDwithitems}}/items/1"
									},
									"response": []
								},
								{
									"name": "Get 200OK for File Contents",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivanGlobalToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{fileIDwithitems}}/items"
									},
									"response": []
								},
								{
									"name": "Get 204 ok for empty Zip",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivanGlobalToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{emptyZipfile}}/items/01"
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"ivanGlobal\");",
											"const Pass = pm.globals.get(\"ivanPassword\");",
											"const BasicToken = pm.environment.get(\"ivanTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"      \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \"+ BasicToken,",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"ivanGlobalToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('ivanGlobalToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "GET Metadata by File ID",
							"item": [
								{
									"name": "return 404 using Invalid File ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"\r",
													"    //var jsonData = JSON.parse(responseBody);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivanGlobalToken}}"
											}
										],
										"url": "{{reqUrl}}/api/files/ec4681dc-f288-4691-a36d-91436e611ae7/metadata"
									},
									"response": []
								},
								{
									"name": "return 200 Ok return Zip metadata",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 OK\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivanGlobalToken}}"
											}
										],
										"url": "{{reqUrl}}/api/files/{{zipFileId}}/metadata"
									},
									"response": []
								},
								{
									"name": "return 200 Ok with Metadata Of File using Valid File ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 OK\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivanGlobalToken}}"
											}
										],
										"url": "{{reqUrl}}/api/files/{{carrierfileId}}/metadata"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"ivanGlobal\");",
											"const Pass = pm.globals.get(\"ivanPassword\");",
											"const BasicToken = pm.environment.get(\"ivanTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"      \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \"+ BasicToken,",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"ivanGlobalToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('ivanGlobalToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "File History",
							"item": [
								{
									"name": "Get 200OK returns edoc file history",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivanGlobalToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{edocFileid}}/history"
									},
									"response": []
								},
								{
									"name": "Get 404 for fake ID (worng Id)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivanGlobalToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{fakeFileId}}/history"
									},
									"response": []
								},
								{
									"name": "Get 200OK returns zip file history",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivanGlobalToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{zipFileId}}/history"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"ivanGlobal\");",
											"const Pass = pm.globals.get(\"ivanPassword\");",
											"const BasicToken = pm.environment.get(\"ivanTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"      \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \"+ BasicToken,",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"ivanGlobalToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('ivanGlobalToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "File Put Status ( Please run in sequence )",
							"item": [
								{
									"name": "Get 200ok for Status to Send",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivanGlobalToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"status\":\"s\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{reqUrl}}/api/files/{{changeFileStatus}}/status"
									},
									"response": []
								},
								{
									"name": "Put 200 return 200 for sucessfull file Sent for Receive",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivanGlobalToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{changeFileStatus}}/received"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"ivanGlobal\");",
											"const Pass = pm.globals.get(\"ivanPassword\");",
											"const BasicToken = pm.environment.get(\"ivanTokenClient\");",
											"const Scope = pm.globals.get(\"internalScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"      \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \"+ BasicToken,",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"ivanGlobalToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('ivanGlobalToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Send Files",
							"item": [
								{
									"name": "return 202 Accepted when sending Edoc file with Valid Param",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 202\", function () {\r",
													"    pm.response.to.have.status(202);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivanGlobalToken}}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "multipart/form-data",
												"type": "text",
												"disabled": true
											},
											{
												"key": "X-IVANS-File-Metadata",
												"value": "{\"originalName\":\"eDoc_QA_TEST\",\"remoteName\":\"eDoc_QA_TEST\",\"sendAccount\":\"{{carrierAccount}}\",\"sendUserId\":\"{{carrierMailbox}}\",\"receiveAccount\":\"{{agencyAccount}}\",\"receiveUserId\":\"{{agencyMailbox}}\",\"ClassCode\":\"{{edoc}}\"}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "text/plain",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "",
													"type": "file",
													"src": "eDoc_QA_TEST.xml"
												}
											]
										},
										"url": {
											"raw": "{{reqUrl}}/api/files?type=media",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "type",
													"value": "media"
												}
											]
										},
										"description": "Send a file using files api. This example sends a file from carrier HIG1 to agency Y1234 (mailbox associated on oh-dev-34)"
									},
									"response": []
								},
								{
									"name": "Get 400 return Bad Request due to missing header data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivanGlobalToken}}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "multipart/form-data",
												"type": "text",
												"disabled": true
											},
											{
												"key": "X-IVANS-File-Metadata",
												"value": "{\"originalName\":\"DBCFile.001\",\"remoteName\":\"DBCFile.001\",\"sendAccount\":\"{{carrierAccount}}\",\"sendUserId\":\"{{carrierMailbox}}\",\"receiveAccount\":\"{{agencyAccount}}\",\"receiveUserId\":\"{{agencyMailbox}}\",\"ClassCode\":\"{{dbcd}}\"}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "content-type",
												"value": "text/plain",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "",
													"type": "file",
													"src": "TestPolicy4/DBCFile.001.zip"
												}
											]
										},
										"url": {
											"raw": "{{reqUrl}}/api/files?type=media",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "type",
													"value": "media"
												}
											]
										},
										"description": "Send a file using files api. This example sends a file from carrier HIG1 to agency Y1234 (mailbox associated on oh-dev-34)"
									},
									"response": []
								},
								{
									"name": "return 202 Accepted when sending Claim file with Valid Param",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 202\", function () {\r",
													"    pm.response.to.have.status(202);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivanGlobalToken}}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "multipart/form-data",
												"type": "text",
												"disabled": true
											},
											{
												"key": "X-IVANS-File-Metadata",
												"value": "{\"originalName\":\"ClaimQATEST\",\"remoteName\":\"ClaimQATEST\",\"sendAccount\":\"{{carrierAccount}}\",\"sendUserId\":\"{{carrierMailbox}}\",\"receiveAccount\":\"{{agencyAccount}}\",\"receiveUserId\":\"{{agencyMailbox}}\",\"ClassCode\":\"{{claim}}\"}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "text/plain",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "",
													"type": "file",
													"src": "ClaimQATEST.xml"
												}
											]
										},
										"url": {
											"raw": "{{reqUrl}}/api/files?type=media",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "type",
													"value": "media"
												}
											]
										},
										"description": "Send a file using files api. This example sends a file from carrier HIG1 to agency Y1234 (mailbox associated on oh-dev-34)"
									},
									"response": []
								},
								{
									"name": "return 202 Accepted when sending Policy file with Valid Param",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 202\", function () {\r",
													"    pm.response.to.have.status(202);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivanGlobalToken}}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "multipart/form-data",
												"type": "text",
												"disabled": true
											},
											{
												"key": "X-IVANS-File-Metadata",
												"value": "{\"originalName\":\"QAPolicyTest\",\"remoteName\":\"QAPolicyTest\",\"sendAccount\":\"{{carrierAccount}}\",\"sendUserId\":\"{{carrierMailbox}}\",\"receiveAccount\":\"{{agencyAccount}}\",\"receiveUserId\":\"{{agencyMailbox}}\",\"ClassCode\":\"{{policy}}\"}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "text/plain",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "",
													"type": "file",
													"src": "QAPolicyTest"
												}
											]
										},
										"url": {
											"raw": "{{reqUrl}}/api/files?type=media",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "type",
													"value": "media"
												}
											]
										},
										"description": "Send a file using files api. This example sends a file from carrier HIG1 to agency Y1234 (mailbox associated on oh-dev-34)"
									},
									"response": []
								},
								{
									"name": "return 503 Service Unavailable when sending file with type Param not equal to media",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 503\", function () {\r",
													"    pm.response.to.have.status(503);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivanGlobalToken}}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "multipart/form-data",
												"type": "text",
												"disabled": true
											},
											{
												"key": "X-IVANS-File-Metadata",
												"value": "{\"originalName\":\"testData\",\"remoteName\":\"testData\",\"sendAccount\":\"{{carrierAccount}}\",\"sendUserId\":\"{{carrierMailbox}}\",\"receiveAccount\":\"{{agencyAccount}}\",\"receiveUserId\":\"{{agencyMailbox}}\",\"ClassCode\":\"AIDOWN\"}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "text/plain",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "",
													"type": "file",
													"src": "/C:/Users/Cloud Analogy/Downloads/testfile.csv"
												}
											]
										},
										"url": {
											"raw": "{{reqUrl}}/api/files?type=med",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "type",
													"value": "med"
												}
											]
										},
										"description": "Send a file using files api. This example sends a file from carrier HIG1 to agency Y1234 (mailbox associated on oh-dev-34)"
									},
									"response": []
								},
								{
									"name": "return 202 Accepted when sending DBCD file with Valid Param",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 202\", function () {\r",
													"    pm.response.to.have.status(202);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivanGlobalToken}}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "multipart/form-data",
												"type": "text",
												"disabled": true
											},
											{
												"key": "X-IVANS-File-Metadata",
												"value": "{\"originalName\":\"DBCFile.001\",\"remoteName\":\"DBCFile.001\",\"sendAccount\":\"{{carrierAccount}}\",\"sendUserId\":\"{{carrierMailbox}}\",\"receiveAccount\":\"{{agencyAccount}}\",\"receiveUserId\":\"{{agencyMailbox}}\",\"ClassCode\":\"{{dbcd}}\"}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "text/plain",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "",
													"type": "file",
													"src": "TestPolicy4/DBCFile.001.zip"
												}
											]
										},
										"url": {
											"raw": "{{reqUrl}}/api/files?type=media",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "type",
													"value": "media"
												}
											]
										},
										"description": "Send a file using files api. This example sends a file from carrier HIG1 to agency Y1234 (mailbox associated on oh-dev-34)"
									},
									"response": []
								},
								{
									"name": "Get 400 return Bad Request due to empty type.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivanGlobalToken}}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "multipart/form-data",
												"type": "text",
												"disabled": true
											},
											{
												"key": "X-IVANS-File-Metadata",
												"value": "{\"originalName\":\"DBCFile.001\",\"remoteName\":\"DBCFile.001\",\"sendAccount\":\"{{carrierAccount}}\",\"sendUserId\":\"{{carrierMailbox}}\",\"receiveAccount\":\"{{agencyAccount}}\",\"receiveUserId\":\"{{agencyMailbox}}\",\"ClassCode\":\"{{dbcd}}\"}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "text/plain",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "",
													"type": "file",
													"src": "TestPolicy4/DBCFile.001.zip"
												}
											]
										},
										"url": {
											"raw": "{{reqUrl}}/api/files?type=",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "type",
													"value": ""
												}
											]
										},
										"description": "Send a file using files api. This example sends a file from carrier HIG1 to agency Y1234 (mailbox associated on oh-dev-34)"
									},
									"response": []
								},
								{
									"name": "Get 404 returns Not Found to missing params",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivanGlobalToken}}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "multipart/form-data",
												"type": "text",
												"disabled": true
											},
											{
												"key": "X-IVANS-File-Metadata",
												"value": "{\"originalName\":\"DBCFile.001\",\"remoteName\":\"DBCFile.001\",\"sendAccount\":\"{{carrierAccount}}\",\"sendUserId\":\"{{carrierMailbox}}\",\"receiveAccount\":\"{{agencyAccount}}\",\"receiveUserId\":\"{{agencyMailbox}}\",\"ClassCode\":\"{{dbcd}}\"}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "content-type",
												"value": "text/plain",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "",
													"type": "file",
													"src": "TestPolicy4/DBCFile.001.zip"
												}
											]
										},
										"url": {
											"raw": "{{reqUrl}}/api/files",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "type",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Send a file using files api. This example sends a file from carrier HIG1 to agency Y1234 (mailbox associated on oh-dev-34)"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"ivanGlobal\");",
											"const Pass = pm.globals.get(\"ivanPassword\");",
											"const BasicToken = pm.environment.get(\"ivanTokenClient\");",
											"const Scope = pm.globals.get(\"internalScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"      \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \"+ BasicToken,",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"ivanGlobalToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('ivanGlobalToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Files Get by ID",
							"item": [
								{
									"name": "GET 400 returns Bad Request due to invalid type for decompressFile boolean",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivanGlobalToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files/{{zipFileId}}?decompressFile=1",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files",
												"{{zipFileId}}"
											],
											"query": [
												{
													"key": "decompressFile",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET 404 return Not Found to non-existent id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivanGlobalToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files/{{wrongFileId}}",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files",
												"{{wrongFileId}}"
											],
											"query": [
												{
													"key": "decompressFile",
													"value": "1",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET 200 OKreturns.edoc file",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivanGlobalToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files/{{edocFileid}}?decompressFile=false",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files",
												"{{edocFileid}}"
											],
											"query": [
												{
													"key": "decompressFile",
													"value": "false"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET 200 OKreturns.Zip file",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivanGlobalToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files/{{zipFileId}}?decompressFile=true",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files",
												"{{zipFileId}}"
											],
											"query": [
												{
													"key": "decompressFile",
													"value": "true"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"ivanGlobal\");",
											"const Pass = pm.globals.get(\"ivanPassword\");",
											"const BasicToken = pm.environment.get(\"ivanTokenClient\");",
											"const Scope = pm.globals.get(\"internalScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"      \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \"+ BasicToken,",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"ivanGlobalToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('ivanGlobalToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Files Metadata",
							"item": [
								{
									"name": "Get 204Ok returns No content due to no files",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivanGlobalToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files?account={{agencyAccount}}&userId={{agencyEmptyMailbox}}",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "{{agencyAccount}}"
												},
												{
													"key": "userId",
													"value": "{{agencyEmptyMailbox}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get 500 returns API Error dur to invalid status code",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 500\", function () {\r",
													"    pm.response.to.have.status(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivanGlobalToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files?account={{carrierAccount}}&userId={{carrierEmptymailbox}}&statuscode=asdf!@#gh",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "{{carrierAccount}}"
												},
												{
													"key": "userId",
													"value": "{{carrierEmptymailbox}}"
												},
												{
													"key": "statuscode",
													"value": "asdf!@"
												}
											],
											"hash": "gh"
										}
									},
									"response": []
								},
								{
									"name": "Get 400 return bad request  to empty class code",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivanGlobalToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files?account=null&userId=null&classcode=",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "null"
												},
												{
													"key": "userId",
													"value": "null"
												},
												{
													"key": "classcode",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get  400 returns Bad Request due to empty page int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivanGlobalToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files?account=null&userId=null&page=",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "null"
												},
												{
													"key": "userId",
													"value": "null"
												},
												{
													"key": "page",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get 400 returns Bad Request due to empty pagesize int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivanGlobalToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files?account=null&userId=null&pagesize=",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "null"
												},
												{
													"key": "userId",
													"value": "null"
												},
												{
													"key": "pagesize",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET 204 return No content due to no files",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivanGlobalToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files?account={{yduxhAccount}} &userId=leaveempty",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "{{yduxhAccount}} "
												},
												{
													"key": "userId",
													"value": "leaveempty"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"ivanGlobal\");",
											"const Pass = pm.globals.get(\"ivanPassword\");",
											"const BasicToken = pm.environment.get(\"ivanTokenClient\");",
											"const Scope = pm.globals.get(\"internalScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"      \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \"+ BasicToken,",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"ivanGlobalToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('ivanGlobalToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Files V2 Metadata",
							"item": [
								{
									"name": "Get 200ok V2 gets one record",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.test(\"Record-Count\", function () {\r",
													"    pm.response.to.have.header(\"Record-Count\");\r",
													"});\r",
													"\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivanGlobalToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/v2/files?account={{agencyAccount}}&userId={{agencyMailbox}}",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"v2",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "{{agencyAccount}}"
												},
												{
													"key": "userId",
													"value": "{{agencyMailbox}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get 200ok V2 has Next and Last Headers",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.test(\"Next is present\", function () {\r",
													"    pm.response.to.have.header(\"Next\");\r",
													"});\r",
													"pm.test(\"Last is present\", function () {\r",
													"    pm.response.to.have.header(\"Last\");\r",
													"});\r",
													"pm.test(\"Record-Count is present\", function () {\r",
													"    pm.response.to.have.header(\"Record-Count\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivanGlobalToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/v2/files?account={{agencyAccount}}&userId={{agencyMailbox}}",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"v2",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "{{agencyAccount}}"
												},
												{
													"key": "userId",
													"value": "{{agencyMailbox}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get 200ok V2 has prev and First headers",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"   \r",
													"});\r",
													"pm.test(\"Last is present\", function () {\r",
													"    pm.response.to.have.header(\"Prev\");\r",
													"});\r",
													"pm.test(\"Record-Count is present\", function () {\r",
													"    pm.response.to.have.header(\"Record-Count\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"pm.test(\"First is present\", function () {\r",
													"    pm.response.to.have.header(\"First\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivanGlobalToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/v2/files?account={{agencyAccount}}&userId={{agencyMailbox}}&page=2",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"v2",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "{{agencyAccount}}"
												},
												{
													"key": "userId",
													"value": "{{agencyMailbox}}"
												},
												{
													"key": "page",
													"value": "2"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"ivanGlobal\");",
											"const Pass = pm.globals.get(\"ivanPassword\");",
											"const BasicToken = pm.environment.get(\"ivanTokenClient\");",
											"const Scope = pm.globals.get(\"internalScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"      \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \"+ BasicToken,",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"ivanGlobalToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('ivanGlobalToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Files V3 Metadata",
							"item": [
								{
									"name": "One Param",
									"item": [
										{
											"name": "Get 204 Class Code not found",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ivanGlobalToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&classCode=CLMDWN\"",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "classCode",
															"value": "CLMDWN\""
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200OK class code- file returned",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ivanGlobalToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&classCode=AIDOWN",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "classCode",
															"value": "AIDOWN"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200ok direction -Inbond returns file",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    pm.test(\"response size is not eaqual to null\", function () {\r",
															"    pm.expect(pm.response.responseSize).not.eq(0);\r",
															"});\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ivanGlobalToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&direction=inbound",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "direction",
															"value": "inbound"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 204ok direction -Outbond",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"    \r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ivanGlobalToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{onefile}}&direction=outbound",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{onefile}}"
														},
														{
															"key": "direction",
															"value": "outbound"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 filterAccount",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    \r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ivanGlobalToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&filterAccount={{carrierAccount}}",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "filterAccount",
															"value": "{{carrierAccount}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 filterUserId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    \r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ivanGlobalToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&filterUserId={{carrierMailbox}}",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "filterUserId",
															"value": "{{carrierMailbox}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 204 ok for fake status code",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ivanGlobalToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&statusCode=random%C2%A7%CE%A6",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "random%C2%A7%CE%A6"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Start date 204 for date after files",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ivanGlobalToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&startDate=11-14-2023",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "startDate",
															"value": "11-14-2023"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get stop date 204 for date before files",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ivanGlobalToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&stopDate=05-1-2001",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "stopDate",
															"value": "05-1-2001"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200ok Stop date- file returned",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ivanGlobalToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&stopDate=05-1-2022",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "stopDate",
															"value": "05-1-2022"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Start date 200- files returned",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ivanGlobalToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&startDate=11-10-2022",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "startDate",
															"value": "11-10-2022"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Acknowledged or A",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ivanGlobalToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&statusCode=A",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "A"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Auto -acknowledged or T",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ivanGlobalToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&statusCode=T",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "T"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Available or V",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ivanGlobalToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{yduxhAccount}}&userId={{yduxhMailbox}}&statusCode=V",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{yduxhAccount}}"
														},
														{
															"key": "userId",
															"value": "{{yduxhMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "V"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Canceled or C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ivanGlobalToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?statusCode=C&account={{yduxhAccount}}&userId={{yduxhMailbox}}",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "statusCode",
															"value": "C"
														},
														{
															"key": null,
															"value": "1f70e807-22a0-4084-bf51-742b7e162226",
															"disabled": true
														},
														{
															"key": "account",
															"value": "{{yduxhAccount}}"
														},
														{
															"key": "userId",
															"value": "{{yduxhMailbox}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Hold or H",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ivanGlobalToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&statusCode=H",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "H"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Incomplete or I",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ivanGlobalToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{yduxhAccount}}&userId={{yduxhMailbox}}&statusCode=I",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{yduxhAccount}}"
														},
														{
															"key": "userId",
															"value": "{{yduxhMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "I"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Purged or X",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ivanGlobalToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{yduxhAccount}}&userId={{yduxhMailbox}}&statusCode=X",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{yduxhAccount}}"
														},
														{
															"key": "userId",
															"value": "{{yduxhMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "X"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Received or R",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ivanGlobalToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{yduxhAccount}}&userId={{yduxhMailbox}}&statusCode=R",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{yduxhAccount}}"
														},
														{
															"key": "userId",
															"value": "{{yduxhMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "R"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Send or S",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ivanGlobalToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierV3Mailbox}}&statusCode=S",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{carrierAccount}}"
														},
														{
															"key": "userId",
															"value": "{{carrierV3Mailbox}}"
														},
														{
															"key": "statusCode",
															"value": "S"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const URL = pm.environment.get(\"tokenUrl\");",
													"const User = pm.globals.get(\"ivanGlobal\");",
													"const Pass = pm.globals.get(\"ivanPassword\");",
													"const BasicToken = pm.environment.get(\"ivanTokenClient\");",
													"const Scope = pm.globals.get(\"internalScope\")",
													"const postRequest = {",
													"  url: URL,",
													"  method: 'POST',",
													"  timeout: 10,",
													"  header: {",
													"      \"Content-Type\": \"application/x-www-raw-urlencoded\",",
													"    \"Authorization\": \"Basic \"+ BasicToken,",
													"  },",
													"  body: {",
													"    mode: 'urlencoded',",
													"    urlencoded: [",
													"        {key: \"grant_type\", value: \"password\"},",
													"        {key:\"username\", value: User},",
													"        {key:\"Password\", value: Pass},",
													"        {key:\"scope\", value: Scope}",
													"    ]}",
													"};",
													"pm.environment.unset(\"ivanGlobalToken\");",
													"pm.sendRequest(postRequest, function (err, res) {",
													"    var responseJson = res.json();",
													"    console.log(responseJson);",
													"    pm.environment.set('ivanGlobalToken', responseJson['access_token']);",
													"});"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Two Params",
									"item": [
										{
											"name": "Get 204 Status code -Canceled or C & direction inbound",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ivanGlobalToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&statusCode=C&direction=inbound",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "C"
														},
														{
															"key": "direction",
															"value": "inbound"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get start and stop date-  return 400 for bad dates",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ivanGlobalToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&startDate=2019-06-01&stopDate=2018-06-01",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "startDate",
															"value": "2019-06-01"
														},
														{
															"key": "stopDate",
															"value": "2018-06-01"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200ok Two Status Codes",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ivanGlobalToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&statusCode=T&statusCode=X",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "T"
														},
														{
															"key": "statusCode",
															"value": "X"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200OK Start and Stop date- file returns",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ivanGlobalToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&startDate=11-1-2022&stopDate=11-11-2022",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "startDate",
															"value": "11-1-2022"
														},
														{
															"key": "stopDate",
															"value": "11-11-2022"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const URL = pm.environment.get(\"tokenUrl\");",
													"const User = pm.globals.get(\"ivanGlobal\");",
													"const Pass = pm.globals.get(\"ivanPassword\");",
													"const BasicToken = pm.environment.get(\"ivanTokenClient\");",
													"const Scope = pm.globals.get(\"internalScope\")",
													"const postRequest = {",
													"  url: URL,",
													"  method: 'POST',",
													"  timeout: 10,",
													"  header: {",
													"      \"Content-Type\": \"application/x-www-raw-urlencoded\",",
													"    \"Authorization\": \"Basic \"+ BasicToken,",
													"  },",
													"  body: {",
													"    mode: 'urlencoded',",
													"    urlencoded: [",
													"        {key: \"grant_type\", value: \"password\"},",
													"        {key:\"username\", value: User},",
													"        {key:\"Password\", value: Pass},",
													"        {key:\"scope\", value: Scope}",
													"    ]}",
													"};",
													"pm.environment.unset(\"ivanGlobalToken\");",
													"pm.sendRequest(postRequest, function (err, res) {",
													"    var responseJson = res.json();",
													"    console.log(responseJson);",
													"    pm.environment.set('ivanGlobalToken', responseJson['access_token']);",
													"});"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Get 400 returns Bad Request due to empty pagesize int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivanGlobalToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/v3/files?account=null&userId=null&pagesize=",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"v3",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "null"
												},
												{
													"key": "userId",
													"value": "null"
												},
												{
													"key": "pagesize",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get 204Ok returns No content due to no files",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivanGlobalToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyEmptyMailbox}}",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"v3",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "{{agencyAccount}}"
												},
												{
													"key": "userId",
													"value": "{{agencyEmptyMailbox}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get  400 returns Bad Request due to empty page int",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivanGlobalToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/v3/files?account=&userId=&page=",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"v3",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": ""
												},
												{
													"key": "userId",
													"value": ""
												},
												{
													"key": "page",
													"value": ""
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"ivanGlobal\");",
											"const Pass = pm.globals.get(\"ivanPassword\");",
											"const BasicToken = pm.environment.get(\"ivanTokenClient\");",
											"const Scope = pm.globals.get(\"internalScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"      \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \"+ BasicToken,",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"ivanGlobalToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('ivanGlobalToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Ohter",
							"item": [
								{
									"name": "File Metadata csio_polling Scope",
									"item": [
										{
											"name": "return 204 No Content with Non-existent account and UserId(csio_polling Scope)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ivanGlobalToken}}"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/files?account=fthjyt&userId=ftyjy",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "fthjyt"
														},
														{
															"key": "userId",
															"value": "ftyjy"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "return 200 Ok with any account and any UserId(csio_polling Scope)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ivanGlobalToken}}"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/files?account={{agencyAccount}}&userId={{agencyMailbox}}",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "pagesize",
															"value": "1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const URL = pm.environment.get(\"tokenUrl\");",
													"const User = pm.globals.get(\"ivanGlobal\");",
													"const Pass = pm.globals.get(\"ivanPassword\");",
													"const BasicToken = pm.environment.get(\"ivanTokenClient\");",
													"const Scope = pm.environment.get(\"internalScope\")",
													"const postRequest = {",
													"  url: URL,",
													"  method: 'POST',",
													"  timeout: 10,",
													"  header: {",
													"      \"Content-Type\": \"application/x-www-raw-urlencoded\",",
													"    \"Authorization\": \"Basic \"+ BasicToken,",
													"  },",
													"  body: {",
													"    mode: 'urlencoded',",
													"    urlencoded: [",
													"        {key: \"grant_type\", value: \"password\"},",
													"        {key:\"username\", value: User},",
													"        {key:\"Password\", value: Pass},",
													"        {key:\"scope\", value: Scope}",
													"    ]}",
													"};",
													"pm.environment.unset(\"ivanGlobalToken\");",
													"pm.sendRequest(postRequest, function (err, res) {",
													"    var responseJson = res.json();",
													"    console.log(responseJson);",
													"    pm.environment.set('ivanGlobalToken', responseJson['access_token']);",
													"});"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Vendor User",
					"item": [
						{
							"name": "File Contents",
							"item": [
								{
									"name": "Get 200OK for File Contents",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{vendorUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{fileIDwithitems}}/items"
									},
									"response": []
								},
								{
									"name": "Get 200OK for File index one",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{vendorUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{fileIDwithitems}}/items/01"
									},
									"response": []
								},
								{
									"name": "Get 204OK for Empty Zip file",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{vendorUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{emptyZipfile}}/items"
									},
									"response": []
								},
								{
									"name": "Get 401 for file on another account",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{vendorUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/B6979C77-E069-497D-82F2-007B3AE5542F/items"
									},
									"response": []
								},
								{
									"name": "Get 404 for fake ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{vendorUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{fakeFileID}}/items"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"vendorUser\");",
											"const Pass = pm.globals.get(\"vendorPassword\");",
											"const BasicToken = pm.environment.get(\"vendorTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"vendorUserToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('vendorUserToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "File Get Metadata by Id Copy",
							"item": [
								{
									"name": "Get 200OK  return edoc metadata",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{vendorUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{edocFileid}}/metadata"
									},
									"response": []
								},
								{
									"name": "Get 200OK  return Zip metadata",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{vendorUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{zipFileId}}/metadata"
									},
									"response": []
								},
								{
									"name": "Get 404 Not found fake Id (In correct ID)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{vendorUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{fakeFileId}}/metadata"
									},
									"response": []
								},
								{
									"name": "Get 401 Unauthorized for file on other account",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const URL = pm.environment.get(\"tokenUrl\");\r",
													"const User = pm.environment.get(\"agencyAdmin\");\r",
													"const Pass = pm.environment.get(\"agencyPassword\");\r",
													"const BasicToken = pm.environment.get(\"agencyTokenClient\");\r",
													"const Scope = pm.environment.get(\"allScope\")\r",
													"const postRequest = {\r",
													"  url: URL,\r",
													"  method: 'POST',\r",
													"  timeout: 10,\r",
													"  header: {\r",
													"    \"Content-Type\": \"application/x-www-raw-urlencoded\",\r",
													"    \"Authorization\": \"Basic \" + BasicToken\r",
													"  },\r",
													"  body: {\r",
													"    mode: 'urlencoded',\r",
													"    urlencoded: [\r",
													"        {key: \"grant_type\", value: \"password\"},\r",
													"        {key:\"username\", value: User},\r",
													"        {key:\"Password\", value: Pass},\r",
													"        {key:\"scope\", value: Scope}\r",
													"    ]}\r",
													"};\r",
													"pm.environment.unset(\"agencyAdminToken\");\r",
													"pm.sendRequest(postRequest, function (err, res) {\r",
													"    var responseJson = res.json();\r",
													"    console.log(responseJson);\r",
													"    pm.environment.set('agencyAdminToken', responseJson['access_token']);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{vendorUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{unautorizedFileID}}/metadata"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"vendorUser\");",
											"const Pass = pm.globals.get(\"vendorPassword\");",
											"const BasicToken = pm.environment.get(\"vendorTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"vendorUserToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('vendorUserToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "File History",
							"item": [
								{
									"name": "Get 404 returns for fake id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{vendorUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{fakeFileId}}/history"
									},
									"response": []
								},
								{
									"name": "Get 401 returns Unauthorized",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{vendorUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{unAuthorizedFile}}/history"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"vendorUser\");",
											"const Pass = pm.globals.get(\"vendorPassword\");",
											"const BasicToken = pm.environment.get(\"vendorTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"vendorUserToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('vendorUserToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "File Put Status ( Please run in sequence )",
							"item": [
								{
									"name": "Get 200ok for Status to Send",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{vendorUserToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"status\":\"s\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{reqUrl}}/api/files/4dcf3cd9-601a-4063-ac44-7eec7eb87e28/status"
									},
									"response": []
								},
								{
									"name": "Put 200 return 200 for sucessfull file Sent for Receive",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const URL = pm.environment.get(\"tokenUrl\");\r",
													"const User = pm.environment.get(\"agencySysUser\");\r",
													"const Pass = pm.environment.get(\"agencyPassword\");\r",
													"const BasicToken = pm.environment.get(\"agencyTokenClient\");\r",
													"const Scope = pm.environment.get(\"allScope\")\r",
													"const postRequest = {\r",
													"  url: URL,\r",
													"  method: 'POST',\r",
													"  timeout: 10,\r",
													"  header: {\r",
													"    \"Content-Type\": \"application/x-www-raw-urlencoded\",\r",
													"    \"Authorization\": \"Basic \" + BasicToken\r",
													"  },\r",
													"  body: {\r",
													"    mode: 'urlencoded',\r",
													"    urlencoded: [\r",
													"        {key: \"grant_type\", value: \"password\"},\r",
													"        {key:\"username\", value: User},\r",
													"        {key:\"Password\", value: Pass},\r",
													"        {key:\"scope\", value: Scope}\r",
													"    ]}\r",
													"};\r",
													"pm.environment.unset(\"agencySysUserToken\");\r",
													"pm.sendRequest(postRequest, function (err, res) {\r",
													"    var responseJson = res.json();\r",
													"    console.log(responseJson);\r",
													"    pm.environment.set('agencySysUserToken', responseJson['access_token']);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencySysUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/4dcf3cd9-601a-4063-ac44-7eec7eb87e28/received"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"vendorUser\");",
											"const Pass = pm.globals.get(\"vendorPassword\");",
											"const BasicToken = pm.environment.get(\"vendorTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"vendorUserToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('vendorUserToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Send Files",
							"item": [
								{
									"name": "Post 401 returns Unauthorized to user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{vendorUserToken}}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "multipart/form-data",
												"type": "text",
												"disabled": true
											},
											{
												"key": "X-IVANS-File-Metadata",
												"value": "{\"originalName\":\"QAPolicyTest\",\"remoteName\":\"QAPolicyTest\",\"sendAccount\":\"{{carrierAccount}}\",\"sendUserId\":\"{{carrierMailbox}}\",\"receiveAccount\":\"{{agencyAccount}}\",\"receiveUserId\":\"{{agencyMailbox}}\",\"ClassCode\":\"{{policy}}\"}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "text/plain",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "",
													"type": "file",
													"src": "QAPolicyTest"
												}
											]
										},
										"url": {
											"raw": "{{reqUrl}}/api/files?type=media",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "type",
													"value": "media"
												}
											]
										},
										"description": "Send a file using files api. This example sends a file from carrier HIG1 to agency Y1234 (mailbox associated on oh-dev-34)"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"vendorUser\");",
											"const Pass = pm.globals.get(\"vendorPassword\");",
											"const BasicToken = pm.environment.get(\"vendorTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"vendorUserToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('vendorUserToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Files Metadata",
							"item": [
								{
									"name": "Get 401 Unauthoried user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{vendorUserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/files?account=yduxh&userId=onefile",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "yduxh"
												},
												{
													"key": "userId",
													"value": "onefile"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"vendorUser\");",
											"const Pass = pm.globals.get(\"vendorPassword\");",
											"const BasicToken = pm.environment.get(\"vendorTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"vendorUserToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('vendorUserToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Files V3 Metadata",
							"item": [
								{
									"name": "One Param",
									"item": [
										{
											"name": "Get 204 Class Code not found",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{vendorUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&classCode=CLMDWN\"",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "classCode",
															"value": "CLMDWN\""
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200OK class code- file returned",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{vendorUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&classCode=AIDOWN",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "classCode",
															"value": "AIDOWN"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200ok direction -Inbond returns file",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    pm.test(\"response size is not eaqual to null\", function () {\r",
															"    pm.expect(pm.response.responseSize).not.eq(0);\r",
															"});\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{vendorUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&direction=inbound",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "direction",
															"value": "inbound"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 204ok direction -Outbond",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"    \r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{vendorUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{onefile}}&direction=outbound",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{onefile}}"
														},
														{
															"key": "direction",
															"value": "outbound"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 filterAccount",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    \r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{vendorUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&filterAccount={{carrierAccount}}",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "filterAccount",
															"value": "{{carrierAccount}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 filterUserId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    \r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{vendorUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&filterUserId={{carrierMailbox}}",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "filterUserId",
															"value": "{{carrierMailbox}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 204 ok for fake status code",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{vendorUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&statusCode=random%C2%A7%CE%A6",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "random%C2%A7%CE%A6"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Start date 204 for date after files",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{vendorUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&startDate=11-14-2023",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "startDate",
															"value": "11-14-2023"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get stop date 204 for date before files",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{vendorUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&stopDate=05-1-2001",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "stopDate",
															"value": "05-1-2001"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200ok Stop date- file returned",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{vendorUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&stopDate=05-1-2022",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "stopDate",
															"value": "05-1-2022"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Start date 200- files returned",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{vendorUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&startDate=11-10-2022",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "startDate",
															"value": "11-10-2022"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Acknowledged or A",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{vendorUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&statusCode=A",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "A"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Auto -acknowledged or T",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{vendorUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&statusCode=T",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "T"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Available or V",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{vendorUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{yduxhAccount}}&userId={{yduxhMailbox}}&statusCode=V",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{yduxhAccount}}"
														},
														{
															"key": "userId",
															"value": "{{yduxhMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "V"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Canceled or C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{vendorUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?statusCode=C&account={{yduxhAccount}}&userId={{yduxhMailbox}}",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "statusCode",
															"value": "C"
														},
														{
															"key": null,
															"value": "1f70e807-22a0-4084-bf51-742b7e162226",
															"disabled": true
														},
														{
															"key": "account",
															"value": "{{yduxhAccount}}"
														},
														{
															"key": "userId",
															"value": "{{yduxhMailbox}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Hold or H",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{vendorUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&statusCode=H",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "H"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Incomplete or I",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{vendorUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{yduxhAccount}}&userId={{yduxhMailbox}}&statusCode=I",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{yduxhAccount}}"
														},
														{
															"key": "userId",
															"value": "{{yduxhMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "I"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Purged or X",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{vendorUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{yduxhAccount}}&userId={{yduxhMailbox}}&statusCode=X",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{yduxhAccount}}"
														},
														{
															"key": "userId",
															"value": "{{yduxhMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "X"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Received or R",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{vendorUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{yduxhAccount}}&userId={{yduxhMailbox}}&statusCode=R",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{yduxhAccount}}"
														},
														{
															"key": "userId",
															"value": "{{yduxhMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "R"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200 ok Status code- Send or S",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{vendorUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&statusCode=S",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "S"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const URL = pm.environment.get(\"tokenUrl\");",
													"const User = pm.globals.get(\"vendorUser\");",
													"const Pass = pm.globals.get(\"vendorPassword\");",
													"const BasicToken = pm.environment.get(\"vendorTokenClient\");",
													"const Scope = pm.globals.get(\"allScope\")",
													"const postRequest = {",
													"  url: URL,",
													"  method: 'POST',",
													"  timeout: 10,",
													"  header: {",
													"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
													"    \"Authorization\": \"Basic \" + BasicToken",
													"  },",
													"  body: {",
													"    mode: 'urlencoded',",
													"    urlencoded: [",
													"        {key: \"grant_type\", value: \"password\"},",
													"        {key:\"username\", value: User},",
													"        {key:\"Password\", value: Pass},",
													"        {key:\"scope\", value: Scope}",
													"    ]}",
													"};",
													"pm.environment.unset(\"vendorUserToken\");",
													"pm.sendRequest(postRequest, function (err, res) {",
													"    var responseJson = res.json();",
													"    console.log(responseJson);",
													"    pm.environment.set('vendorUserToken', responseJson['access_token']);",
													"});"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Two Params",
									"item": [
										{
											"name": "Get 200OK Start and Stop date- file returns",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{vendorUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&startDate=11-1-2022&stopDate=11-11-2022",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "startDate",
															"value": "11-1-2022"
														},
														{
															"key": "stopDate",
															"value": "11-11-2022"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get start and stop date-  return 400 for bad dates",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{vendorUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&startDate=2019-06-01&stopDate=2018-06-01",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "startDate",
															"value": "2019-06-01"
														},
														{
															"key": "stopDate",
															"value": "2018-06-01"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 204 Status code -Canceled or C & direction inbound",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{vendorUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&statusCode=C&direction=inbound",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "C"
														},
														{
															"key": "direction",
															"value": "inbound"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get 200ok Two Status Codes",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{vendorUserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyMailbox}}&statusCode=T&statusCode=X",
													"host": [
														"{{reqUrl}}"
													],
													"path": [
														"api",
														"v3",
														"files"
													],
													"query": [
														{
															"key": "account",
															"value": "{{agencyAccount}}"
														},
														{
															"key": "userId",
															"value": "{{agencyMailbox}}"
														},
														{
															"key": "statusCode",
															"value": "T"
														},
														{
															"key": "statusCode",
															"value": "X"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const URL = pm.environment.get(\"tokenUrl\");",
													"const User = pm.globals.get(\"vendorUser\");",
													"const Pass = pm.globals.get(\"vendorPassword\");",
													"const BasicToken = pm.environment.get(\"vendorTokenClient\");",
													"const Scope = pm.globals.get(\"allScope\")",
													"const postRequest = {",
													"  url: URL,",
													"  method: 'POST',",
													"  timeout: 10,",
													"  header: {",
													"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
													"    \"Authorization\": \"Basic \" + BasicToken",
													"  },",
													"  body: {",
													"    mode: 'urlencoded',",
													"    urlencoded: [",
													"        {key: \"grant_type\", value: \"password\"},",
													"        {key:\"username\", value: User},",
													"        {key:\"Password\", value: Pass},",
													"        {key:\"scope\", value: Scope}",
													"    ]}",
													"};",
													"pm.environment.unset(\"vendorUserToken\");",
													"pm.sendRequest(postRequest, function (err, res) {",
													"    var responseJson = res.json();",
													"    console.log(responseJson);",
													"    pm.environment.set('vendorUserToken', responseJson['access_token']);",
													"});"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Get 400 returns Bad Request due to empty pagesize int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{vendorUserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/v3/files?account=null&userId=null&pagesize=",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"v3",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "null"
												},
												{
													"key": "userId",
													"value": "null"
												},
												{
													"key": "pagesize",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get 401 returns Unauthorized for carrier mailbox",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{vendorUserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/v3/files?account={{carrierAccount}}&userId={{carrierMailbox}}",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"v3",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "{{carrierAccount}}"
												},
												{
													"key": "userId",
													"value": "{{carrierMailbox}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get 204Ok returns No content due to no files",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{vendorUserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/v3/files?account={{agencyAccount}}&userId={{agencyEmptymailbox}}",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"v3",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": "{{agencyAccount}}"
												},
												{
													"key": "userId",
													"value": "{{agencyEmptymailbox}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get  400 returns Bad Request due to empty page int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{vendorUserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/v3/files?account=&userId=&page=",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"v3",
												"files"
											],
											"query": [
												{
													"key": "account",
													"value": ""
												},
												{
													"key": "userId",
													"value": ""
												},
												{
													"key": "page",
													"value": ""
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"vendorUser\");",
											"const Pass = pm.globals.get(\"vendorPassword\");",
											"const BasicToken = pm.environment.get(\"vendorTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"vendorUserToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('vendorUserToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "Send Files",
					"item": [
						{
							"name": "return 202 Accepted when sending Edoc file with Valid Param Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");\r",
											"const User = pm.environment.get(\"carrierSysUser\");\r",
											"const Pass = pm.environment.get(\"carrierPassword\");\r",
											"const BasicToken = pm.environment.get(\"carrierTokenClient\");\r",
											"const Scope = pm.environment.get(\"allScope\")\r",
											"const postRequest = {\r",
											"  url: URL,\r",
											"  method: 'POST',\r",
											"  timeout: 10,\r",
											"  header: {\r",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",\r",
											"    \"Authorization\": \"Basic \" + BasicToken\r",
											"  },\r",
											"  body: {\r",
											"    mode: 'urlencoded',\r",
											"    urlencoded: [\r",
											"        {key: \"grant_type\", value: \"password\"},\r",
											"        {key:\"username\", value: User},\r",
											"        {key:\"Password\", value: Pass},\r",
											"        {key:\"scope\", value: Scope}\r",
											"    ]}\r",
											"};\r",
											"pm.environment.unset(\"carrierSysUserToken\");\r",
											"pm.sendRequest(postRequest, function (err, res) {\r",
											"    var responseJson = res.json();\r",
											"    console.log(responseJson);\r",
											"    pm.environment.set('carrierSysUserToken', responseJson['access_token']);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6InJjS0FlTko5N0V2Z0JPaFQ2RlpWWnI1dWNYYyIsImtpZCI6InJjS0FlTko5N0V2Z0JPaFQ2RlpWWnI1dWNYYyJ9.eyJpc3MiOiJodHRwczovL29oLWRldi0yOTozNTgwMCIsImF1ZCI6Imh0dHBzOi8vb2gtZGV2LTI5OjM1ODAwL3Jlc291cmNlcyIsImV4cCI6MTY3MDQxMjAzMiwibmJmIjoxNjcwNDA4NDMyLCJjbGllbnRfaWQiOiIwQUFFQ0JBRC0xNjU5LTQ3MTEtOEZFRC0wNEFDNTgzNDAyQTciLCJzY29wZSI6WyJib29rcm9sbHMiLCJmaWxlX3RyYW5zZmVyIiwib3BlbmlkIiwicHJvZHVjZXJzIiwidHJhZGluZ19wYXJ0bmVycyJdLCJzdWIiOiJhMjNmYzgxOS05NjQyLTQ4NTMtOTYwMy02ZjE3NGE2NjAzZTMiLCJhdXRoX3RpbWUiOjE2NzA0MDg0MzIsImlkcCI6Imlkc3J2IiwibmFtZSI6InBvc3RtYW4uYXV0b2NhcnIuYWRtaW4iLCJlbWFpbCI6Ik5hdmVlbi5LYXVzaGlrQGFwcGxpZWRzeXN0ZW1zLmNvbSIsImZ1bGwgbmFtZSI6IlBvc3RtYW4gQXV0b2NhcnIgQWRtaW4iLCJyb2xlIjoiQ2FycmllciBBZG1pbiIsInByb2R1Y3RzIjoiZXhjaGFuZ2UiLCJtdXN0IHNpZ24gZXVsYSI6IiIsImFjY291bnQiOiJBVVRPQ0FSUiIsIm1lbWJlciI6IkNhcnJpZXIiLCJwZXJtaXNzaW9ucyI6WyJhZGQ6YWdlbmNpZXMiLCJhZGQ6dHJhZGluZ19wYXJ0bmVycyIsImRpc2FibGU6dXNlcnMiLCJlZGl0OmFwaV9jbGllbnRzIiwiZWRpdDphcGlfcHJvZmlsZXMiLCJlZGl0OmJvb2tyb2xscyIsImVkaXQ6Y2FyYm9uX2NvcHkiLCJlZGl0OmNhcnJpZXJzIiwiZWRpdDpmZWVkYmFjayIsImVkaXQ6ZmlsZXNfbWV0YWRhdGFfY2FuY2VsIiwiZWRpdDpmaWxlc19tZXRhZGF0YV9ob2xkIiwiZWRpdDpmaWxlc19tZXRhZGF0YV9yZXNlbmQiLCJlZGl0OmZpbGVzX21ldGFkYXRhX3Jlc2VuZF90cmFuc2FjdGlvbiIsImVkaXQ6bWFpbGJveGVzIiwiZWRpdDpub3RpZnlfY29uZmlncyIsImVkaXQ6cHJvZHVjZXJzIiwiZWRpdDpwcm9kdWN0cyIsImVkaXQ6cmVwb3J0c19zY2hlZHVsZXMiLCJlZGl0OnVzZXJfcGVybWlzc2lvbnMiLCJlZGl0OnVzZXJzIiwicmVtb3ZlOnRyYWRpbmdfcGFydG5lcnMiLCJ2aWV3OmFnZW5jaWVzIiwidmlldzphcGlfY2xpZW50cyIsInZpZXc6YXBpX3Byb2ZpbGVzIiwidmlldzpib29rcm9sbHMiLCJ2aWV3OmNhcmJvbl9jb3B5IiwidmlldzpjYXJyaWVycyIsInZpZXc6Y29ubmVjdGlvbnMiLCJ2aWV3OmRhc2hib2FyZCIsInZpZXc6ZmVlZGJhY2siLCJ2aWV3OmZpbGVzIiwidmlldzpmaWxlc19tZXRhZGF0YSIsInZpZXc6bWFpbGJveF9zZXNzaW9ucyIsInZpZXc6bWFpbGJveGVzIiwidmlldzpub3RpZnlfY29uZmlncyIsInZpZXc6cHJvZHVjZXJzIiwidmlldzpyZXBvcnRzIiwidmlldzpyZXBvcnRzX3NjaGVkdWxlcyIsInZpZXc6dHJhZGluZ19wYXJ0bmVycyJdLCJqdGkiOiI5MmE3OGY2NWYyM2Y5OGMxMjAwNmQ0YzMzMDU2NDVjNiIsImFtciI6WyJwYXNzd29yZCJdfQ.RIW1Mxf0CuyrIOkSZoqDnUFStkYsFVRuc2hKueTNFWOQ3oQEPgCIANrTqXNsKPK30bJuqG3eM0REyAwjCWbkITgwHrVUD8RJ7fqLriGA_a97Fsl6q8qkiyVaaICcY4QvML1991Br1n19BYqyIUkioPsQQivswJNVlcV1CpgAHtjag-ZSZjyOVlc4cgfaBcXBCXbLHgIGs36D35sj2_6sfEc2erVuE1GqXQO2awTajwDIqYAq4CMQbPVZVzskyptFDCxcPTSpUxinMznA4ViOJ4nYb0ljjudaF9zIxK5SAUfv_mfRl3AMBcPJ0CIgyv5s6x72DmgLSTR7wtPDkDK92w",
										"type": "text"
									},
									{
										"key": "content-type",
										"value": "multipart/form-data",
										"type": "text",
										"disabled": true
									},
									{
										"key": "X-IVANS-File-Metadata",
										"value": "{\"originalName\":\"eDoc_QA_TEST\",\"remoteName\":\"eDoc_QA_TEST\",\"sendAccount\":\"{{carrierAccount}}\",\"sendUserId\":\"{{carrierMailbox}}\",\"receiveAccount\":\"{{agencyAccount}}\",\"receiveUserId\":\"{{agencyMailbox}}\",\"ClassCode\":\"{{edoc}}\"}",
										"type": "text"
									},
									{
										"key": "content-type",
										"value": "text/plain",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "",
											"type": "file",
											"src": "eDoc_QA_TEST.xml"
										}
									]
								},
								"url": {
									"raw": "{{reqUrl}}/api/files?type=media",
									"host": [
										"{{reqUrl}}"
									],
									"path": [
										"api",
										"files"
									],
									"query": [
										{
											"key": "type",
											"value": "media"
										}
									]
								},
								"description": "Send a file using files api. This example sends a file from carrier HIG1 to agency Y1234 (mailbox associated on oh-dev-34)"
							},
							"response": []
						},
						{
							"name": "return 202 Accepted when sending DBCD file with Valid Param",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");\r",
											"const User = pm.environment.get(\"carrierSysUser\");\r",
											"const Pass = pm.environment.get(\"carrierPassword\");\r",
											"const BasicToken = pm.environment.get(\"carrierTokenClient\");\r",
											"const Scope = pm.environment.get(\"allScope\")\r",
											"const postRequest = {\r",
											"  url: URL,\r",
											"  method: 'POST',\r",
											"  timeout: 10,\r",
											"  header: {\r",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",\r",
											"    \"Authorization\": \"Basic \" + BasicToken\r",
											"  },\r",
											"  body: {\r",
											"    mode: 'urlencoded',\r",
											"    urlencoded: [\r",
											"        {key: \"grant_type\", value: \"password\"},\r",
											"        {key:\"username\", value: User},\r",
											"        {key:\"Password\", value: Pass},\r",
											"        {key:\"scope\", value: Scope}\r",
											"    ]}\r",
											"};\r",
											"pm.environment.unset(\"carrierSysUserToken\");\r",
											"pm.sendRequest(postRequest, function (err, res) {\r",
											"    var responseJson = res.json();\r",
											"    console.log(responseJson);\r",
											"    pm.environment.set('carrierSysUserToken', responseJson['access_token']);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{carrierSysUserToken}}",
										"type": "text"
									},
									{
										"key": "content-type",
										"value": "multipart/form-data",
										"type": "text",
										"disabled": true
									},
									{
										"key": "X-IVANS-File-Metadata",
										"value": "{\"originalName\":\"DBCFile_QATEST\",\"remoteName\":\"DBCFile_QATEST\",\"sendAccount\":\"{{carrierAccount}}\",\"sendUserId\":\"{{carrierMailbox}}\",\"receiveAccount\":\"{{agencyAccount}}\",\"receiveUserId\":\"{{agencyMailbox}}\",\"ClassCode\":\"{{dbcd}}\"}",
										"type": "text"
									},
									{
										"key": "content-type",
										"value": "text/plain",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "",
											"type": "file",
											"src": "DBCFile_QATEST.xls"
										}
									]
								},
								"url": {
									"raw": "{{reqUrl}}/api/files?type=media",
									"host": [
										"{{reqUrl}}"
									],
									"path": [
										"api",
										"files"
									],
									"query": [
										{
											"key": "type",
											"value": "media"
										}
									]
								},
								"description": "Send a file using files api. This example sends a file from carrier HIG1 to agency Y1234 (mailbox associated on oh-dev-34)"
							},
							"response": []
						},
						{
							"name": "return 202 Accepted when sending Claim file with Valid Param",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");\r",
											"const User = pm.environment.get(\"carrierSysUser\");\r",
											"const Pass = pm.environment.get(\"carrierPassword\");\r",
											"const BasicToken = pm.environment.get(\"carrierTokenClient\");\r",
											"const Scope = pm.environment.get(\"allScope\")\r",
											"const postRequest = {\r",
											"  url: URL,\r",
											"  method: 'POST',\r",
											"  timeout: 10,\r",
											"  header: {\r",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",\r",
											"    \"Authorization\": \"Basic \" + BasicToken\r",
											"  },\r",
											"  body: {\r",
											"    mode: 'urlencoded',\r",
											"    urlencoded: [\r",
											"        {key: \"grant_type\", value: \"password\"},\r",
											"        {key:\"username\", value: User},\r",
											"        {key:\"Password\", value: Pass},\r",
											"        {key:\"scope\", value: Scope}\r",
											"    ]}\r",
											"};\r",
											"pm.environment.unset(\"carrierSysUserToken\");\r",
											"pm.sendRequest(postRequest, function (err, res) {\r",
											"    var responseJson = res.json();\r",
											"    console.log(responseJson);\r",
											"    pm.environment.set('carrierSysUserToken', responseJson['access_token']);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{carrierSysUserToken}}",
										"type": "text"
									},
									{
										"key": "content-type",
										"value": "multipart/form-data",
										"type": "text",
										"disabled": true
									},
									{
										"key": "X-IVANS-File-Metadata",
										"value": "{\"originalName\":\"ClaimQATEST\",\"remoteName\":\"ClaimQATEST\",\"sendAccount\":\"{{carrierAccount}}\",\"sendUserId\":\"{{carrierMailbox}}\",\"receiveAccount\":\"{{agencyAccount}}\",\"receiveUserId\":\"{{agencyMailbox}}\",\"ClassCode\":\"{{claim}}\"}",
										"type": "text"
									},
									{
										"key": "content-type",
										"value": "text/plain",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "",
											"type": "file",
											"src": "ClaimQATEST.xml"
										}
									]
								},
								"url": {
									"raw": "{{reqUrl}}/api/files?type=media",
									"host": [
										"{{reqUrl}}"
									],
									"path": [
										"api",
										"files"
									],
									"query": [
										{
											"key": "type",
											"value": "media"
										}
									]
								},
								"description": "Send a file using files api. This example sends a file from carrier HIG1 to agency Y1234 (mailbox associated on oh-dev-34)"
							},
							"response": []
						},
						{
							"name": "return 404 Not Found when sending file without any Param",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"\r",
											"    const REQURL = pm.environment.get(\"reqUrl\")\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData).to.have.property(\"message\", \"No HTTP resource was found that matches the request URI '\" + REQURL + \"/api/files'.\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");\r",
											"const User = pm.environment.get(\"carrierSysUser\");\r",
											"const Pass = pm.environment.get(\"carrierPassword\");\r",
											"const BasicToken = pm.environment.get(\"carrierTokenClient\");\r",
											"const Scope = pm.environment.get(\"allScope\")\r",
											"const postRequest = {\r",
											"  url: URL,\r",
											"  method: 'POST',\r",
											"  timeout: 10,\r",
											"  header: {\r",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",\r",
											"    \"Authorization\": \"Basic \" + BasicToken\r",
											"  },\r",
											"  body: {\r",
											"    mode: 'urlencoded',\r",
											"    urlencoded: [\r",
											"        {key: \"grant_type\", value: \"password\"},\r",
											"        {key:\"username\", value: User},\r",
											"        {key:\"Password\", value: Pass},\r",
											"        {key:\"scope\", value: Scope}\r",
											"    ]}\r",
											"};\r",
											"pm.environment.unset(\"carrierSysUserToken\");\r",
											"pm.sendRequest(postRequest, function (err, res) {\r",
											"    var responseJson = res.json();\r",
											"    console.log(responseJson);\r",
											"    pm.environment.set('carrierSysUserToken', responseJson['access_token']);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{carrierSysUserToken}}",
										"type": "text"
									},
									{
										"key": "content-type",
										"value": "multipart/form-data",
										"type": "text",
										"disabled": true
									},
									{
										"key": "X-IVANS-File-Metadata",
										"value": "{\"originalName\":\"QAPolicyTest\",\"remoteName\":\"QAPolicyTest\",\"sendAccount\":\"{{carrierAccount}}\",\"sendUserId\":\"{{carrierMailbox}}\",\"receiveAccount\":\"{{agencyAccount}}\",\"receiveUserId\":\"{{agencyMailbox}}\",\"ClassCode\":\"AIDOWN\"}",
										"type": "text"
									},
									{
										"key": "content-type",
										"value": "text/plain",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "",
											"type": "file",
											"src": "/C:/Users/Cloud Analogy/Downloads/testfile.csv"
										}
									]
								},
								"url": {
									"raw": "{{reqUrl}}/api/files",
									"host": [
										"{{reqUrl}}"
									],
									"path": [
										"api",
										"files"
									],
									"query": [
										{
											"key": "type",
											"value": "media",
											"disabled": true
										}
									]
								},
								"description": "Send a file using files api. This example sends a file from carrier HIG1 to agency Y1234 (mailbox associated on oh-dev-34)"
							},
							"response": []
						},
						{
							"name": "return 202 Accepted when sending Policy file with Valid Param",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");\r",
											"const User = pm.environment.get(\"carrierSysUser\");\r",
											"const Pass = pm.environment.get(\"carrierPassword\");\r",
											"const BasicToken = pm.environment.get(\"carrierTokenClient\");\r",
											"const Scope = pm.environment.get(\"allScope\")\r",
											"const postRequest = {\r",
											"  url: URL,\r",
											"  method: 'POST',\r",
											"  timeout: 10,\r",
											"  header: {\r",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",\r",
											"    \"Authorization\": \"Basic \" + BasicToken\r",
											"  },\r",
											"  body: {\r",
											"    mode: 'urlencoded',\r",
											"    urlencoded: [\r",
											"        {key: \"grant_type\", value: \"password\"},\r",
											"        {key:\"username\", value: User},\r",
											"        {key:\"Password\", value: Pass},\r",
											"        {key:\"scope\", value: Scope}\r",
											"    ]}\r",
											"};\r",
											"pm.environment.unset(\"carrierSysUserToken\");\r",
											"pm.sendRequest(postRequest, function (err, res) {\r",
											"    var responseJson = res.json();\r",
											"    console.log(responseJson);\r",
											"    pm.environment.set('carrierSysUserToken', responseJson['access_token']);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{globalAdminToken}}",
										"type": "text"
									},
									{
										"key": "content-type",
										"value": "multipart/form-data",
										"type": "text",
										"disabled": true
									},
									{
										"key": "X-IVANS-File-Metadata",
										"value": "{\"originalName\":\"TestPolicy4.zip\",\"remoteName\":\"TestPolicy4.zip\",\"sendAccount\":\"{{carrierAccount}}\",\"sendUserId\":\"{{carrierMailbox}}\",\"receiveAccount\":\"{{agencyAccount}}\",\"receiveUserId\":\"onefile\",\"ClassCode\":\"{{policy}}\"}",
										"type": "text"
									},
									{
										"key": "content-type",
										"value": "text/plainagencyMailboxOneFile",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "",
											"type": "file",
											"src": "test file for 3136/Policies/Policies/TestPolicy4.zip"
										}
									]
								},
								"url": {
									"raw": "{{reqUrl}}/api/files?type=media",
									"host": [
										"{{reqUrl}}"
									],
									"path": [
										"api",
										"files"
									],
									"query": [
										{
											"key": "type",
											"value": "media"
										}
									]
								},
								"description": "Send a file using files api. This example sends a file from carrier HIG1 to agency Y1234 (mailbox associated on oh-dev-34)"
							},
							"response": []
						},
						{
							"name": "return 503 Service Unavailable when sending file with type Param not equal to media",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 503\", function () {\r",
											"    pm.response.to.have.status(503);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");\r",
											"const User = pm.environment.get(\"carrierSysUser\");\r",
											"const Pass = pm.environment.get(\"carrierPassword\");\r",
											"const BasicToken = pm.environment.get(\"carrierTokenClient\");\r",
											"const Scope = pm.environment.get(\"allScope\")\r",
											"const postRequest = {\r",
											"  url: URL,\r",
											"  method: 'POST',\r",
											"  timeout: 10,\r",
											"  header: {\r",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",\r",
											"    \"Authorization\": \"Basic \" + BasicToken\r",
											"  },\r",
											"  body: {\r",
											"    mode: 'urlencoded',\r",
											"    urlencoded: [\r",
											"        {key: \"grant_type\", value: \"password\"},\r",
											"        {key:\"username\", value: User},\r",
											"        {key:\"Password\", value: Pass},\r",
											"        {key:\"scope\", value: Scope}\r",
											"    ]}\r",
											"};\r",
											"pm.environment.unset(\"carrierSysUserToken\");\r",
											"pm.sendRequest(postRequest, function (err, res) {\r",
											"    var responseJson = res.json();\r",
											"    console.log(responseJson);\r",
											"    pm.environment.set('carrierSysUserToken', responseJson['access_token']);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{carrierSysUserToken}}",
										"type": "text"
									},
									{
										"key": "content-type",
										"value": "multipart/form-data",
										"type": "text",
										"disabled": true
									},
									{
										"key": "X-IVANS-File-Metadata",
										"value": "{\"originalName\":\"QAPolicyTest\",\"remoteName\":\"QAPolicyTest\",\"sendAccount\":\"{{carrierAccount}}\",\"sendUserId\":\"{{carrierMailbox}}\",\"receiveAccount\":\"{{agencyAccount}}\",\"receiveUserId\":\"{{agencyMailbox}}\",\"ClassCode\":\"AIDOWN\"}",
										"type": "text"
									},
									{
										"key": "content-type",
										"value": "text/plain",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "",
											"type": "file",
											"src": "/C:/Users/Cloud Analogy/Downloads/testfile.csv"
										}
									]
								},
								"url": {
									"raw": "{{reqUrl}}/api/files?type=med",
									"host": [
										"{{reqUrl}}"
									],
									"path": [
										"api",
										"files"
									],
									"query": [
										{
											"key": "type",
											"value": "med"
										}
									]
								},
								"description": "Send a file using files api. This example sends a file from carrier HIG1 to agency Y1234 (mailbox associated on oh-dev-34)"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const URL = pm.environment.get(\"tokenUrl\");",
									"const User = pm.globals.get(\"ivanGlobal\");",
									"const Pass = pm.globals.get(\"ivanPassword\");",
									"const BasicToken = pm.environment.get(\"ivanTokenClient\");",
									"const Scope = pm.globals.get(\"allScope\")",
									"const postRequest = {",
									"  url: URL,",
									"  method: 'POST',",
									"  timeout: 10,",
									"  header: {",
									"      \"Content-Type\": \"application/x-www-raw-urlencoded\",",
									"    \"Authorization\": \"Basic \"+ BasicToken,",
									"  },",
									"  body: {",
									"    mode: 'urlencoded',",
									"    urlencoded: [",
									"        {key: \"grant_type\", value: \"password\"},",
									"        {key:\"username\", value: User},",
									"        {key:\"Password\", value: Pass},",
									"        {key:\"scope\", value: Scope}",
									"    ]}",
									"};",
									"pm.environment.unset(\"ivanGlobalToken\");",
									"pm.sendRequest(postRequest, function (err, res) {",
									"    var responseJson = res.json();",
									"    console.log(responseJson);",
									"    pm.environment.set('ivanGlobalToken', responseJson['access_token']);",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Carrier Admin",
					"item": [
						{
							"name": "PUT status by file id",
							"item": [
								{
									"name": "GET- 200ok for Status to Send",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierAdminToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"status\":\"S\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{reqUrl}}/api/files/{{changeFileStatus}}/status"
									},
									"response": []
								},
								{
									"name": "GET- 404 PUT status  by file id using Invalid File ID(File Id Not Available to System)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierAdminToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"status\":\"S\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{reqUrl}}/api/files/{{fakeFileID}}/status"
									},
									"response": []
								},
								{
									"name": "GET- 400  PUT status to  by file id using Empty File ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierAdminToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"status\":\"S\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{reqUrl}}/api/files/ /status"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"carrierAdmin\");",
											"const Pass = pm.globals.get(\"carrierPassword\");",
											"const BasicToken = pm.environment.get(\"ivanTokenClient\");",
											"const Scope = pm.globals.get(\"internalScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"carrierAdminToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('carrierAdminToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "PUT recevied by file Id",
							"item": [
								{
									"name": "PUT- 200 return 200 for sucessfull file Sent for Receive",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const URL = pm.environment.get(\"tokenUrl\");\r",
													"const User = pm.globals.get(\"agencySysUser\");\r",
													"const Pass = pm.globals.get(\"agencyPassword\");\r",
													"const BasicToken = pm.environment.get(\"agencyTokenClient\");\r",
													"const Scope = pm.globals.get(\"allScope\")\r",
													"const postRequest = {\r",
													"  url: URL,\r",
													"  method: 'POST',\r",
													"  timeout: 10,\r",
													"  header: {\r",
													"    \"Content-Type\": \"application/x-www-raw-urlencoded\",\r",
													"    \"Authorization\": \"Basic \" + BasicToken\r",
													"  },\r",
													"  body: {\r",
													"    mode: 'urlencoded',\r",
													"    urlencoded: [\r",
													"        {key: \"grant_type\", value: \"password\"},\r",
													"        {key:\"username\", value: User},\r",
													"        {key:\"Password\", value: Pass},\r",
													"        {key:\"scope\", value: Scope}\r",
													"    ]}\r",
													"};\r",
													"pm.environment.unset(\"agencySysUserToken\");\r",
													"pm.sendRequest(postRequest, function (err, res) {\r",
													"    var responseJson = res.json();\r",
													"    console.log(responseJson);\r",
													"    pm.environment.set('agencySysUserToken', responseJson['access_token']);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencySysUserToken}}"
											}
										],
										"url": "{{reqUrl}}/api/files/{{changeFileStatus}}/received"
									},
									"response": []
								},
								{
									"name": "PUT- 400ok   File Status to Received by File ID with Valid File ID(Already in Received Status)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const URL = pm.environment.get(\"tokenUrl\");\r",
													"const User = pm.globals.get(\"agencySysUser\");\r",
													"const Pass = pm.globals.get(\"agencyPassword\");\r",
													"const BasicToken = pm.environment.get(\"agencyTokenClient\");\r",
													"const Scope = pm.globals.get(\"allScope\")\r",
													"const postRequest = {\r",
													"  url: URL,\r",
													"  method: 'POST',\r",
													"  timeout: 10,\r",
													"  header: {\r",
													"    \"Content-Type\": \"application/x-www-raw-urlencoded\",\r",
													"    \"Authorization\": \"Basic \" + BasicToken\r",
													"  },\r",
													"  body: {\r",
													"    mode: 'urlencoded',\r",
													"    urlencoded: [\r",
													"        {key: \"grant_type\", value: \"password\"},\r",
													"        {key:\"username\", value: User},\r",
													"        {key:\"Password\", value: Pass},\r",
													"        {key:\"scope\", value: Scope}\r",
													"    ]}\r",
													"};\r",
													"pm.environment.unset(\"agencySysUserToken\");\r",
													"pm.sendRequest(postRequest, function (err, res) {\r",
													"    var responseJson = res.json();\r",
													"    console.log(responseJson);\r",
													"    pm.environment.set('agencySysUserToken', responseJson['access_token']);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencySysUserToken}}"
											}
										],
										"url": "{{reqUrl}}/api/files/{{fileAlreadyinReceivedState}}/received"
									},
									"response": []
								},
								{
									"name": "PUT- 404 File Status to Received by File ID using Invalid File ID(File Id Not Available to System)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const URL = pm.environment.get(\"tokenUrl\");\r",
													"const User = pm.environment.get(\"agencySysUser\");\r",
													"const Pass = pm.environment.get(\"agencySysUserPassword\");\r",
													"const BasicToken = pm.environment.get(\"agencyTokenClient\");\r",
													"const Scope = pm.environment.get(\"allScope\")\r",
													"const postRequest = {\r",
													"  url: URL,\r",
													"  method: 'POST',\r",
													"  timeout: 10,\r",
													"  header: {\r",
													"    \"Content-Type\": \"application/x-www-raw-urlencoded\",\r",
													"    \"Authorization\": \"Basic \" + BasicToken\r",
													"  },\r",
													"  body: {\r",
													"    mode: 'urlencoded',\r",
													"    urlencoded: [\r",
													"        {key: \"grant_type\", value: \"password\"},\r",
													"        {key:\"username\", value: User},\r",
													"        {key:\"Password\", value: Pass},\r",
													"        {key:\"scope\", value: Scope}\r",
													"    ]}\r",
													"};\r",
													"pm.environment.unset(\"agencySysUserToken\");\r",
													"pm.sendRequest(postRequest, function (err, res) {\r",
													"    var responseJson = res.json();\r",
													"    console.log(responseJson);\r",
													"    pm.environment.set('agencySysUserToken', responseJson['access_token']);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierAdminToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/{{wrongFileId}}/received"
									},
									"response": []
								},
								{
									"name": "PUT- 400 File Status to Received by File ID using Empty File ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const URL = pm.environment.get(\"tokenUrl\");\r",
													"const User = pm.environment.get(\"agencySysUser\");\r",
													"const Pass = pm.environment.get(\"agencySysUserPassword\");\r",
													"const BasicToken = pm.environment.get(\"agencyTokenClient\");\r",
													"const Scope = pm.environment.get(\"allScope\")\r",
													"const postRequest = {\r",
													"  url: URL,\r",
													"  method: 'POST',\r",
													"  timeout: 10,\r",
													"  header: {\r",
													"    \"Content-Type\": \"application/x-www-raw-urlencoded\",\r",
													"    \"Authorization\": \"Basic \" + BasicToken\r",
													"  },\r",
													"  body: {\r",
													"    mode: 'urlencoded',\r",
													"    urlencoded: [\r",
													"        {key: \"grant_type\", value: \"password\"},\r",
													"        {key:\"username\", value: User},\r",
													"        {key:\"Password\", value: Pass},\r",
													"        {key:\"scope\", value: Scope}\r",
													"    ]}\r",
													"};\r",
													"pm.environment.unset(\"agencySysUserToken\");\r",
													"pm.sendRequest(postRequest, function (err, res) {\r",
													"    var responseJson = res.json();\r",
													"    console.log(responseJson);\r",
													"    pm.environment.set('agencySysUserToken', responseJson['access_token']);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierAdminToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/files/ /received"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"carrierAdmin\");",
											"const Pass = pm.globals.get(\"carrierPassword\");",
											"const BasicToken = pm.environment.get(\"ivanTokenClient\");",
											"const Scope = pm.globals.get(\"internalScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"carrierAdminToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('carrierAdminToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Routes",
			"item": []
		},
		{
			"name": "Connections",
			"item": []
		},
		{
			"name": "Connections V2",
			"item": []
		},
		{
			"name": "NotifyConfigs",
			"item": [
				{
					"name": "Any User (here, Carrier Admin)",
					"item": [
						{
							"name": "Any User Gets by Id",
							"item": [
								{
									"name": "returns 200 Ok for valid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is Ok\" , () => {",
													"  pm.response.to.be.ok",
													"});",
													"",
													"pm.test(\"Body is as expected\", () => {",
													"    let res = pm.response.json()",
													"    ",
													"    pm.expect(res).to.have.property(\"consumerInfoId\")",
													"    pm.expect(res).to.have.property(\"account\")",
													"    pm.expect(res).to.have.property(\"userId\")",
													"    pm.expect(res).to.have.property(\"delay\")",
													"    pm.expect(res).to.have.property(\"maxFileListSize\")",
													"    pm.expect(res).to.have.property(\"consumerPackage\")",
													"    pm.expect(res).to.have.property(\"endpoint\")",
													"    pm.expect(res).to.have.property(\"headers\")",
													"})",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierAdminToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/notifyconfigs/{{notifyConfigId}}"
									},
									"response": []
								},
								{
									"name": "returns 401 Unauthorized for inaccessible id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is Unauthorized\" , () => {",
													"  pm.response.to.be.unauthorized",
													"});",
													"",
													"pm.test(\"body is empty\", () => {",
													"    pm.expect(pm.response.text().length).to.eql(0)",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierAdminToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/notifyconfigs/{{notifyConfigIdUnauthorized}}"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"carrierAdmin\");",
											"const Pass = pm.globals.get(\"carrierPassword\");",
											"const BasicToken = pm.environment.get(\"carrierTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"carrierAdminToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('carrierAdminToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Any User Posts and fails",
							"item": [
								{
									"name": "returns 401 for inaccessible mailbox",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is Unauthorized\" , () => {",
													"  pm.response.to.be.unauthorized",
													"});",
													"",
													"pm.test(\"body is empty\", () => {",
													"    pm.expect(pm.response.text().length).to.eql(0)",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{carrierAdminToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"account\": \"noAccount\",\n    \"userId\": \"noUserId\",\n\t\"Endpoint\": \"blah\"\n}"
										},
										"url": "{{reqUrl}}/api/notifyconfigs"
									},
									"response": []
								},
								{
									"name": "returns 400 BadRequest for missing fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is Bad Request\" , () => {",
													"  pm.response.to.be.badRequest",
													"});",
													"",
													"pm.test(\"body is empty\", () => {",
													"    let res = pm.response.json()",
													"",
													"    pm.expect(res.message).to.eql(\"The request is invalid.\")",
													"    pm.expect(res.modelState).to.have.property(\"notify.Endpoint\")",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{carrierAdminToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"account\": \"noAccount\",\n    \"userId\": \"noUserId\"\n}"
										},
										"url": "{{reqUrl}}/api/notifyconfigs"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"carrierAdmin\");",
											"const Pass = pm.globals.get(\"carrierPassword\");",
											"const BasicToken = pm.environment.get(\"carrierTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"carrierAdminToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('carrierAdminToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Any User Updates by id and fails",
							"item": [
								{
									"name": "returns 404 NotFound for non-existent id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is notFound\" , () => {",
													"  pm.response.to.be.notFound",
													"});",
													"",
													"pm.test(\"body is empty\", () => {",
													"    pm.expect(pm.response.text().length).to.eql(0)",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{carrierAdminToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"account\": \"none\",\n    \"userId\": \"notFound\",\n\t\"Endpoint\": \"blah\"\n}"
										},
										"url": "{{reqUrl}}/api/notifyconfigs/{{non-existentNotifyConfigId}}"
									},
									"response": []
								},
								{
									"name": "returns 500 ApiError for non-JSON content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is Internal Server Error\" , () => {",
													"  pm.response.to.have.status(500)",
													"});",
													"",
													"pm.test(\"Reason Phrase is ApiError\" , () => {",
													"  pm.expect(pm.response.reason()).to.equal('An error occurred within the IVANS Exchange API.')",
													"});",
													"",
													"pm.test(\"body is empty\", () => {",
													"    pm.expect(pm.response.text().length).to.eql(0)",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierAdminToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "{{reqUrl}}/api/notifyconfigs/1"
									},
									"response": []
								},
								{
									"name": "returns 404 NotFound for non-existent id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is Not Found\" , () => {",
													"  pm.response.to.be.notFound",
													"});",
													"",
													"pm.test(\"body is empty\", () => {",
													"    pm.expect(pm.response.text().length).to.eql(0)",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierAdminToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/notifyconfigs/{{non-existentNotifyConfigId}}"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"carrierAdmin\");",
											"const Pass = pm.globals.get(\"carrierPassword\");",
											"const BasicToken = pm.environment.get(\"carrierTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"carrierAdminToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('carrierAdminToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Any User Creates, Validates, Updates, Deletes",
							"item": [
								{
									"name": "returns 201 Created for autocarr.automation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is Created\" , () => {",
													"  pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"body is as expected\", () => {",
													"  let res = pm.response.json()",
													"  let id = res.consumerInfoId",
													"  ",
													"  pm.environment.set(\"createdNotifyConfigsId\", id)",
													"  ",
													"  delete res.consumerInfoId",
													"  ",
													"  pm.expect(res).to.eql({",
													"    \"account\": \"autocarr\",",
													"    \"userId\": \"other\",",
													"    \"consumerPackage\": \"\",",
													"    \"delay\": 1000,",
													"    \"endpoint\": \"http://www.google.com\",",
													"    \"maxFileListSize\": 0,",
													"    \"headers\": {}",
													"    ",
													"  })",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{carrierAdminToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"account\": \"autocarr\",\n\t\"userId\": \"other\",\n\t\"consumerPackage\": \"\",\n\t\"delay\": 1000,\n\t\"endpoint\": \"http://www.google.com\"\n}"
										},
										"url": "{{reqUrl}}/api/notifyconfigs"
									},
									"response": []
								},
								{
									"name": "returns 200 Ok for created id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is ok\" , () => {",
													"  pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"body is as expected\" , () => {",
													"    let res = JSON.parse(pm.response.text())",
													"    ",
													"    pm.expect(res).to.eql({",
													"        \"consumerPackage\": \"\",",
													"        \"delay\": 1000,",
													"        \"maxFileListSize\": 0,",
													"        \"endpoint\": \"http://www.google.com\",",
													"        \"headers\": {},",
													"        \"consumerInfoId\": pm.environment.get(\"createdNotifyConfigsId\"),",
													"        \"account\": \"autocarr\",",
													"        \"userId\": \"other\"",
													"    })",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{carrierAdminToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/notifyconfigs/{{createdNotifyConfigsId}}"
									},
									"response": []
								},
								{
									"name": "returns 400 BadRequest for empty JSON body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is BadRequest\" , () => {",
													"  pm.response.to.be.badRequest;",
													"});",
													"",
													"pm.test(\"empty body\", () => {",
													"    pm.expect(pm.response.text().length).to.eql(0)",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{carrierAdminToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{reqUrl}}/api/notifyconfigs/{{createdNotifyConfigsId}}"
									},
									"response": []
								},
								{
									"name": "returns 200 Ok with updated delay time",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is ok\" , () => {",
													"  pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"body is as expected\" , () => {",
													"    let res = pm.response.text()",
													"    ",
													"    pm.expect(res.length).to.eql(0)",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{carrierAdminToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"consumerPackage\": \"\",\r\n    \"delay\": 2000,\r\n    \"maxFileListSize\": 0,\r\n    \"endpoint\": \"http://www.google.com\",\r\n    \"account\": \"autocarr\",\r\n    \"userid\": \"automation\"\r\n}"
										},
										"url": "{{reqUrl}}/api/notifyconfigs/{{createdNotifyConfigsId}}"
									},
									"response": []
								},
								{
									"name": "returns 200 Ok with updated delay time",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is ok\" , () => {",
													"  pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"body is as expected\" , () => {",
													"    let res = JSON.parse(pm.response.text())",
													"    ",
													"    pm.expect(res).to.eql({",
													"        \"consumerPackage\": \"\",",
													"        \"delay\": 2000,",
													"        \"maxFileListSize\": 0,",
													"        \"endpoint\": \"http://www.google.com\",",
													"        \"headers\": {},",
													"        \"consumerInfoId\": pm.environment.get(\"createdNotifyConfigsId\"),",
													"        \"account\": \"autocarr\",",
													"        \"userId\": \"other\"",
													"    })",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{carrierAdminToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/notifyconfigs/{{createdNotifyConfigsId}}"
									},
									"response": []
								},
								{
									"name": "returns 200 Ok",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is Ok\" , () => {",
													"  pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"expected body\", () => {",
													"    pm.expect(pm.response.text().length).to.eql(0)",
													"})",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierAdminToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/notifyconfigs/{{createdNotifyConfigsId}}"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"carrierAdmin\");",
											"const Pass = pm.globals.get(\"carrierPassword\");",
											"const BasicToken = pm.environment.get(\"carrierTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"carrierAdminToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('carrierAdminToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": {
							"token": "{{carrierAdminToken}}"
						}
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "StateCodes",
			"item": [
				{
					"name": "GET StateCodes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET StateCodes returns 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify data in response\", () => {\r",
									"    const responseBody = pm.response.json()\r",
									"    responseBody.map(data => pm.expect(data).to.have.all.keys(\"state\", \"description\", \"country\"))\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ivanGlobalToken}}"
							}
						],
						"url": "{{reqUrl}}/api/StateCodes"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const URL = pm.environment.get(\"tokenUrl\");",
							"const User = pm.globals.get(\"ivanGlobal\");",
							"const Pass = pm.globals.get(\"ivanPassword\");",
							"const BasicToken = pm.environment.get(\"ivanTokenClient\");",
							"const Scope = pm.globals.get(\"internalScope\")",
							"const postRequest = {",
							"  url: URL,",
							"  method: 'POST',",
							"  timeout: 10,",
							"  header: {",
							"      \"Content-Type\": \"application/x-www-raw-urlencoded\",",
							"    \"Authorization\": \"Basic \"+ BasicToken,",
							"  },",
							"  body: {",
							"    mode: 'urlencoded',",
							"    urlencoded: [",
							"        {key: \"grant_type\", value: \"password\"},",
							"        {key:\"username\", value: User},",
							"        {key:\"Password\", value: Pass},",
							"        {key:\"scope\", value: Scope}",
							"    ]}",
							"};",
							"pm.environment.unset(\"ivanGlobalToken\");",
							"pm.sendRequest(postRequest, function (err, res) {",
							"    var responseJson = res.json();",
							"    console.log(responseJson);",
							"    pm.environment.set('ivanGlobalToken', responseJson['access_token']);",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Agencies",
			"item": [
				{
					"name": "Any User (here, Agency Admin)",
					"item": [
						{
							"name": "Update An Agency And Rever Back The Changes",
							"item": [
								{
									"name": "return 200 Ok when Update an Agency By its Org ID(Update)",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyAdminToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n        \"agencyName\": \"WILLIS OF NEW JERSEY\",\r\n        \"alternateAgencyName\": \"\",\r\n        \"locationStreet1\": \"350 MT KEMBLE AVENUE\",\r\n        \"locationStreet2\": \"\",\r\n        \"locationCity\": \"MORRISTOWN\",\r\n        \"locationState\": \"NJ\",\r\n        \"locationZip\": \"07960\",\r\n        \"mailingStreet1\": \"\",\r\n        \"mailingStreet2\": \"\",\r\n        \"mailingCity\": \"\",\r\n        \"mailingState\": \"\",\r\n        \"mailingZip\": \"\",\r\n        \"agencyPhone\": \"9738296450\",\r\n        \"agencyPhoneExtension\": \"\",\r\n        \"agencyEmail\": \"\",\r\n        \"amsProductVersionId\": \"37eea79f-d032-43f5-9518-c828bd2dcad2\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{reqUrl}}/api/agencies/a55c7dfb-bcf8-43e9-8fb8-07b0fa248ddc"
									},
									"response": []
								},
								{
									"name": "return 200 Ok when Update an Agency By its Org ID(Reversal)",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyAdminToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"818ca575-770c-4b7a-88a7-4e32eaaeeb44\",\r\n    \"agencyName\": \"REYNOLDS INSURANCE AGENCY\",\r\n    \"alternateAgencyName\": \"\",\r\n    \"locationStreet1\": \"109 S WINSTON ST\",\r\n    \"locationStreet2\": \"\",\r\n    \"locationCity\": \"REYNOLDS\",\r\n    \"locationState\": \"GA\",\r\n    \"locationZip\": \"31076\",\r\n    \"mailingStreet1\": \"PO BOX 806\",\r\n    \"mailingStreet2\": \"\",\r\n    \"mailingCity\": \"REYNOLDS\",\r\n    \"mailingState\": \"GA\",\r\n    \"mailingZip\": \"31076\",\r\n    \"agencyPhone\": \"(912) 847-2877\",\r\n    \"agencyPhoneExtension\": \"\",\r\n    \"agencyEmail\": \"\",\r\n    \"amsProductVersionId\": \"1a5f16d0-1119-4915-b700-84149c267a5c\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{reqUrl}}/api/agencies/818ca575-770c-4b7a-88a7-4e32eaaeeb44"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\")",
											"const User = \"postman.YDCM.admin\"",
											"const Pass = pm.environment.get(\"agencyPassword\");",
											"const BasicToken = pm.environment.get(\"ivanTokenClient\");",
											"const Scope = pm.environment.get(\"internalScope\")",
											"",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"agencyAdminToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(\"this is the response from the json \",responseJson);",
											"    pm.environment.set('agencyAdminToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "return 200 Ok with list of Carrier and agencies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    console.log(jsonData);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{agencyAdminToken}}"
									}
								],
								"url": "{{reqUrl}}/api/organizations"
							},
							"response": []
						},
						{
							"name": "return 200 Ok with Agency Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    console.log(jsonData);\r",
											"});\r",
											"pm.test(\"Body is as expected\", () => {\r",
											"    let res = pm.response.json()\r",
											"    \r",
											"    pm.expect(res).to.have.property(\"id\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{agencyAdminToken}}"
									}
								],
								"url": {
									"raw": "{{reqUrl}}/api/agencies/?id=a55c7dfb-bcf8-43e9-8fb8-07b0fa248ddc&account=YDCM",
									"host": [
										"{{reqUrl}}"
									],
									"path": [
										"api",
										"agencies",
										""
									],
									"query": [
										{
											"key": "id",
											"value": "a55c7dfb-bcf8-43e9-8fb8-07b0fa248ddc"
										},
										{
											"key": "account",
											"value": "YDCM"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const URL = pm.environment.get(\"tokenUrl\")",
									"const User = \"postman.YDCM.admin\"",
									"const Pass = pm.environment.get(\"agencyPassword\");",
									"const BasicToken = pm.environment.get(\"ivanTokenClient\");",
									"const Scope = pm.environment.get(\"internalScope\")",
									"",
									"const postRequest = {",
									"  url: URL,",
									"  method: 'POST',",
									"  timeout: 10,",
									"  header: {",
									"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
									"    \"Authorization\": \"Basic \" + BasicToken",
									"  },",
									"  body: {",
									"    mode: 'urlencoded',",
									"    urlencoded: [",
									"        {key: \"grant_type\", value: \"password\"},",
									"        {key:\"username\", value: User},",
									"        {key:\"Password\", value: Pass},",
									"        {key:\"scope\", value: Scope}",
									"    ]}",
									"};",
									"pm.environment.unset(\"agencyAdminToken\");",
									"pm.sendRequest(postRequest, function (err, res) {",
									"    var responseJson = res.json();",
									"    console.log(\"this is the response from the json \",responseJson);",
									"    pm.environment.set('agencyAdminToken', responseJson['access_token']);",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "POST Agencies",
					"item": [
						{
							"name": "returns 201 Created with all fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code\r",
											"pm.test(\"POST Agency returns 201 created with all fields\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"// Match request body with response \r",
											"pm.test(\"Match data with response\", () => {\r",
											"    const responseBody = pm.response.json()\r",
											"    const requestBody = JSON.parse(request.data)\r",
											"    pm.expect(requestBody[\"agencyName\"]).to.eql(responseBody[\"agencyName\"])\r",
											"    pm.expect(requestBody[\"alternateAgencyName\"]).to.eql(responseBody[\"alternateAgencyName\"])\r",
											"    pm.expect(requestBody[\"agencyPhone\"]).to.eql(responseBody[\"agencyPhone\"])\r",
											"    pm.expect(requestBody[\"agencyPhoneExtension\"]).to.eql(responseBody[\"agencyPhoneExtension\"])\r",
											"    pm.expect(requestBody[\"agencyEmail\"]).to.eql(responseBody[\"agencyEmail\"])\r",
											"    pm.expect(requestBody[\"locationStreet1\"]).to.eql(responseBody[\"locationStreet1\"])\r",
											"    pm.expect(requestBody[\"locationStreet2\"]).to.eql(responseBody[\"locationStreet2\"])\r",
											"    pm.expect(requestBody[\"locationCity\"]).to.eql(responseBody[\"locationCity\"])\r",
											"    pm.expect(requestBody[\"locationState\"]).to.eql(responseBody[\"locationState\"])\r",
											"    pm.expect(requestBody[\"locationZip\"]).to.eql(responseBody[\"locationZip\"])\r",
											"    pm.expect(requestBody[\"mailingStreet1\"]).to.eql(responseBody[\"mailingStreet1\"])\r",
											"    pm.expect(requestBody[\"mailingStreet2\"]).to.eql(responseBody[\"mailingStreet2\"])\r",
											"    pm.expect(requestBody[\"mailingCity\"]).to.eql(responseBody[\"mailingCity\"])\r",
											"    pm.expect(requestBody[\"mailingState\"]).to.eql(responseBody[\"mailingState\"])\r",
											"    pm.expect(requestBody[\"mailingZip\"]).to.eql(responseBody[\"mailingZip\"])\r",
											"    pm.expect(requestBody[\"amsProductVersionId\"]).to.eql(responseBody[\"amsProductVersionId\"])\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ivanGlobalToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"agencyName\": \"OneSafe Automation\",\r\n  \"alternateAgencyName\": \"OneSafe\",\r\n  \"agencyPhone\": \"123123123\",\r\n  \"agencyPhoneExtension\": \"4444\",\r\n  \"agencyEmail\": \"test@ivans.com\",\r\n  \"locationStreet1\": \"EL Dorado\",\r\n  \"locationStreet2\": \"Californian Mountains\",\r\n  \"locationCity\": \"San Francisco\",\r\n  \"locationState\": \"CA\",\r\n  \"locationZip\": \"94016\",\r\n  \"mailingStreet1\": \"Dorado Streets 1\",\r\n  \"mailingStreet2\": \"Dorado Streets 2\",\r\n  \"mailingCity\": \"Dorado City\",\r\n  \"mailingState\": \"CA\",\r\n  \"mailingZip\": \"123123\",\r\n  \"contact1Name\": \"Tom Holland\",\r\n  \"contact1Phone\": \"99999999999\",\r\n  \"contact1Extension\": \"4444\",\r\n  \"contact2Name\": \"Don Bradman\",\r\n  \"contact2Phone\": \"2323232322\",\r\n  \"contact2Extension\": \"5555\",\r\n  \"amsProductVersionId\": \"a1a2e17f-ddbb-4aa7-8a9f-406f66463b28\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{reqUrl}}/api/agencies/"
							},
							"response": []
						},
						{
							"name": "returns 201 Created with minimal required fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code\r",
											"pm.test(\"POST Agency returns 201 created with minimal required fields\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"// Match response body with expected results\r",
											"pm.test(\"Verify response body\", () => {\r",
											"    const responseBody = pm.response.json()\r",
											"    const requestBody = JSON.parse(request.data)\r",
											"    pm.expect(requestBody[\"agencyName\"]).to.eql(responseBody[\"agencyName\"])\r",
											"    pm.expect(responseBody[\"alternateAgencyName\"]).to.eql(\"\")\r",
											"    pm.expect(requestBody[\"agencyPhone\"]).to.eql(responseBody[\"agencyPhone\"])\r",
											"    pm.expect(responseBody[\"agencyPhoneExtension\"]).to.eql(\"\")\r",
											"    pm.expect(requestBody[\"agencyEmail\"]).to.eql(responseBody[\"agencyEmail\"])\r",
											"    pm.expect(requestBody[\"locationStreet1\"]).to.eql(responseBody[\"locationStreet1\"])\r",
											"    pm.expect(responseBody[\"locationStreet2\"]).to.eql(\"\")\r",
											"    pm.expect(requestBody[\"locationCity\"]).to.eql(responseBody[\"locationCity\"])\r",
											"    pm.expect(requestBody[\"locationState\"]).to.eql(responseBody[\"locationState\"])\r",
											"    pm.expect(requestBody[\"locationZip\"]).to.eql(responseBody[\"locationZip\"])\r",
											"    pm.expect(responseBody[\"mailingStreet1\"]).to.eql(\"\")\r",
											"    pm.expect(responseBody[\"mailingStreet2\"]).to.eql(\"\")\r",
											"    pm.expect(responseBody[\"mailingCity\"]).to.eql(\"\")\r",
											"    pm.expect(responseBody[\"mailingState\"]).to.eql(\"\")\r",
											"    pm.expect(responseBody[\"mailingZip\"]).to.eql(\"\")\r",
											"    pm.expect(requestBody[\"amsProductVersionId\"]).to.eql(responseBody[\"amsProductVersionId\"])\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{globalAdminToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"agencyName\": \"OneSafe Automation\",\r\n  \"agencyPhone\": \"123123123\",\r\n  \"agencyEmail\": \"test@ivans.com\",\r\n  \"locationStreet1\": \"EL Dorado\",\r\n  \"locationCity\": \"San Francisco\",\r\n  \"locationState\": \"CA\",\r\n  \"locationZip\": \"94016\",\r\n  \"contact1Name\": \"Tom Holland\",\r\n  \"amsProductVersionId\": \"a1a2e17f-ddbb-4aa7-8a9f-406f66463b28\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{reqUrl}}/api/Agencies"
							},
							"response": []
						},
						{
							"name": "returns 403 Forbidden creating agency as non-permitted",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code\r",
											"pm.test(\"POST Agency returns 403 forbidden as non-permitted\", () => {\r",
											"        pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the user is non-permitted\", () => {\r",
											"    // Verify the user should not have \"add:agencies\" permission\r",
											"    const { Authorization: authToken } = pm.request.getHeaders()\r",
											"    const payload = authToken.split(\" \")[1].split(\".\")[1]\r",
											"    const { permissions } = JSON.parse(atob(payload))\r",
											"    pm.expect(permissions).to.not.include(\"add:agencies\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"        url: pm.environment.get(\"tokenUrl\"),\r",
											"        method: 'POST',\r",
											"        header: { \r",
											"            'Authorization': 'Basic ' + pm.environment.get(\"tokenClient\") \r",
											"        },\r",
											"        body: {\r",
											"          mode: 'urlencoded',\r",
											"          urlencoded: [\r",
											"            { key: \"grant_type\", value: \"password\", disabled: false },\r",
											"            { key: \"username\", value: pm.environment.get(\"agencyUser\"), disabled: false },\r",
											"            { key: \"password\", value: pm.environment.get(\"agencyUserPassword\"), disabled: false },\r",
											"            { key: \"scope\", value: pm.globals.get(\"allScopes\"), disabled: false }\r",
											"        ]\r",
											"      }\r",
											"    }, (err, res) => {\r",
											"        const { access_token } = res.json();\r",
											"        pm.request.addHeader({\r",
											"            key: \"Authorization\",\r",
											"            value: `Bearer ${access_token}`\r",
											"        })\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"agencyName\": \"OneSafe Automation\",\r\n  \"alternateAgencyName\": \"OneSafe\",\r\n  \"agencyPhone\": \"123123123\",\r\n  \"agencyPhoneExtension\": \"4444\",\r\n  \"agencyEmail\": \"test@ivans.com\",\r\n  \"locationStreet1\": \"EL Dorado\",\r\n  \"locationStreet2\": \"Californian Mountains\",\r\n  \"locationCity\": \"San Francisco\",\r\n  \"locationState\": \"CA\",\r\n  \"locationZip\": \"94016\",\r\n  \"mailingStreet1\": \"Dorado Streets 1\",\r\n  \"mailingStreet2\": \"Dorado Streets 2\",\r\n  \"mailingCity\": \"Dorado City\",\r\n  \"mailingState\": \"CA\",\r\n  \"mailingZip\": \"123123\",\r\n  \"contact1Name\": \"Tom Holland\",\r\n  \"contact1Phone\": \"99999999999\",\r\n  \"contact1Extension\": \"4444\",\r\n  \"contact2Name\": \"Don Bradman\",\r\n  \"contact2Phone\": \"2323232322\",\r\n  \"contact2Extension\": \"5555\",\r\n  \"amsProductVersionId\": \"a1a2e17f-ddbb-4aa7-8a9f-406f66463b28\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{reqUrl}}/api/Agencies"
							},
							"response": []
						},
						{
							"name": "returns 400 Bad Request without minimal required fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code\r",
											"pm.test(\"POST Agency returns 400 bad request without minimal required fields\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{globalAdminToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{reqUrl}}/api/Agencies"
							},
							"response": []
						},
						{
							"name": "returns 400 Bad Request with minimal required fields but wrong AMS Version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code\r",
											"pm.test(\"POST Agency returns 400 bad request with minimal required fields but the AMS Version that doesn't exist\", () => {\r",
											"   pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{globalAdminToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"agencyName\": \"OneSafe Automation\",\r\n  \"agencyPhone\": \"123123123\",\r\n  \"agencyEmail\": \"test@ivans.com\",\r\n  \"locationStreet1\": \"EL Dorado\",\r\n  \"locationCity\": \"San Francisco\",\r\n  \"locationState\": \"CA\",\r\n  \"locationZip\": \"94016\",\r\n  \"contact1Name\": \"Tom Holland\",\r\n  \"amsProductVersionId\": \"n1a2e17f-dibb-4aa7-8f9f-405f66463b20\"  // Wrong AMS Version here\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{reqUrl}}/api/Agencies"
							},
							"response": []
						},
						{
							"name": "returns 400 Bad Request with minimal required fields and agency phone/extension containing non-digit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST Agency returns 400 bad request with minimal required fields and agency phone/extension containing non-digit\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.expect(pm.response.json().message).to.include(\"invalid phone/extension\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{globalAdminToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"agencyName\": \"OneSafe Automation\",\r\n  \"agencyPhone\": \"xyz123123123xyz\",  // Contains non-digit characters\r\n  \"agencyPhoneExtension\": \"aa4444ee\",  // Contains non-digit characters\r\n  \"agencyEmail\": \"test@ivans.com\",\r\n  \"locationStreet1\": \"EL Dorado\",\r\n  \"locationCity\": \"San Francisco\",\r\n  \"locationState\": \"CA\",\r\n  \"locationZip\": \"94016\",\r\n  \"contact1Name\": \"Tom Holland\",\r\n  \"amsProductVersionId\": \"a1a2e17f-ddbb-4aa7-8a9f-406f66463b28\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{reqUrl}}/api/Agencies"
							},
							"response": []
						},
						{
							"name": "returns 400 Bad Request with minimal required fields and contact 1 phone/extension containing non-digit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST Agency returns 400 bad request with minimal required fields and contact 1 phone/extension containing non-digit\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.expect(pm.response.json().message).to.include(\"invalid phone/extension\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{globalAdminToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"agencyName\": \"OneSafe Automation\",\r\n  \"agencyPhone\": \"123123123\",\r\n  \"agencyEmail\": \"test@ivans.com\",\r\n  \"locationStreet1\": \"EL Dorado\",\r\n  \"locationCity\": \"San Francisco\",\r\n  \"locationState\": \"CA\",\r\n  \"locationZip\": \"94016\",\r\n  \"contact1Name\": \"Tom Holland\",\r\n  \"contact1Phone\": \"abc99999999999abc\",  // Contains non-digit characters\r\n  \"contact1Extension\": \"abc4444abc\",  // Contains non-digit characters\r\n  \"amsProductVersionId\": \"a1a2e17f-ddbb-4aa7-8a9f-406f66463b28\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{reqUrl}}/api/Agencies"
							},
							"response": []
						},
						{
							"name": "returns 400 Bad Request with minimal required fields and contact 2 phone/extension containing non-digit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST Agency returns 400 bad request with minimal required fields and contact 2 phone/extension containing non-digit\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.expect(pm.response.json().message).to.include(\"invalid phone/extension\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{globalAdminToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"agencyName\": \"OneSafe Automation\",\r\n  \"agencyPhone\": \"123123123\",\r\n  \"agencyEmail\": \"test@ivans.com\",\r\n  \"locationStreet1\": \"EL Dorado\",\r\n  \"locationCity\": \"San Francisco\",\r\n  \"locationState\": \"CA\",\r\n  \"locationZip\": \"94016\",\r\n  \"contact1Name\": \"Tom Holland\",\r\n  \"contact2Phone\": \"abc99999999999abc\",  // Contains non-digit characters\r\n  \"contact2Extension\": \"abc4444abc\",  // Contains non-digit characters\r\n  \"amsProductVersionId\": \"a1a2e17f-ddbb-4aa7-8a9f-406f66463b28\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{reqUrl}}/api/Agencies"
							},
							"response": []
						},
						{
							"name": "returns 400 Bad Request with minimal required fields and invalid locationState/mailingState code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST Agency returns 400 bad request with minimal required fields and invalid locationState/mailingState code\", () => {\r",
											"    pm.response.to.have.status(400)\r",
											"    // Verify state codes\r",
											"    const stateCodes = pm.environment.get(\"stateCodes\")\r",
											"    const { locationState, mailingState } = JSON.parse(request.data)\r",
											"    const validateState = stateCodes.includes(locationState) && stateCodes.includes(mailingState)\r",
											"    pm.expect(validateState).to.eql(false);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"        url: pm.environment.get(\"reqUrl\") + \"/api/StateCodes\",\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Authorization': 'Bearer ' + pm.environment.get(\"globalAdminToken\")\r",
											"        } \r",
											"    }, (err, res) => {\r",
											"        const stateData = res.json();\r",
											"        let stateCodes = [];\r",
											"        stateData.map(element => stateCodes.push(element[\"state\"]))\r",
											"        pm.environment.set(\"stateCodes\", stateCodes);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{globalAdminToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"agencyName\": \"OneSafe Automation\",\r\n  \"agencyPhone\": \"123123123\",\r\n  \"agencyEmail\": \"test@ivans.com\",\r\n  \"locationStreet1\": \"EL Dorado\",\r\n  \"locationCity\": \"San Francisco\",\r\n  \"locationState\": \"TY\",\r\n  \"mailingState\": \"GP\",\r\n  \"locationZip\": \"94016\",\r\n  \"contact1Name\": \"Tom Holland\",\r\n  \"amsProductVersionId\": \"a1a2e17f-ddbb-4aa7-8a9f-406f66463b28\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{reqUrl}}/api/Agencies"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const URL = pm.environment.get(\"tokenUrl\");",
									"const User = pm.environment.get(\"ivanGlobal\");",
									"const Pass = pm.environment.get(\"ivanPassword\");",
									"const BasicToken = pm.environment.get(\"ivanTokenClient\");",
									"const Scope = pm.environment.get(\"allScope\")",
									"const postRequest = {",
									"  url: URL,",
									"  method: 'POST',",
									"  timeout: 10,",
									"  header: {",
									"      \"Content-Type\": \"application/x-www-raw-urlencoded\",",
									"    \"Authorization\": \"Basic \"+ BasicToken,",
									"  },",
									"  body: {",
									"    mode: 'urlencoded',",
									"    urlencoded: [",
									"        {key: \"grant_type\", value: \"password\"},",
									"        {key:\"username\", value: User},",
									"        {key:\"Password\", value: Pass},",
									"        {key:\"scope\", value: Scope}",
									"    ]}",
									"};",
									"pm.environment.unset(\"ivanGlobalToken\");",
									"pm.sendRequest(postRequest, function (err, res) {",
									"    var responseJson = res.json();",
									"    console.log(responseJson);",
									"    pm.environment.set('ivanGlobalToken', responseJson['access_token']);",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Roles and Permissions",
			"item": [
				{
					"name": "Any User (here, Ivans User)",
					"item": [
						{
							"name": "return 200 Ok with roles details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    //pm.expect(jsonData).to.have.property(id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{Ivans_token}}",
										"type": "text"
									}
								],
								"url": "{{identityUrl}}/v1/roles"
							},
							"response": []
						},
						{
							"name": "return 200 Ok with permission details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    //pm.expect(jsonData).to.have.property(id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{Ivans_token}}",
										"type": "text"
									}
								],
								"url": "{{identityUrl}}/v1/permissions"
							},
							"response": []
						},
						{
							"name": "return 200 Ok with permission details for a role using role ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    //pm.expect(jsonData).to.have.property(id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{Ivans_token}}",
										"type": "text"
									}
								],
								"url": "{{identityUrl}}/v1/roles/0ec144c6-c761-4c07-b7a1-eb7516d847c9/permissions"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const URL = pm.environment.get(\"tokenUrl\");",
									"const User = pm.globals.get(\"ivanUser\");",
									"const Pass = pm.globals.get(\"ivanPassword\");",
									"const BasicToken = pm.environment.get(\"ivanTokenClient\");",
									"const Scope = pm.globals.get(\"identityscope\")",
									"const postRequest = {",
									"  url: URL,",
									"  method: 'POST',",
									"  timeout: 10,",
									"  header: {",
									"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
									"    \"Authorization\": \"Basic \" + BasicToken",
									"  },",
									"  body: {",
									"    mode: 'urlencoded',",
									"    urlencoded: [",
									"        {key: \"grant_type\", value: \"password\"},",
									"        {key:\"username\", value: User},",
									"        {key:\"Password\", value: Pass},",
									"        {key:\"scope\", value: Scope}",
									"    ]}",
									"};",
									"pm.environment.unset(\"Ivans_token\");",
									"pm.sendRequest(postRequest, function (err, res) {",
									"    var responseJson = res.json();",
									"    console.log(responseJson);",
									"    pm.environment.set('Ivans_token', responseJson['access_token']);",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Permissions",
					"item": [
						{
							"name": "Any User (here Elevated)",
							"item": [
								{
									"name": "permission A",
									"item": [
										{
											"name": "400 Bad Request with standard error format and message stating that this update is not permitted",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ivanGlobalElevatedToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\r\n\"fd05509a-1390-4d3f-868f-576d48f44532\"\r\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{identityUrl}}/v1/organizations/{{organizationId}}/users/{{userId}}/permissions"
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const URL = pm.environment.get(\"tokenUrl\");",
													"const User = pm.globals.get(\"ivanGlobalElevatedPermissionA\");",
													"const Pass = pm.globals.get(\"commonPassword\");",
													"const BasicToken = pm.environment.get(\"identityTokenClient\");",
													"const Scope = pm.globals.get(\"identityscope\")",
													"const postRequest = {",
													"  url: URL,",
													"  method: 'POST',",
													"  timeout: 10,",
													"  header: {",
													"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
													"    \"Authorization\": \"Basic \" + BasicToken",
													"  },",
													"  body: {",
													"    mode: 'urlencoded',",
													"    urlencoded: [",
													"        {key: \"grant_type\", value: \"password\"},",
													"        {key:\"username\", value: User},",
													"        {key:\"Password\", value: Pass},",
													"        {key:\"scope\", value: Scope}",
													"    ]}",
													"};",
													"pm.environment.unset(\"ivanGlobalElevatedToken\");",
													"pm.sendRequest(postRequest, function (err, res) {",
													"    var responseJson = res.json();",
													"    console.log(responseJson);",
													"    pm.environment.set('ivanGlobalElevatedToken', responseJson['access_token']);",
													"});"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "200 Ok with updated list of permission model",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivanGlobalElevatedToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\r\n\"fd05509a-1390-4d3f-868f-576d48f44532\",\r\n\"4d745441-20ee-4217-af45-ad058af147a2\"\r\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{identityUrl}}/v1/organizations/{{organizationId}}/users/{{userId}}/permissions"
									},
									"response": []
								},
								{
									"name": "404 Not Found with standard error format-update the permissions of any user on an organization that does not exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivanGlobalElevatedToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\r\n\"fd05509a-1390-4d3f-868f-576d48f44532\",\r\n\"4d745441-20ee-4217-af45-ad058af147a2\"\r\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{identityUrl}}/v1/organizations/{{organizationId}}/users/{{wrongUserId}}/permissions"
									},
									"response": []
								},
								{
									"name": "404 Not Found with standard error format-update the permissions of a user that does not exist on the organization i have access to",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivanGlobalElevatedToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\r\n\"fd05509a-1390-4d3f-868f-576d48f44532\",\r\n\"4d745441-20ee-4217-af45-ad058af147a2\"\r\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{identityUrl}}/v1/organizations/{{organizationId}}/users/{{wrongUserId}}/permissions"
									},
									"response": []
								},
								{
									"name": "400 Not Found with standard error format-includes a permission that is not part of the target user’s role",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivanGlobalElevatedToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\r\n\"dce000cc-27fd-488a-8bf0-371987d4030a\"\r\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{identityUrl}}/v1/organizations/{{organizationId}}/users/{{userId}}/permissions"
									},
									"response": []
								},
								{
									"name": "400 Not Found with standard error format-includes a non-existent permission",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivanGlobalElevatedToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\r\n[\r\n\"fd05509a-1390-4d3f-868f-576d48f44123\"\r\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{identityUrl}}/v1/organizations/{{organizationId}}/users/{{userId}}/permissions"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"ivanGlobalElevated\");",
											"const Pass = pm.globals.get(\"commonPassword\");",
											"const BasicToken = pm.environment.get(\"identityTokenClient\");",
											"const Scope = pm.globals.get(\"identityscope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"ivanGlobalElevatedToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('ivanGlobalElevatedToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Any User (here Permitted)",
							"item": [
								{
									"name": "permission A",
									"item": [
										{
											"name": "400 Bad Request with standard error format and message stating that this update is not permitted",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ivanGlobalElevatedToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\r\n\"fd05509a-1390-4d3f-868f-576d48f44532\"\r\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{identityUrl}}/v1/organizations/{{organizationId}}/users/{{userId}}/permissions"
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const URL = pm.environment.get(\"tokenUrl\");",
													"const User = pm.globals.get(\"ivanGlobalPermittedPermissionA\");",
													"const Pass = pm.globals.get(\"commonPassword\");",
													"const BasicToken = pm.environment.get(\"identityTokenClient\");",
													"const Scope = pm.globals.get(\"identityscope\")",
													"const postRequest = {",
													"  url: URL,",
													"  method: 'POST',",
													"  timeout: 10,",
													"  header: {",
													"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
													"    \"Authorization\": \"Basic \" + BasicToken",
													"  },",
													"  body: {",
													"    mode: 'urlencoded',",
													"    urlencoded: [",
													"        {key: \"grant_type\", value: \"password\"},",
													"        {key:\"username\", value: User},",
													"        {key:\"Password\", value: Pass},",
													"        {key:\"scope\", value: Scope}",
													"    ]}",
													"};",
													"pm.environment.unset(\"ivanGlobalPermittedToken\");",
													"pm.sendRequest(postRequest, function (err, res) {",
													"    var responseJson = res.json();",
													"    console.log(responseJson);",
													"    pm.environment.set('ivanGlobalPermittedToken', responseJson['access_token']);",
													"});"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "200 Ok with updated list of permission model",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivansGlobalPermittedToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\r\n\"fd05509a-1390-4d3f-868f-576d48f44532\",\r\n\"4d745441-20ee-4217-af45-ad058af147a2\"\r\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{identityUrl}}/v1/organizations/{{organizationId}}/users/{{userId}}/permissions"
									},
									"response": []
								},
								{
									"name": "401 Unauthorized with standard error format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivansGlobalPermittedToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\r\n\"fd05509a-1390-4d3f-868f-576d48f44532\",\r\n\"4d745441-20ee-4217-af45-ad058af147a2\"\r\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{identityUrl}}/v1/organizations/{{agntOrgId}}/users/{{agntUserId}}/permissions"
									},
									"response": []
								},
								{
									"name": "401 Not Found with standard error format-update the permissions of any user on an organization that does not exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivansGlobalPermittedToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\r\n\"fd05509a-1390-4d3f-868f-576d48f44532\",\r\n\"4d745441-20ee-4217-af45-ad058af147a2\"\r\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{identityUrl}}/v1/organizations/{{organizationId}}/users/{{wrongUserId}}/permissions"
									},
									"response": []
								},
								{
									"name": "404 Not Found with standard error format-update the permissions of a user that does not exist on the organization i have access to",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivansGlobalPermittedToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\r\n\"fd05509a-1390-4d3f-868f-576d48f44532\",\r\n\"4d745441-20ee-4217-af45-ad058af147a2\"\r\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{identityUrl}}/v1/organizations/{{organizationId}}/users/{{wrongUserId}}/permissions"
									},
									"response": []
								},
								{
									"name": "400 Not Found with standard error format-includes a permission that is not part of the target user’s role",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivansGlobalPermittedToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\r\n\"dce000cc-27fd-488a-8bf0-371987d4030a\"\r\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{identityUrl}}/v1/organizations/{{organizationId}}/users/{{userId}}/permissions"
									},
									"response": []
								},
								{
									"name": "400 Not Found with standard error format-includes a non-existent permission",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivansGlobalPermittedToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\r\n[\r\n\"fd05509a-1390-4d3f-868f-576d48f44123\"\r\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{identityUrl}}/v1/organizations/{{organizationId}}/users/{{userId}}/permissions"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"ivanGlobalPermitted\");",
											"const Pass = pm.globals.get(\"commonPassword\");",
											"const BasicToken = pm.environment.get(\"identityTokenClient\");",
											"const Scope = pm.globals.get(\"identityscope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"ivansGlobalPermittedToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('ivansGlobalPermittedToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Any User (here Non-Elevated, Non-Permitted)",
							"item": [
								{
									"name": "403 Forbidden-update the permissions of any user on any organization",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivansGlobalPermittedToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\r\n\"fd05509a-1390-4d3f-868f-576d48f44532\",\r\n\"4d745441-20ee-4217-af45-ad058af147a2\"\r\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{identityUrl}}/v1/organizations/{{agntOrgId}}/users/{{agntUserId}}/permissions"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"carrierAdmin\");",
											"const Pass = pm.globals.get(\"carrierPassword\");",
											"const BasicToken = pm.environment.get(\"carrierTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"carrierAdminToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('carrierAdminToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Mailboxes",
			"item": [
				{
					"name": "Agency User",
					"item": [
						{
							"name": "ContentTypeFilter",
							"item": [
								{
									"name": "GET",
									"item": [
										{
											"name": "GET 400 for Invalid mailbox name",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"  pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Test data type of the response\", () => {\r",
															"  pm.expect(responseJson).to.be.an(\"object\");\r",
															"})\r",
															"\r",
															"pm.test(\"Verify the error message\", () => {\r",
															"   pm.expect(responseJson.message).to.eql(\"Invalid mailbox identifier\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyUserToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"disabled": true
													},
													{
														"key": "",
														"value": "openid file_transfer trading_partners exchange csio_broker producers csio_polling bookrolls",
														"disabled": true
													}
												],
												"url": "{{reqUrl}}/api/mailboxes/{{invalidMailboxId}}/contenttypefilters"
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const URL = pm.environment.get(\"tokenUrl\")",
													"const User = pm.globals.get(\"agencyUser\");",
													"const Pass =pm.globals.get(\"agencyPassword\");",
													"const BasicToken = pm.environment.get(\"ivanTokenClient\");",
													"const Scope = pm.globals.get(\"internalScope\")",
													"",
													"const postRequest = {",
													"  url: URL,",
													"  method: 'POST',",
													"  timeout: 10,",
													"  header: {",
													"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
													"    \"Authorization\": \"Basic \" + BasicToken",
													"  },",
													"  body: {",
													"    mode: 'urlencoded',",
													"    urlencoded: [",
													"        {key: \"grant_type\", value: \"password\"},",
													"        {key:\"username\", value: User},",
													"        {key:\"Password\", value: Pass},",
													"        {key:\"scope\", value: Scope}",
													"    ]}",
													"};",
													"pm.environment.unset(\"agencyUserToken\");",
													"pm.sendRequest(postRequest, function (err, res) {",
													"    var responseJson = res.json();",
													"    console.log(\"this is the response from the json \",responseJson);",
													"    pm.environment.set('agencyUserToken', responseJson['access_token']);",
													"});"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "PUT",
									"item": [
										{
											"name": "PUT 403 without Exchange scope",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const jsonData = pm.response.json()\r",
															"pm.test(\"Status code is 403\", function () {\r",
															"  pm.response.to.have.status(403);\r",
															"});\r",
															"pm.test(\"Verify the error message\", function () {\r",
															"  pm.expect(jsonData.message).to.eql(\"insufficient_scope\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const URL = pm.environment.get(\"tokenUrl\")\r",
															"const User = pm.globals.get(\"agencyUser\");\r",
															"const Pass =pm.globals.get(\"agencyPassword\");\r",
															"const BasicToken = pm.environment.get(\"agencyTokenClient\");\r",
															"const Scope = pm.globals.get(\"allScope\")\r",
															"\r",
															"console.log(URL)\r",
															"const postRequest = {\r",
															"  url: URL,\r",
															"  method: 'POST',\r",
															"  timeout: 10,\r",
															"  header: {\r",
															"    \"Content-Type\": \"application/x-www-raw-urlencoded\",\r",
															"    \"Authorization\": \"Basic \" + BasicToken\r",
															"  },\r",
															"  body: {\r",
															"    mode: 'urlencoded',\r",
															"    urlencoded: [\r",
															"        {key: \"grant_type\", value: \"password\"},\r",
															"        {key:\"username\", value: User},\r",
															"        {key:\"Password\", value: Pass},\r",
															"        {key:\"scope\", value: Scope}\r",
															"    ]}\r",
															"};\r",
															"pm.environment.unset(\"agencyUserToken\");\r",
															"pm.sendRequest(postRequest, function (err, res) {\r",
															"    var responseJson = res.json();\r",
															"    console.log(\"this is the response from the json \",responseJson);\r",
															"    pm.environment.set('agencyUserToken', responseJson['access_token']);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyUserToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"policy\": true,\r\n  \"dbcd\": true,\r\n  \"claims\": true,\r\n  \"eDoc\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{reqUrl}}/api/mailboxes/{{agenctMailboxID}}/contenttypefilters"
											},
											"response": []
										},
										{
											"name": "PUT 200 for update and reset filter",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"  pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Test data type of the response\", () => {\r",
															"  pm.expect(responseJson).to.be.an(\"object\");\r",
															"})\r",
															"\r",
															"pm.test(\"Check keys of request body\",()=> {\r",
															"pm.expect(responseJson).to.have.keys([\"policy\",\"dbcd\",\"claims\",\"eDoc\"]);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const URL = pm.environment.get(\"tokenUrl\")\r",
															"const User = pm.globals.get(\"agencyUser\");\r",
															"const Pass = pm.globals.get(\"agencyPassword\")\r",
															"const BasicToken = pm.environment.get(\"ivanTokenClient\");\r",
															"const Scope = pm.globals.get(\"internalScope\")\r",
															"\r",
															"const postRequest = {\r",
															"  url: URL,\r",
															"  method: 'POST',\r",
															"  timeout: 10,\r",
															"  header: {\r",
															"    \"Content-Type\": \"application/x-www-raw-urlencoded\",\r",
															"    \"Authorization\": \"Basic \" + BasicToken\r",
															"  },\r",
															"  body: {\r",
															"    mode: 'urlencoded',\r",
															"    urlencoded: [\r",
															"        {key: \"grant_type\", value: \"password\"},\r",
															"        {key:\"username\", value: User},\r",
															"        {key:\"Password\", value: Pass},\r",
															"        {key:\"scope\", value: Scope}\r",
															"    ]}\r",
															"};\r",
															"pm.environment.unset(\"agencyUserToken\");\r",
															"pm.sendRequest(postRequest, function (err, res) {\r",
															"    var responseJson = res.json();\r",
															"    console.log(\"this is the response from the json \",responseJson);\r",
															"    pm.environment.set('agencyUserToken', responseJson['access_token']);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyUserToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"policy\": true,\r\n  \"dbcd\": true,\r\n  \"claims\": true,\r\n  \"eDoc\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{reqUrl}}/api/mailboxes/{{agencyMailboxotherID}}/contenttypefilters"
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Mailboxes",
							"item": [
								{
									"name": "GET returns 200OK  with paginated list of mailboxes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Verify data in response\", () => {\r",
													"    const responseBody = pm.response.json()\r",
													"    responseBody.map(data => pm.expect(data).to.have.all.keys(\"badLoginAttempts\", \"ibmMachineAddress\", \"migratedToMembership\",\"account\",\"userId\"))\r",
													"})\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/organizations/{{agencyOrgID}}/mailboxes"
									},
									"response": []
								},
								{
									"name": "GET-401 returns 401 for non-existent org",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/organizations/{{nonExistentOrgID}}/mailboxes"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"agencyUser\");",
											"const Pass = pm.globals.get(\"agencyPassword\");",
											"const BasicToken = pm.environment.get(\"ivanTokenClient\");",
											"const Scope = pm.globals.get(\"internalScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"agencyUserToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('agencyUserToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Policies",
							"item": [
								{
									"name": "200 GET Mailbox Policies should return all policies",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyUserToken}}"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/mailboxes/y7773.yx50vnv/policies?searchText=AUTOP",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"mailboxes",
												"y7773.yx50vnv",
												"policies"
											],
											"query": [
												{
													"key": "searchText",
													"value": "AUTOP"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "401 GET Mailbox policies should return 401 for unauthorized mailbox",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"pm.test(\"Body is as expected\", () => {\r",
													"    let res = pm.response.json()\r",
													"    \r",
													"    pm.expect(res).to.have.property(\"type\")\r",
													"    pm.expect(res).to.have.property(\"title\")\r",
													"    pm.expect(res).to.have.property(\"status\")\r",
													"    pm.expect(res).to.have.property(\"traceId\")\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyUserToken}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": {
											"raw": "{{reqUrl}}/api/mailboxes/y0036.yx50SE5/policies?searchText=texta",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"mailboxes",
												"y0036.yx50SE5",
												"policies"
											],
											"query": [
												{
													"key": "searchText",
													"value": "texta"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "404 GET Mailbox policies should return 404 for mailbox does not exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"pm.test(\"Body is as expected\", () => {\r",
													"    let res = pm.response.json()\r",
													"    \r",
													"    pm.expect(res).to.have.property(\"type\")\r",
													"    pm.expect(res).to.have.property(\"title\")\r",
													"    pm.expect(res).to.have.property(\"status\")\r",
													"    pm.expect(res).to.have.property(\"traceId\")\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyUserToken}}"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/mailboxes/y7773.yx5vnv/policies?searchText=text",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"mailboxes",
												"y7773.yx5vnv",
												"policies"
											],
											"query": [
												{
													"key": "searchText",
													"value": "text"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"agencyUser\");",
											"const Pass = pm.globals.get(\"agencyPassword\");",
											"const BasicToken = pm.environment.get(\"ivanTokenClient\");",
											"const Scope = pm.globals.get(\"internalScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"agencyUserToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('agencyUserToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "Agency Sys User",
					"item": [
						{
							"name": "Change Password",
							"item": [
								{
									"name": "Agency Sys User - 200ok for POST Successful password change for all mixed.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Response is as Expected\", () => {\r",
													"    let res = pm.response.json()\r",
													"    \r",
													"    pm.expect(res).to.have.property(\"name\")\r",
													"    pm.expect(res).to.have.property(\"action\")\r",
													"    pm.expect(res).to.have.property(\"message\")\r",
													"    \r",
													"})\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencySysUserToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"newPassword\": \"Password@123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{reqUrl}}/api/mailboxes/{{agencyMailboxotherID}}/ChangePassword"
									},
									"response": []
								},
								{
									"name": "GET 401- POST Unauthorized due to other accounts",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"const schema={\r",
													"    \r",
													"    \"name\": \"ChangePassword\",\r",
													"    \"action\": \"POST ChangeMailboxPasswordAsync\",\r",
													"    \"message\": \"Provided account does not have access to mailbox.\"\r",
													"\r",
													"}\r",
													"pm.test(\"Verify data in response\", () => {\r",
													"    \r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"    \r",
													"\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencySysUserToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"newPassword\": \"Password123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{reqUrl}}/api/mailboxes/{{agencyMailboxYX50SE5ID}}/ChangePassword"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"agencySysUser\");",
											"const Pass = pm.globals.get(\"agencyPassword\");",
											"const BasicToken = pm.environment.get(\"agencyTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"agencySysUserToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('agencySysUserToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "ContetntTypeFilter",
							"item": [
								{
									"name": "GET",
									"item": [
										{
											"name": "GET- 200 OK contentTypeFilters returns filters",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const jsonData = pm.response.json();\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Test data type of the response\", () => {\r",
															"  pm.expect(jsonData).to.be.an(\"object\");\r",
															"})\r",
															"\r",
															"pm.test(\"Check keys of request body\",()=> {\r",
															"pm.expect(jsonData).to.have.keys([\"policy\",\"dbcd\",\"claims\",\"eDoc\"]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencySysUserToken}}"
													}
												],
												"url": "{{reqUrl}}/api/mailboxes/{{agencyMailboxyx50vnv}}/contenttypefilters"
											},
											"response": []
										},
										{
											"name": "GET 200 for content type filter",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"  pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Test data type of the response\", () => {\r",
															"  pm.expect(responseJson).to.be.an(\"object\");\r",
															"})\r",
															"\r",
															"pm.test(\"Check keys of request body\",()=> {\r",
															"pm.expect(responseJson).to.have.keys([\"policy\",\"dbcd\",\"claims\",\"eDoc\"]);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const URL = pm.environment.get(\"tokenUrl\")\r",
															"const User = pm.environment.get(\"agencySysUser\");\r",
															"const Pass = pm.environment.get(\"agencyUserPassword\");\r",
															"const BasicToken = pm.environment.get(\"ivanTokenClient\");\r",
															"const Scope = pm.environment.get(\"internalScope\")\r",
															"\r",
															"console.log(URL)\r",
															"const postRequest = {\r",
															"  url: URL,\r",
															"  method: 'POST',\r",
															"  timeout: 10,\r",
															"  header: {\r",
															"    \"Content-Type\": \"application/x-www-raw-urlencoded\",\r",
															"    \"Authorization\": \"Basic \" + BasicToken\r",
															"  },\r",
															"  body: {\r",
															"    mode: 'urlencoded',\r",
															"    urlencoded: [\r",
															"        {key: \"grant_type\", value: \"password\"},\r",
															"        {key:\"username\", value: User},\r",
															"        {key:\"Password\", value: Pass},\r",
															"        {key:\"scope\", value: Scope}\r",
															"    ]}\r",
															"};\r",
															"pm.environment.unset(\"agencySysUsertoken_withscope\");\r",
															"pm.sendRequest(postRequest, function (err, res) {\r",
															"    var responseJson = res.json();\r",
															"    console.log(\"this is the response from the json \",responseJson);\r",
															"    pm.environment.set('agencySysUsertoken_withscope', responseJson['access_token']);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencySysUserToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"disabled": true
													},
													{
														"key": "",
														"value": "openid file_transfer trading_partners exchange csio_broker producers csio_polling bookrolls",
														"disabled": true
													}
												],
												"url": "{{reqUrl}}/api/mailboxes/{{agencyMailboxotherID}}/contenttypefilters"
											},
											"response": []
										},
										{
											"name": "GET 401 for unauthorized mailbox id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 401\", function () {\r",
															"  pm.response.to.have.status(401);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencySysUserToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"disabled": true
													},
													{
														"key": "",
														"value": "openid file_transfer trading_partners exchange csio_broker producers csio_polling bookrolls",
														"disabled": true
													}
												],
												"url": "{{reqUrl}}/api/mailboxes/{{agencyMailboxYX50SE5ID}}/contenttypefilters"
											},
											"response": []
										},
										{
											"name": "GET -403ok - contentTypeFilters returns 403 without Exchange Scope",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const URL = pm.environment.get(\"tokenUrl\")\r",
															"const User = pm.globals.get(\"agencySysUser\");\r",
															"const Pass =pm.globals.get(\"agencyPassword\");\r",
															"const BasicToken = pm.environment.get(\"agencyTokenClient\");\r",
															"const Scope = pm.globals.get(\"allScope\")\r",
															"\r",
															"console.log(URL)\r",
															"const postRequest = {\r",
															"  url: URL,\r",
															"  method: 'POST',\r",
															"  timeout: 10,\r",
															"  header: {\r",
															"    \"Content-Type\": \"application/x-www-raw-urlencoded\",\r",
															"    \"Authorization\": \"Basic \" + BasicToken\r",
															"  },\r",
															"  body: {\r",
															"    mode: 'urlencoded',\r",
															"    urlencoded: [\r",
															"        {key: \"grant_type\", value: \"password\"},\r",
															"        {key:\"username\", value: User},\r",
															"        {key:\"Password\", value: Pass},\r",
															"        {key:\"scope\", value: Scope}\r",
															"    ]}\r",
															"};\r",
															"pm.environment.unset(\"agencySysUserToken\");\r",
															"pm.sendRequest(postRequest, function (err, res) {\r",
															"    var responseJson = res.json();\r",
															"    console.log(\"this is the response from the json \",responseJson);\r",
															"    pm.environment.set('agencySysUserToken', responseJson['access_token']);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const jsonData = pm.response.json()\r",
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															"pm.test(\"Verify the error message\", function () {\r",
															"  pm.expect(jsonData.message).to.eql(\"insufficient_scope\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencySysUserToken}}"
													}
												],
												"url": "{{reqUrl}}/api/mailboxes/{{agencyMailboxyx50vnv}}/contenttypefilters"
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const URL = pm.environment.get(\"tokenUrl\")",
													"const User = pm.globals.get(\"agencySysUser\");",
													"const Pass =pm.globals.get(\"agencyPassword\");",
													"const BasicToken = pm.environment.get(\"ivanTokenClient\");",
													"const Scope = pm.globals.get(\"internalScope\")",
													"",
													"console.log(URL)",
													"const postRequest = {",
													"  url: URL,",
													"  method: 'POST',",
													"  timeout: 10,",
													"  header: {",
													"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
													"    \"Authorization\": \"Basic \" + BasicToken",
													"  },",
													"  body: {",
													"    mode: 'urlencoded',",
													"    urlencoded: [",
													"        {key: \"grant_type\", value: \"password\"},",
													"        {key:\"username\", value: User},",
													"        {key:\"Password\", value: Pass},",
													"        {key:\"scope\", value: Scope}",
													"    ]}",
													"};",
													"pm.environment.unset(\"agencySysUserToken\");",
													"pm.sendRequest(postRequest, function (err, res) {",
													"    var responseJson = res.json();",
													"    console.log(\"this is the response from the json \",responseJson);",
													"    pm.environment.set('agencySysUserToken', responseJson['access_token']);",
													"});"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "PUT",
									"item": [
										{
											"name": "PUT 403 without Exchange scope",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const jsonData = pm.response.json();\r",
															"pm.test(\"Status code is 403\", function () {\r",
															"  pm.response.to.have.status(403);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify the error message\", function () {\r",
															"  pm.expect(jsonData.message).to.eql(\"insufficient_scope\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const URL = pm.environment.get(\"tokenUrl\")\r",
															"const User = pm.globals.get(\"agencySysUser\");\r",
															"const Pass =pm.globals.get(\"agencyPassword\");\r",
															"const BasicToken = pm.environment.get(\"ivanTokenClient\");\r",
															"const Scope = pm.globals.get(\"allScope\")\r",
															"\r",
															"console.log(URL)\r",
															"const postRequest = {\r",
															"  url: URL,\r",
															"  method: 'POST',\r",
															"  timeout: 10,\r",
															"  header: {\r",
															"    \"Content-Type\": \"application/x-www-raw-urlencoded\",\r",
															"    \"Authorization\": \"Basic \" + BasicToken\r",
															"  },\r",
															"  body: {\r",
															"    mode: 'urlencoded',\r",
															"    urlencoded: [\r",
															"        {key: \"grant_type\", value: \"password\"},\r",
															"        {key:\"username\", value: User},\r",
															"        {key:\"Password\", value: Pass},\r",
															"        {key:\"scope\", value: Scope}\r",
															"    ]}\r",
															"};\r",
															"pm.environment.unset(\"agencySysUserToken\");\r",
															"pm.sendRequest(postRequest, function (err, res) {\r",
															"    var responseJson = res.json();\r",
															"    console.log(\"this is the response from the json \",responseJson);\r",
															"    pm.environment.set('agencySysUserToken', responseJson['access_token']);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencySysUserToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"policy\": true,\r\n  \"dbcd\": true,\r\n  \"claims\": true,\r\n  \"eDoc\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{reqUrl}}/api/mailboxes/{{agencyMailboxyx50vnv}}/contenttypefilters"
											},
											"response": []
										},
										{
											"name": "PUT 200 for update and reset filter",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"  pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const URL = pm.environment.get(\"tokenUrl\")\r",
															"const User = pm.globals.get(\"agencySysUser\");\r",
															"const Pass = pm.globals.get(\"agencyPassword\")\r",
															"const BasicToken = pm.environment.get(\"ivanTokenClient\");\r",
															"const Scope = pm.globals.get(\"internalScope\")\r",
															"\r",
															"const postRequest = {\r",
															"  url: URL,\r",
															"  method: 'POST',\r",
															"  timeout: 10,\r",
															"  header: {\r",
															"    \"Content-Type\": \"application/x-www-raw-urlencoded\",\r",
															"    \"Authorization\": \"Basic \" + BasicToken\r",
															"  },\r",
															"  body: {\r",
															"    mode: 'urlencoded',\r",
															"    urlencoded: [\r",
															"        {key: \"grant_type\", value: \"password\"},\r",
															"        {key:\"username\", value: User},\r",
															"        {key:\"Password\", value: Pass},\r",
															"        {key:\"scope\", value: Scope}\r",
															"    ]}\r",
															"};\r",
															"pm.environment.unset(\"agencySysUserToken\");\r",
															"pm.sendRequest(postRequest, function (err, res) {\r",
															"    var responseJson = res.json();\r",
															"    console.log(\"this is the response from the json \",responseJson);\r",
															"    pm.environment.set('agencySysUserToken', responseJson['access_token']);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencySysUserToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"policy\": true,\r\n  \"dbcd\": true,\r\n  \"claims\": true,\r\n  \"eDoc\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{reqUrl}}/api/mailboxes/{{agencyMailboxotherID}}/contenttypefilters"
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Mailboxes",
							"item": [
								{
									"name": "GET returns 200OK  with paginated list of mailboxes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Verify data in response\", () => {\r",
													"    const responseBody = pm.response.json()\r",
													"    responseBody.map(data => pm.expect(data).to.have.all.keys(\"badLoginAttempts\", \"ibmMachineAddress\", \"migratedToMembership\",\"account\",\"userId\"))\r",
													"})\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencySysUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/organizations/{{agencyOrgID}}/mailboxes"
									},
									"response": []
								},
								{
									"name": "GET 400- Return 400 for incorrect Org GUID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencySysUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/organizations/fake/mailboxes"
									},
									"response": []
								},
								{
									"name": "GET-401 returns 401 for non-existent org",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencySysUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/organizations/{{nonExistentOrgID}}/mailboxes"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"agencySysUser\");",
											"const Pass = pm.globals.get(\"agencyPassword\");",
											"const BasicToken = pm.environment.get(\"ivanTokenClient\");",
											"const Scope = pm.globals.get(\"internalScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"agencySysUserToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('agencySysUserToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Policies",
							"item": [
								{
									"name": "200 GET Mailbox Policies should return all policies",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencySysUserToken}}"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/mailboxes/y7773.yx50vnv/policies?searchText=null",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"mailboxes",
												"y7773.yx50vnv",
												"policies"
											],
											"query": [
												{
													"key": "searchText",
													"value": "null"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "401 GET Mailbox policies should return 401 for unauthorized mailbox",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"pm.test(\"Body is as expected\", () => {\r",
													"    let res = pm.response.json()\r",
													"    \r",
													"    pm.expect(res).to.have.property(\"type\")\r",
													"    pm.expect(res).to.have.property(\"title\")\r",
													"    pm.expect(res).to.have.property(\"status\")\r",
													"    pm.expect(res).to.have.property(\"traceId\")\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencySysUserToken}}"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/mailboxes/y0036.yx50SE5/policies?searchText=texta",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"mailboxes",
												"y0036.yx50SE5",
												"policies"
											],
											"query": [
												{
													"key": "searchText",
													"value": "texta"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "404 GET Mailbox policies should return 404 for mailbox does not exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"pm.test(\"Body is as expected\", () => {\r",
													"    let res = pm.response.json()\r",
													"    \r",
													"    pm.expect(res).to.have.property(\"type\")\r",
													"    pm.expect(res).to.have.property(\"title\")\r",
													"    pm.expect(res).to.have.property(\"status\")\r",
													"    pm.expect(res).to.have.property(\"traceId\")\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencySysUserToken}}"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/mailboxes/y7773.yx5vnv/policies?searchText=text",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"mailboxes",
												"y7773.yx5vnv",
												"policies"
											],
											"query": [
												{
													"key": "searchText",
													"value": "text"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 GET Mailbox Policies should return 200 for blank results",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencySysUserToken}}"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/mailboxes/y7773.yx50vnv/policies?searchText=null",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"mailboxes",
												"y7773.yx50vnv",
												"policies"
											],
											"query": [
												{
													"key": "searchText",
													"value": "null"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"agencySysUser\");",
											"const Pass = pm.globals.get(\"agencyPassword\");",
											"const BasicToken = pm.environment.get(\"agencyTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"agencySysUserToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('agencySysUserToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "Agency Mailbox",
					"item": [
						{
							"name": "Change Password",
							"item": [
								{
									"name": "GET 401- POST Unauthorized due to other accounts",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"const schema={\r",
													"    \r",
													"    \"name\": \"ChangePassword\",\r",
													"    \"action\": \"POST ChangeMailboxPasswordAsync\",\r",
													"    \"message\": \"Provided account does not have access to mailbox.\"\r",
													"\r",
													"}\r",
													"pm.test(\"Verify data in response\", () => {\r",
													"    \r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"    \r",
													"\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyMailboxOtherToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"newPassword\": \"Password@322\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{reqUrl}}/api/mailboxes/{{agencyMailboxYX50SE5ID}}/ChangePassword"
									},
									"response": []
								},
								{
									"name": "GET 200ok for POST Successful password change for all mixed.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Response is as Expected\", () => {\r",
													"    let res = pm.response.json()\r",
													"    \r",
													"    pm.expect(res).to.have.property(\"name\")\r",
													"    pm.expect(res).to.have.property(\"action\")\r",
													"    pm.expect(res).to.have.property(\"message\")\r",
													"    \r",
													"})\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyMailboxOtherToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"newPassword\": \"Password@123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{reqUrl}}/api/mailboxes/{{agencyMailboxotherID}}/ChangePassword"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = \"Y7773.OTHER\";",
											"const Pass =\"Password@123\";",
											"const BasicToken = pm.environment.get(\"agencyTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"agencyMailboxOtherToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('agencyMailboxOtherToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Mailboxes",
							"item": [
								{
									"name": "GET returns 200OK  with paginated list of mailboxes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify data in response\", () => {\r",
													"    const responseBody = pm.response.json()\r",
													"    responseBody.map(data => pm.expect(data).to.have.all.keys(\"badLoginAttempts\", \"ibmMachineAddress\", \"migratedToMembership\",\"account\",\"userId\"))\r",
													"})\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyMailboxotherToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/organizations/{{agencyOrgID}}/mailboxes"
									},
									"response": []
								},
								{
									"name": "GET-401 returns 401 for non-existent org",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyMailboxotherToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/organizations/{{nonExistentOrgID}}/mailboxes"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"agencyMailboxyx50vnv\");",
											"const Pass = pm.globals.get(\"agencyMailboxPassword\");",
											"const BasicToken = pm.environment.get(\"ivanTokenClient\");",
											"const Scope = pm.globals.get(\"internalScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"agencyMailboxotherToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('agencyMailboxotherToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Policies",
							"item": [
								{
									"name": "200  GET Mailbox Policies should return all policies",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyMailboxToken}}"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/mailboxes/y7773.yx50vnv/policies?searchText=AUTOP",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"mailboxes",
												"y7773.yx50vnv",
												"policies"
											],
											"query": [
												{
													"key": "searchText",
													"value": "AUTOP"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "404 GET Mailbox policies should return 404 for mailbox does not exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"pm.test(\"Body is as expected\", () => {\r",
													"    let res = pm.response.json()\r",
													"    \r",
													"    pm.expect(res).to.have.property(\"type\")\r",
													"    pm.expect(res).to.have.property(\"title\")\r",
													"    pm.expect(res).to.have.property(\"status\")\r",
													"    pm.expect(res).to.have.property(\"traceId\")\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyMailboxToken}}"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/mailboxes/y7773.yx5vnv/policies?searchText=text",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"mailboxes",
												"y7773.yx5vnv",
												"policies"
											],
											"query": [
												{
													"key": "searchText",
													"value": "text"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "401 GET Mailbox policies should return 401 for unauthorized mailbox",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"pm.test(\"Body is as expected\", () => {\r",
													"    let res = pm.response.json()\r",
													"    \r",
													"    pm.expect(res).to.have.property(\"type\")\r",
													"    pm.expect(res).to.have.property(\"title\")\r",
													"    pm.expect(res).to.have.property(\"status\")\r",
													"    pm.expect(res).to.have.property(\"traceId\")\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyMailboxToken}}"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/mailboxes/y0036.yx50SE5/policies?searchText=texta",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"mailboxes",
												"y0036.yx50SE5",
												"policies"
											],
											"query": [
												{
													"key": "searchText",
													"value": "texta"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"agencyMailboxyx50vnv\");",
											"const Pass = pm.globals.get(\"agencyMailboxPassword\");",
											"const BasicToken = pm.environment.get(\"agencyTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"agencyMailboxToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('agencyMailboxToken', responseJson['access_token']);",
											"    });"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "Agency Admin",
					"item": [
						{
							"name": "ContentTypeFilter",
							"item": [
								{
									"name": "PUT",
									"item": [
										{
											"name": "PUT 200 for update and reset filter",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"  pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Test data type of the response\", () => {\r",
															"  pm.expect(responseJson).to.be.an(\"object\");\r",
															"})\r",
															"\r",
															"pm.test(\"Check keys of request body\",()=> {\r",
															"pm.expect(responseJson).to.have.keys([\"policy\",\"dbcd\",\"claims\",\"eDoc\"]);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{agencyadminToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"policy\": true,\r\n  \"dbcd\": true,\r\n  \"claims\": true,\r\n  \"eDoc\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{reqUrl}}/api/mailboxes/{{agencyMailboxotherID}}/contenttypefilters"
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const URL = pm.environment.get(\"tokenUrl\")",
													"const User = pm.globals.get(\"agencyAdmin\");",
													"const Pass = pm.globals.get(\"agencyPassword\");",
													"const BasicToken = pm.environment.get(\"ivanTokenClient\");",
													"const Scope = pm.globals.get(\"internalScope\")",
													"",
													"const postRequest = {",
													"  url: URL,",
													"  method: 'POST',",
													"  timeout: 10,",
													"  header: {",
													"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
													"    \"Authorization\": \"Basic \" + BasicToken",
													"  },",
													"  body: {",
													"    mode: 'urlencoded',",
													"    urlencoded: [",
													"        {key: \"grant_type\", value: \"password\"},",
													"        {key:\"username\", value: User},",
													"        {key:\"Password\", value: Pass},",
													"        {key:\"scope\", value: Scope}",
													"    ]}",
													"};",
													"pm.environment.unset(\"agencyadminToken\");",
													"pm.sendRequest(postRequest, function (err, res) {",
													"    var responseJson = res.json();",
													"    console.log(\"this is the response from the json \",responseJson);",
													"    pm.environment.set('agencyadminToken', responseJson['access_token']);",
													"});"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						},
						{
							"name": "Policies",
							"item": [
								{
									"name": "200 GET Mailbox Policies should return all policies",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyAdminToken}}"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/mailboxes/Y7773.YX50VNV/policies?searchText=AUTOP",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"mailboxes",
												"Y7773.YX50VNV",
												"policies"
											],
											"query": [
												{
													"key": "searchText",
													"value": "AUTOP"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 GET Mailbox policies should return 400 for invalid mailbox ID and format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Body is as expected\", () => {\r",
													"    let res = pm.response.json()\r",
													"    \r",
													"    pm.expect(res).to.have.property(\"status\")\r",
													"    pm.expect(res).to.have.property(\"message\")\r",
													"    pm.expect(res).to.have.property(\"validationErrors\")\r",
													"    pm.expect(res).to.have.property(\"traceId\")\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyAdminToken}}"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/mailboxes/y7773/policies?searchText=text",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"mailboxes",
												"y7773",
												"policies"
											],
											"query": [
												{
													"key": "searchText",
													"value": "text"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "401 GET Mailbox policies should return 401 for unauthorized mailbox",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"pm.test(\"Body is as expected\", () => {\r",
													"    let res = pm.response.json()\r",
													"    \r",
													"    pm.expect(res).to.have.property(\"type\")\r",
													"    pm.expect(res).to.have.property(\"title\")\r",
													"    pm.expect(res).to.have.property(\"status\")\r",
													"    pm.expect(res).to.have.property(\"traceId\")\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyAdmin}}"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/mailboxes/y0036.yx50SE5/policies?searchText=texta",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"mailboxes",
												"y0036.yx50SE5",
												"policies"
											],
											"query": [
												{
													"key": "searchText",
													"value": "texta"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "404 GET Mailbox policies should return 404 for mailbox does not exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"pm.test(\"Body is as expected\", () => {\r",
													"    let res = pm.response.json()\r",
													"    \r",
													"    pm.expect(res).to.have.property(\"type\")\r",
													"    pm.expect(res).to.have.property(\"title\")\r",
													"    pm.expect(res).to.have.property(\"status\")\r",
													"    pm.expect(res).to.have.property(\"traceId\")\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyAdminToken}}"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/mailboxes/y7773.yx5vnv/policies?searchText=text",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"mailboxes",
												"y7773.yx5vnv",
												"policies"
											],
											"query": [
												{
													"key": "searchText",
													"value": "text"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"agencyAdmin\");",
											"const Pass = pm.globals.get(\"agencyPassword\");",
											"const BasicToken = pm.environment.get(\"agencyTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"agencyAdminToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('agencyAdminToken', responseJson['access_token']);",
											"    });"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "Carrier User",
					"item": [
						{
							"name": "Mailboxes",
							"item": [
								{
									"name": "GET returns 200OK  with paginated list of mailboxes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify data in response\", () => {\r",
													"    const responseBody = pm.response.json()\r",
													"    responseBody.map(data => pm.expect(data).to.have.all.keys(\"badLoginAttempts\", \"ibmMachineAddress\", \"migratedToMembership\",\"account\",\"userId\"))\r",
													"})\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/organizations/{{carrierOrgID}}/mailboxes"
									},
									"response": []
								},
								{
									"name": "GET-401 returns 401 for non-existent org",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/organizations/{{nonExistentOrgID}}/mailboxes"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"carrierUser\");",
											"const Pass = pm.globals.get(\"carrierPassword\");",
											"const BasicToken = pm.environment.get(\"ivanTokenClient\");",
											"const Scope = pm.globals.get(\"internalScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"carrierUserToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('carrierUserToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Policies",
							"item": [
								{
									"name": "200 GET Mailbox Policies should return all policies",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierUserToken}}"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/mailboxes/autocarr.automation/policies?searchText=AUTOP",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"mailboxes",
												"autocarr.automation",
												"policies"
											],
											"query": [
												{
													"key": "searchText",
													"value": "AUTOP"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "401 GET Mailbox policies should return 401 for unauthorized mailbox",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"pm.test(\"Body is as expected\", () => {\r",
													"    let res = pm.response.json()\r",
													"    \r",
													"    pm.expect(res).to.have.property(\"type\")\r",
													"    pm.expect(res).to.have.property(\"title\")\r",
													"    pm.expect(res).to.have.property(\"status\")\r",
													"    pm.expect(res).to.have.property(\"traceId\")\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierUserToken}}"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/mailboxes/hig0.test1/policies?searchText=AUTOP",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"mailboxes",
												"hig0.test1",
												"policies"
											],
											"query": [
												{
													"key": "searchText",
													"value": "AUTOP"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "404 GET Mailbox policies should return 404 for mailbox does not exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"pm.test(\"Body is as expected\", () => {\r",
													"    let res = pm.response.json()\r",
													"    \r",
													"    pm.expect(res).to.have.property(\"type\")\r",
													"    pm.expect(res).to.have.property(\"title\")\r",
													"    pm.expect(res).to.have.property(\"status\")\r",
													"    pm.expect(res).to.have.property(\"traceId\")\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierUserToken}}"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/mailboxes/autocarr.fake/policies?searchText=AUTOP",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"mailboxes",
												"autocarr.fake",
												"policies"
											],
											"query": [
												{
													"key": "searchText",
													"value": "AUTOP"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"carrierUser\");",
											"const Pass = pm.globals.get(\"carrierPassword\");",
											"const BasicToken = pm.environment.get(\"carrierTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"carrierUserToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('carrierUserToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "Carrier Sys User",
					"item": [
						{
							"name": "Change Password",
							"item": [
								{
									"name": "Get- 200ok for POST Successful password change for all mixed",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Response is as Expected\", () => {\r",
													"    let res = pm.response.json()\r",
													"    \r",
													"    pm.expect(res).to.have.property(\"name\")\r",
													"    pm.expect(res).to.have.property(\"action\")\r",
													"    pm.expect(res).to.have.property(\"message\")\r",
													"    \r",
													"})\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"newPassword\": \"Password@123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{reqUrl}}/api/mailboxes/{{carrierMailboxID}}/ChangePassword"
									},
									"response": []
								},
								{
									"name": "GET- 401- POST Unauthorized due to other accounts",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"const schema={\r",
													"    \r",
													"    \"name\": \"ChangePassword\",\r",
													"    \"action\": \"POST ChangeMailboxPasswordAsync\",\r",
													"    \"message\": \"Provided account does not have access to mailbox.\"\r",
													"\r",
													"}\r",
													"pm.test(\"Verify data in response\", () => {\r",
													"    \r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"    \r",
													"\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"newPassword\": \"Password@123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{reqUrl}}/api/mailboxes/{{CarreirMailboxTest1ID}}/ChangePassword"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"carrierSysUser\");",
											"const Pass = pm.globals.get(\"carrierPassword\");",
											"const BasicToken = pm.environment.get(\"carrierTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"carrierSysUserToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('carrierSysUserToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Policies",
							"item": [
								{
									"name": "200 GET Mailbox Policies should return all policies",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/mailboxes/autocarr.automation/policies?searchText=AUTOP",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"mailboxes",
												"autocarr.automation",
												"policies"
											],
											"query": [
												{
													"key": "searchText",
													"value": "AUTOP"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "401 GET Mailbox policies should return 401 for unauthorized mailbox",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"pm.test(\"Body is as expected\", () => {\r",
													"    let res = pm.response.json()\r",
													"    \r",
													"    pm.expect(res).to.have.property(\"type\")\r",
													"    pm.expect(res).to.have.property(\"title\")\r",
													"    pm.expect(res).to.have.property(\"status\")\r",
													"    pm.expect(res).to.have.property(\"traceId\")\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/mailboxes/hig0.test1/policies?searchText=AUTOP",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"mailboxes",
												"hig0.test1",
												"policies"
											],
											"query": [
												{
													"key": "searchText",
													"value": "AUTOP"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "404 GET Mailbox policies should return 404 for mailbox does not exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"pm.test(\"Body is as expected\", () => {\r",
													"    let res = pm.response.json()\r",
													"    \r",
													"    pm.expect(res).to.have.property(\"type\")\r",
													"    pm.expect(res).to.have.property(\"title\")\r",
													"    pm.expect(res).to.have.property(\"status\")\r",
													"    pm.expect(res).to.have.property(\"traceId\")\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/mailboxes/autocarr.fake/policies?searchText=AUTOP",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"mailboxes",
												"autocarr.fake",
												"policies"
											],
											"query": [
												{
													"key": "searchText",
													"value": "AUTOP"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 GET Mailbox Policies should return 200 for blank results",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/mailboxes/autocarr.automation/policies?searchText=null",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"mailboxes",
												"autocarr.automation",
												"policies"
											],
											"query": [
												{
													"key": "searchText",
													"value": "null"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"carrierSysUser\");",
											"const Pass = pm.globals.get(\"carrierPassword\");",
											"const BasicToken = pm.environment.get(\"carrierTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"carrierSysUserToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('carrierSysUserToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Mailboxes",
							"item": [
								{
									"name": "GET returns 200OK  with paginated list of mailboxes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify data in response\", () => {\r",
													"    const responseBody = pm.response.json()\r",
													"    responseBody.map(data => pm.expect(data).to.have.all.keys(\"badLoginAttempts\", \"ibmMachineAddress\", \"migratedToMembership\",\"account\",\"userId\"))\r",
													"})\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/organizations/{{carrierOrgID}}/mailboxes"
									},
									"response": []
								},
								{
									"name": "GET 400- Return 400 for incorrect Org GUID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/organizations/fake/mailboxes"
									},
									"response": []
								},
								{
									"name": "GET-401 returns 401 for non-existent org",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierSysUserToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/organizations/{{nonExistentOrgID}}/mailboxes"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"carrierSysUser\");",
											"const Pass = pm.globals.get(\"carrierPassword\");",
											"const BasicToken = pm.environment.get(\"ivanTokenClient\");",
											"const Scope = pm.globals.get(\"internalScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"carrierSysUserToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('carrierSysUserToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "Carrier Mailbox",
					"item": [
						{
							"name": "Change Password",
							"item": [
								{
									"name": "GET - 200ok for POST Successful password change for all mixed",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Response is as Expected\", () => {\r",
													"    let res = pm.response.json()\r",
													"    \r",
													"    pm.expect(res).to.have.property(\"name\")\r",
													"    pm.expect(res).to.have.property(\"action\")\r",
													"    pm.expect(res).to.have.property(\"message\")\r",
													"    \r",
													"})\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierMailboxOtherToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"newPassword\": \"Password@123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{reqUrl}}/api/mailboxes/{{carrierMailboxID}}/ChangePassword"
									},
									"response": []
								},
								{
									"name": "GET- 401- POST Unauthorized due to other accounts",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"const schema={\r",
													"    \r",
													"    \"name\": \"ChangePassword\",\r",
													"    \"action\": \"POST ChangeMailboxPasswordAsync\",\r",
													"    \"message\": \"Provided account does not have access to mailbox.\"\r",
													"\r",
													"}\r",
													"pm.test(\"Verify data in response\", () => {\r",
													"    \r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"    \r",
													"\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierMailboxOtherToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"newPassword\": \"Password@322\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{reqUrl}}/api/mailboxes/{{agencyMailboxYX50SE5ID}}/ChangePassword"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = \"autocarr.other\";",
											"const Pass = \"Password@123\"",
											"const BasicToken = pm.environment.get(\"carrierTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"carrierMailboxOtherToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('carrierMailboxOtherToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Mailboxes",
							"item": [
								{
									"name": "GET returns 200OK  with paginated list of mailboxes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify data in response\", () => {\r",
													"    const responseBody = pm.response.json()\r",
													"    responseBody.map(data => pm.expect(data).to.have.all.keys(\"badLoginAttempts\", \"ibmMachineAddress\", \"migratedToMembership\",\"account\",\"userId\"))\r",
													"})\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierMailboxToken}}"
											}
										],
										"url": "{{reqUrl}}/api/organizations/{{carrierOrgID}}/mailboxes"
									},
									"response": []
								},
								{
									"name": "GET-401 returns 401 for non-existent org",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierMailboxToken}}"
											}
										],
										"url": "{{reqUrl}}/api/organizations/{{nonExistentOrgID}}/mailboxes"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"carrierMailboxAutomation\");",
											"const Pass = pm.globals.get(\"carrierMailboxAutomationPassword\");",
											"const BasicToken = pm.environment.get(\"ivanTokenClient\");",
											"const Scope = pm.globals.get(\"internalScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"carrierMailboxToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('carrierMailboxToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Policies",
							"item": [
								{
									"name": "200GET Mailbox Policies should return all policies",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierMailboxToken}}"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/mailboxes/AUTOCARR.AUTOMATION/policies?searchText=AUTOP",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"mailboxes",
												"AUTOCARR.AUTOMATION",
												"policies"
											],
											"query": [
												{
													"key": "searchText",
													"value": "AUTOP"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "401 GET Mailbox policies should return 401 for unauthorized mailbox",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"pm.test(\"Body is as expected\", () => {\r",
													"    let res = pm.response.json()\r",
													"    \r",
													"    pm.expect(res).to.have.property(\"type\")\r",
													"    pm.expect(res).to.have.property(\"title\")\r",
													"    pm.expect(res).to.have.property(\"status\")\r",
													"    pm.expect(res).to.have.property(\"traceId\")\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierMailboxToken}}"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/mailboxes/hig0.test/policies?searchText=AUTOP",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"mailboxes",
												"hig0.test",
												"policies"
											],
											"query": [
												{
													"key": "searchText",
													"value": "AUTOP"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "404 GET Mailbox policies should return 404 for mailbox does not exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"pm.test(\"Body is as expected\", () => {\r",
													"    let res = pm.response.json()\r",
													"    \r",
													"    pm.expect(res).to.have.property(\"type\")\r",
													"    pm.expect(res).to.have.property(\"title\")\r",
													"    pm.expect(res).to.have.property(\"status\")\r",
													"    pm.expect(res).to.have.property(\"traceId\")\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierMailboxToken}}"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/mailboxes/AUTOCARR.Fake/policies?searchText=AUTOP",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"mailboxes",
												"AUTOCARR.Fake",
												"policies"
											],
											"query": [
												{
													"key": "searchText",
													"value": "AUTOP"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"carrierMailboxAutomation\");",
											"const Pass = pm.globals.get(\"carrierMailboxAutomationPassword\");",
											"const BasicToken = pm.environment.get(\"carrierTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"carrierMailboxToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('carrierMailboxToken', responseJson['access_token']);",
											"    });"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "Carrier Admin",
					"item": [
						{
							"name": "ContentTypeFilter",
							"item": [
								{
									"name": "PUT",
									"item": [
										{
											"name": "PUT return 401 for Carrier Admin",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 401\", function () {\r",
															"  pm.response.to.have.status(401);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{carreirAdminToken}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6InJjS0FlTko5N0V2Z0JPaFQ2RlpWWnI1dWNYYyIsImtpZCI6InJjS0FlTko5N0V2Z0JPaFQ2RlpWWnI1dWNYYyJ9.eyJpc3MiOiJodHRwczovL29oLWRldi0yMDozNTgwMCIsImF1ZCI6Imh0dHBzOi8vb2gtZGV2LTIwOjM1ODAwL3Jlc291cmNlcyIsImV4cCI6MTY3MjA3MjUzMiwibmJmIjoxNjcyMDY4OTMyLCJjbGllbnRfaWQiOiI1QzAyRjRFMS1CRUU5LTQ5ODQtODc4OS0zRTc1Mjk1QzA1RkQiLCJzY29wZSI6WyJib29rcm9sbHMiLCJjc2lvX2Jyb2tlciIsImNzaW9fcG9sbGluZyIsImV4Y2hhbmdlIiwiZmlsZV90cmFuc2ZlciIsIm9wZW5pZCIsInByb2R1Y2VycyIsInRyYWRpbmdfcGFydG5lcnMiXSwic3ViIjoiYjJlMzc4ZDQtODk0ZC00YTIwLTkzN2ItN2I0MmI0NzRiYjFmIiwiYXV0aF90aW1lIjoxNjcyMDY4OTMyLCJpZHAiOiJpZHNydiIsIm5hbWUiOiJTU190ZXN0IiwiZW1haWwiOiJzaHViaGFtLnNoYXJtYUBhcHBsaWVkc3lzdGVtcy5jb20iLCJmdWxsIG5hbWUiOiJTX3Rlc3QiLCJyb2xlIjoiR2xvYmFsIEFkbWluIiwicHJvZHVjdHMiOlsiZXhjaGFuZ2UiLCJtYXJrZXRhcHBldGl0ZSJdLCJtdXN0IHNpZ24gZXVsYSI6IiIsImFjY291bnQiOiJJVkFOIiwibWVtYmVyIjpbIkNhcnJpZXIiLCJpdmFucyJdLCJqdGkiOiIyNTkwMDc4NmJiMmY4OTc2MWVmNGUxYmUzZjliNjM0MSIsImFtciI6WyJwYXNzd29yZCJdfQ.wkQnOs-T-u3DCiMl222oV5CW48CDqqEuXs9u8GeiUVDbCDERSllNPBMQkwZ1JnVkC5i6rbuHY1LzVoz1CDfwBZ1IxOHI5IJCDXIEDlgYwUndrLYDAWEXMsSsSIVZCWQy6ZBXp03sOddiwObFRbUqRbww0DQPlN7U4JSFzosEF-tMlwUr2fBeI3NnAAcmGsTLq_HZLFwcjd5jb90RPfGliPI7_lz-eC1Fuk94_gG2EWzcfIDVMAXRzQFaK2OPkyx6xBNIqQLfa1XsO0osynTN1ku0XQoNa9ipF74Oqpd_M6DD8bhTKLf36xa-kWo39fyw1Hj4fgMz2_oURaPr3GiAnw",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"policy\": true,\r\n  \"dbcd\": true,\r\n  \"claims\": true,\r\n  \"eDoc\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{reqUrl}}/api/mailboxes/{{agencyMailboxotherID}}/contenttypefilters"
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const URL = pm.environment.get(\"tokenUrl\")",
													"const User = pm.globals.get(\"carrierAdmin\");",
													"const Pass = pm.globals.get(\"carrierPassword\");",
													"const BasicToken = pm.environment.get(\"ivanTokenClient\");",
													"const Scope = pm.globals.get(\"internalScope\")",
													"",
													"console.log(URL)",
													"const postRequest = {",
													"  url: URL,",
													"  method: 'POST',",
													"  timeout: 10,",
													"  header: {",
													"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
													"    \"Authorization\": \"Basic \" + BasicToken",
													"  },",
													"  body: {",
													"    mode: 'urlencoded',",
													"    urlencoded: [",
													"        {key: \"grant_type\", value: \"password\"},",
													"        {key:\"username\", value: User},",
													"        {key:\"Password\", value: Pass},",
													"        {key:\"scope\", value: Scope}",
													"    ]}",
													"};",
													"pm.environment.unset(\"carreirAdminToken\");",
													"pm.sendRequest(postRequest, function (err, res) {",
													"    var responseJson = res.json();",
													"    pm.environment.set('carreirAdminToken', responseJson['access_token']);",
													"});"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						},
						{
							"name": "Policies",
							"item": [
								{
									"name": "200 GET Mailbox Policies should return all policies",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierAdminToken}}"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/mailboxes/Autocarr.automation/policies?searchText=AUTOP",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"mailboxes",
												"Autocarr.automation",
												"policies"
											],
											"query": [
												{
													"key": "searchText",
													"value": "AUTOP"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 GET Mailbox policies should return 400 for invalid mailbox ID and format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Body is as expected\", () => {\r",
													"    let res = pm.response.json()\r",
													"    \r",
													"    pm.expect(res).to.have.property(\"status\")\r",
													"    pm.expect(res).to.have.property(\"message\")\r",
													"    pm.expect(res).to.have.property(\"validationErrors\")\r",
													"    pm.expect(res).to.have.property(\"traceId\")\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierAdminToken}}"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/mailboxes/Autocarr/policies?searchText=AUTOP",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"mailboxes",
												"Autocarr",
												"policies"
											],
											"query": [
												{
													"key": "searchText",
													"value": "AUTOP"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "401 GET Mailbox policies should return 401 for unauthorized mailbox",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"pm.test(\"Body is as expected\", () => {\r",
													"    let res = pm.response.json()\r",
													"    \r",
													"    pm.expect(res).to.have.property(\"type\")\r",
													"    pm.expect(res).to.have.property(\"title\")\r",
													"    pm.expect(res).to.have.property(\"status\")\r",
													"    pm.expect(res).to.have.property(\"traceId\")\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyAdmin}}"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/mailboxes/y0036.yx50SE5/policies?searchText=texta",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"mailboxes",
												"y0036.yx50SE5",
												"policies"
											],
											"query": [
												{
													"key": "searchText",
													"value": "texta"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "404 GET Mailbox policies should return 404 for mailbox does not exist Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"pm.test(\"Body is as expected\", () => {\r",
													"    let res = pm.response.json()\r",
													"    \r",
													"    pm.expect(res).to.have.property(\"type\")\r",
													"    pm.expect(res).to.have.property(\"title\")\r",
													"    pm.expect(res).to.have.property(\"status\")\r",
													"    pm.expect(res).to.have.property(\"traceId\")\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{carrierAdminToken}}"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/mailboxes/autocarr.automatio/policies?searchText=texta",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"mailboxes",
												"autocarr.automatio",
												"policies"
											],
											"query": [
												{
													"key": "searchText",
													"value": "texta"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"carrierAdmin\");",
											"const Pass = pm.globals.get(\"carrierPassword\");",
											"const BasicToken = pm.environment.get(\"carrierTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"carrierAdminToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('carrierAdminToken', responseJson['access_token']);",
											"    });"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "Global Admin",
					"item": [
						{
							"name": "Change Passsword",
							"item": [
								{
									"name": "Global Admin- 200ok for POST Successful password change for all mixed.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Response is as Expected\", () => {\r",
													"    let res = pm.response.json()\r",
													"    \r",
													"    pm.expect(res).to.have.property(\"name\")\r",
													"    pm.expect(res).to.have.property(\"action\")\r",
													"    pm.expect(res).to.have.property(\"message\")\r",
													"    \r",
													"})\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivanGlobalToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"newPassword\": \"Password@321\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{reqUrl}}/api/mailboxes/{{ivanMailboxID}}/ChangePassword"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"ivanGlobal\");",
											"const Pass = pm.globals.get(\"ivanPassword\");",
											"const BasicToken = pm.environment.get(\"ivanTokenClient\");",
											"const Scope = pm.globals.get(\"internalScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"      \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \"+ BasicToken,",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"ivanGlobalToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('ivanGlobalToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "ContentTypeFilter",
							"item": [
								{
									"name": "GET",
									"item": [
										{
											"name": "GET 400 for Invalid mailbox name",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"  pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Test data type of the response\", () => {\r",
															"  pm.expect(responseJson).to.be.an(\"object\");\r",
															"})\r",
															"\r",
															"pm.test(\"Verify the error message\", () => {\r",
															"   pm.expect(responseJson.message).to.eql(\"Invalid mailbox identifier\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const URL = pm.environment.get(\"tokenUrl\")\r",
															"const User = pm.globals.get(\"ivanGlobal\");\r",
															"const Pass = pm.globals.get(\"ivanPassword\");\r",
															"const BasicToken = pm.environment.get(\"ivanTokenClient\");\r",
															"const Scope = pm.globals.get(\"internalScope\")\r",
															"\r",
															"const postRequest = {\r",
															"  url: URL,\r",
															"  method: 'POST',\r",
															"  timeout: 10,\r",
															"  header: {\r",
															"    \"Content-Type\": \"application/x-www-raw-urlencoded\",\r",
															"    \"Authorization\": \"Basic \" + BasicToken\r",
															"  },\r",
															"  body: {\r",
															"    mode: 'urlencoded',\r",
															"    urlencoded: [\r",
															"        {key: \"grant_type\", value: \"password\"},\r",
															"        {key:\"username\", value: User},\r",
															"        {key:\"Password\", value: Pass},\r",
															"        {key:\"scope\", value: Scope}\r",
															"    ]}\r",
															"};\r",
															"pm.environment.unset(\"ivanGlobalToken\");\r",
															"pm.sendRequest(postRequest, function (err, res) {\r",
															"    var responseJson = res.json();\r",
															"    \r",
															"    pm.environment.set('ivanGlobalToken', responseJson['access_token']);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ivanGlobalToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"disabled": true
													},
													{
														"key": "",
														"value": "openid file_transfer trading_partners exchange csio_broker producers csio_polling bookrolls",
														"disabled": true
													}
												],
												"url": "{{reqUrl}}/api/mailboxes/{{invalidMailboxId}}/contenttypefilters"
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const URL = pm.environment.get(\"tokenUrl\")",
													"const User = pm.globals.get(\"ivanGlobal\");",
													"const Pass = pm.globals.get(\"ivanPassword\");",
													"const BasicToken = pm.environment.get(\"ivanTokenClient\");",
													"const Scope = pm.globals.get(\"internalScope\")",
													"",
													"const postRequest = {",
													"  url: URL,",
													"  method: 'POST',",
													"  timeout: 10,",
													"  header: {",
													"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
													"    \"Authorization\": \"Basic \" + BasicToken",
													"  },",
													"  body: {",
													"    mode: 'urlencoded',",
													"    urlencoded: [",
													"        {key: \"grant_type\", value: \"password\"},",
													"        {key:\"username\", value: User},",
													"        {key:\"Password\", value: Pass},",
													"        {key:\"scope\", value: Scope}",
													"    ]}",
													"};",
													"pm.environment.unset(\"ivanGlobalToken\");",
													"pm.sendRequest(postRequest, function (err, res) {",
													"    var responseJson = res.json();",
													"    ",
													"    pm.environment.set('ivanGlobalToken', responseJson['access_token']);",
													"});"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "PUT",
									"item": [
										{
											"name": "PUT return 401 for Global",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 401\", function () {\r",
															"  pm.response.to.have.status(401);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ivanGlobalToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"policy\": true,\r\n  \"dbcd\": true,\r\n  \"claims\": true,\r\n  \"eDoc\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{reqUrl}}/api/mailboxes/YDUXH.other/contenttypefilters"
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const URL = pm.environment.get(\"tokenUrl\")",
													"const User = pm.globals.get(\"ivanGlobal\");",
													"const Pass = pm.globals.get(\"ivanPassword\");",
													"const BasicToken = pm.environment.get(\"ivanTokenClient\");",
													"const Scope = pm.globals.get(\"internalScope\")",
													"",
													"const postRequest = {",
													"  url: URL,",
													"  method: 'POST',",
													"  timeout: 10,",
													"  header: {",
													"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
													"    \"Authorization\": \"Basic \" + BasicToken",
													"  },",
													"  body: {",
													"    mode: 'urlencoded',",
													"    urlencoded: [",
													"        {key: \"grant_type\", value: \"password\"},",
													"        {key:\"username\", value: User},",
													"        {key:\"Password\", value: Pass},",
													"        {key:\"scope\", value: Scope}",
													"    ]}",
													"};",
													"pm.environment.unset(\"ivanGlobalToken\");",
													"pm.sendRequest(postRequest, function (err, res) {",
													"    var responseJson = res.json();",
													"    ",
													"    pm.environment.set('ivanGlobalToken', responseJson['access_token']);",
													"});"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						},
						{
							"name": "Policies",
							"item": [
								{
									"name": "200 GET Mailbox Policies should return all policies",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivanGlobalToken}}"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/mailboxes/ivan.automation/policies?searchText=AUTOP",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"mailboxes",
												"ivan.automation",
												"policies"
											],
											"query": [
												{
													"key": "searchText",
													"value": "AUTOP"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 GET Mailbox Policies should return 200 for blank results",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivanGlobalToken}}"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/mailboxes/ivan.automation/policies?searchText=Null",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"mailboxes",
												"ivan.automation",
												"policies"
											],
											"query": [
												{
													"key": "searchText",
													"value": "Null"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "404 GET Mailbox policies should return 404 for mailbox does not exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"pm.test(\"Body is as expected\", () => {\r",
													"    let res = pm.response.json()\r",
													"    \r",
													"    pm.expect(res).to.have.property(\"type\")\r",
													"    pm.expect(res).to.have.property(\"title\")\r",
													"    pm.expect(res).to.have.property(\"status\")\r",
													"    pm.expect(res).to.have.property(\"traceId\")\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivanGlobalToken}}"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/mailboxes/ivan.fake/policies?searchText=AUTOP",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"mailboxes",
												"ivan.fake",
												"policies"
											],
											"query": [
												{
													"key": "searchText",
													"value": "AUTOP"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\")",
											"const User = pm.globals.get(\"ivanGlobal\");",
											"const Pass = pm.globals.get(\"ivanPassword\");",
											"const BasicToken = pm.environment.get(\"ivanTokenClient\");",
											"const Scope = pm.globals.get(\"internalScope\")",
											"",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"ivanGlobalToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    ",
											"    pm.environment.set('ivanGlobalToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Mailboxes",
							"item": [
								{
									"name": "GET returns 200OK  with paginated list of mailboxes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Verify data in response\", () => {\r",
													"    const responseBody = pm.response.json()\r",
													"    responseBody.map(data => pm.expect(data).to.have.all.keys(\"badLoginAttempts\", \"ibmMachineAddress\", \"migratedToMembership\",\"account\",\"userId\"))\r",
													"})\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivanGloablToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/organizations/{{ivanOrgID}}/mailboxes"
									},
									"response": []
								},
								{
									"name": "GET- 404  returns 404 for non-existent org",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ivanGloablToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/organizations/{{nonExistentOrgID}}/mailboxes"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"ivanGlobal\");",
											"const Pass = pm.globals.get(\"ivanPassword\");",
											"const BasicToken = pm.environment.get(\"ivanTokenClient\");",
											"const Scope = pm.globals.get(\"internalScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"ivanGloablToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('ivanGloablToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "Ivan Sys USer",
					"item": [
						{
							"name": "Policies",
							"item": []
						},
						{
							"name": "ContentTypeFIlter",
							"item": [
								{
									"name": "GET",
									"item": [
										{
											"name": "GET 200 for content type filter",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"  pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Test data type of the response\", () => {\r",
															"  pm.expect(responseJson).to.be.an(\"object\");\r",
															"})\r",
															"\r",
															"pm.test(\"Check keys of request body\",()=> {\r",
															"pm.expect(responseJson).to.have.keys([\"policy\",\"dbcd\",\"claims\",\"eDoc\"]);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const URL = pm.environment.get(\"tokenUrl\")\r",
															"const User = pm.globals.get(\"ivanCsioAdmin\")\r",
															"const Pass = pm.globals.get(\"ivanPassword\")\r",
															"const BasicToken = pm.environment.get(\"ivanTokenClient\");\r",
															"const Scope = pm.globals.get(\"internalScope\")\r",
															"\r",
															"console.log(URL)\r",
															"const postRequest = {\r",
															"  url: URL,\r",
															"  method: 'POST',\r",
															"  timeout: 10,\r",
															"  header: {\r",
															"    \"Content-Type\": \"application/x-www-raw-urlencoded\",\r",
															"    \"Authorization\": \"Basic \" + BasicToken\r",
															"  },\r",
															"  body: {\r",
															"    mode: 'urlencoded',\r",
															"    urlencoded: [\r",
															"        {key: \"grant_type\", value: \"password\"},\r",
															"        {key:\"username\", value: User},\r",
															"        {key:\"Password\", value: Pass},\r",
															"        {key:\"scope\", value: Scope}\r",
															"    ]}\r",
															"};\r",
															"pm.environment.unset(\"ivanSysUserToken\");\r",
															"pm.sendRequest(postRequest, function (err, res) {\r",
															"    var responseJson = res.json();\r",
															"    console.log(\"this is the response from the json \",responseJson);\r",
															"    pm.environment.set('ivanSysUserToken', responseJson['access_token']);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ivanSysUserToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"disabled": true
													},
													{
														"key": "",
														"value": "openid file_transfer trading_partners exchange csio_broker producers csio_polling bookrolls",
														"disabled": true
													}
												],
												"url": "{{reqUrl}}/api/mailboxes/{{agencyMailboxyx50vnv}}/contenttypefilters"
											},
											"response": []
										},
										{
											"name": "GET 403 without Exchange Scope",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"pm.test(\"Status code is 403\", function () {\r",
															"  pm.response.to.have.status(403);\r",
															"});\r",
															"\r",
															"pm.test(\"Test data type of the response\", () => {\r",
															"  pm.expect(responseJson).to.be.an(\"object\");\r",
															"})\r",
															"\r",
															"pm.test(\"Verify the error message\", () => {\r",
															"   pm.expect(responseJson.message).to.eql(\"insufficient_scope\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const URL = pm.environment.get(\"tokenUrl\")\r",
															"const User = pm.globals.get(\"ivanSysUser\");\r",
															"const Pass = pm.globals.get(\"ivanPassword\");\r",
															"const BasicToken = pm.environment.get(\"ivanTokenClient\");\r",
															"const Scope = pm.globals.get(\"allScope\")\r",
															"\r",
															"console.log(URL)\r",
															"const postRequest = {\r",
															"  url: URL,\r",
															"  method: 'POST',\r",
															"  timeout: 10,\r",
															"  header: {\r",
															"    \"Content-Type\": \"application/x-www-raw-urlencoded\",\r",
															"    \"Authorization\": \"Basic \" + BasicToken\r",
															"  },\r",
															"  body: {\r",
															"    mode: 'urlencoded',\r",
															"    urlencoded: [\r",
															"        {key: \"grant_type\", value: \"password\"},\r",
															"        {key:\"username\", value: User},\r",
															"        {key:\"Password\", value: Pass},\r",
															"        {key:\"scope\", value: Scope}\r",
															"    ]}\r",
															"};\r",
															"pm.environment.unset(\"ivanSysUserToken\");\r",
															"pm.sendRequest(postRequest, function (err, res) {\r",
															"    var responseJson = res.json();\r",
															"    console.log(\"this is the response from the json \",responseJson);\r",
															"    pm.environment.set('ivanSysUserToken', responseJson['access_token']);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ivanSysUserToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"disabled": true
													},
													{
														"key": "",
														"value": "openid file_transfer trading_partners exchange csio_broker producers csio_polling bookrolls",
														"disabled": true
													}
												],
												"url": "{{reqUrl}}/api/mailboxes/{{agencyMailboxyx50vnv}}/contenttypefilters"
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Vendor Admin",
					"item": [
						{
							"name": "Policies",
							"item": [
								{
									"name": "200 GET Mailbox Policies should return all policies",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{vendorAdminToken}}"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/mailboxes/aps2.appsys1/policies?searchText=AUTOP",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"mailboxes",
												"aps2.appsys1",
												"policies"
											],
											"query": [
												{
													"key": "searchText",
													"value": "AUTOP"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "401 GET Mailbox policies should return 401 for unauthorized mailbox",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"pm.test(\"Body is as expected\", () => {\r",
													"    let res = pm.response.json()\r",
													"    \r",
													"    pm.expect(res).to.have.property(\"type\")\r",
													"    pm.expect(res).to.have.property(\"title\")\r",
													"    pm.expect(res).to.have.property(\"status\")\r",
													"    pm.expect(res).to.have.property(\"traceId\")\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{vendorAdminToken}}"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/mailboxes/hig0.test/policies?searchText=AUTOP",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"mailboxes",
												"hig0.test",
												"policies"
											],
											"query": [
												{
													"key": "searchText",
													"value": "AUTOP"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "404 GET Mailbox policies should return 404 for mailbox does not exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"pm.test(\"Body is as expected\", () => {\r",
													"    let res = pm.response.json()\r",
													"    \r",
													"    pm.expect(res).to.have.property(\"type\")\r",
													"    pm.expect(res).to.have.property(\"title\")\r",
													"    pm.expect(res).to.have.property(\"status\")\r",
													"    pm.expect(res).to.have.property(\"traceId\")\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{vendorAdminToken}}"
											}
										],
										"url": {
											"raw": "{{reqUrl}}/api/mailboxes/aps2.appsys/policies?searchText=AUTOP",
											"host": [
												"{{reqUrl}}"
											],
											"path": [
												"api",
												"mailboxes",
												"aps2.appsys",
												"policies"
											],
											"query": [
												{
													"key": "searchText",
													"value": "AUTOP"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"vendorAdmin\");",
											"const Pass = pm.globals.get(\"vendorPassword\");",
											"const BasicToken = pm.environment.get(\"vendorTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"vendorAdminToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('vendorAdminToken', responseJson['access_token']);",
											"    });"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Mailboxes",
							"item": [
								{
									"name": "GET returns 200OK  with paginated list of mailboxes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Verify data in response\", () => {\r",
													"    const responseBody = pm.response.json()\r",
													"    responseBody.map(data => pm.expect(data).to.have.all.keys(\"badLoginAttempts\", \"ibmMachineAddress\", \"migratedToMembership\",\"account\",\"userId\"))\r",
													"})\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{vendorAdminToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/organizations/{{vendorOrgID}}/mailboxes"
									},
									"response": []
								},
								{
									"name": "GET-401 returns 401 for non-existent org",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{vendorAdminToken}}",
												"type": "text"
											}
										],
										"url": "{{reqUrl}}/api/organizations/{{nonExistentOrgID}}/mailboxes"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\");",
											"const User = pm.globals.get(\"vendorAdmin\");",
											"const Pass = pm.globals.get(\"vendorPassword\");",
											"const BasicToken = pm.environment.get(\"ivanTokenClient\");",
											"const Scope = pm.globals.get(\"internalScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"vendorAdminToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(responseJson);",
											"    pm.environment.set('vendorAdminToken', responseJson['access_token']);",
											"    });"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "Vendor Sys User",
					"item": []
				},
				{
					"name": "Vendor User",
					"item": []
				}
			]
		},
		{
			"name": "Trading Partners",
			"item": [
				{
					"name": "Carreir System User",
					"item": [
						{
							"name": "Get 201OK Created- For adding a trading partnership",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Body is as expected\", () => {\r",
											"    let res = pm.response.json()\r",
											"    \r",
											"    pm.expect(res).to.have.property(\"leadRoute\")\r",
											"    pm.expect(res).to.have.property(\"followRoute\")\r",
											"    pm.expect(res).to.have.property(\"tprSetId\")\r",
											"    pm.expect(res).to.have.property(\"leadAccount\")\r",
											"    pm.expect(res).to.have.property(\"leadUserId\")\r",
											"    pm.expect(res).to.have.property(\"followAccount\")\r",
											"    pm.expect(res).to.have.property(\"followUserId\")\r",
											"    pm.expect(res).to.have.property(\"partnerId\")\r",
											"     pm.expect(res).to.have.property(\"tprSetName\")\r",
											"    pm.expect(res).to.have.property(\"ibmMachineAddress\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{carrierSysUserToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"leadAccount\": \"autocarr\",\r\n  \"leadUserId\": \"postman\",\r\n  \"followAccount\": \"y7773\",\r\n  \"followUserId\": \"postman\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{reqUrl}}/api/Partners"
							},
							"response": []
						},
						{
							"name": "GET 200ok- List the newly created partnership",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"const schema=\r",
											"    {\r",
											"        \"tprSetId\": 978,\r",
											"        \"leadAccount\": \"autocarr\",\r",
											"        \"leadUserId\": \"postman\",\r",
											"        \"followAccount\": \"y7773\",\r",
											"        \"followUserId\": \"postman\",\r",
											"        \"partnerId\": \"978.y7773.postman\",\r",
											"        \"tprSetName\": \"autocarr.postman Trading Partner Set\",\r",
											"        \"ibmMachineAddress\": null\r",
											"    }\r",
											"\r",
											"pm.test(\"Verify data in response\", () => {\r",
											"    \r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"    \r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{carrierSysUserToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{reqUrl}}/api/Partners?leadRoute=autocarr.postman",
									"host": [
										"{{reqUrl}}"
									],
									"path": [
										"api",
										"Partners"
									],
									"query": [
										{
											"key": "leadRoute",
											"value": "autocarr.postman"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get 204ok-  Partner has been deleted",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"204 Partner has been deleted\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{carrierSysUserToken}}",
										"type": "text"
									}
								],
								"url": "{{reqUrl}}/api/Partners/{{tradingPartnerID}}"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const URL = pm.environment.get(\"tokenUrl\");",
									"const User = pm.globals.get(\"carrierSysUser\");",
									"const Pass = pm.globals.get(\"carrierPassword\");",
									"const BasicToken = pm.environment.get(\"carrierTokenClient\");",
									"const Scope = pm.globals.get(\"allScope\")",
									"const postRequest = {",
									"  url: URL,",
									"  method: 'POST',",
									"  timeout: 10,",
									"  header: {",
									"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
									"    \"Authorization\": \"Basic \" + BasicToken",
									"  },",
									"  body: {",
									"    mode: 'urlencoded',",
									"    urlencoded: [",
									"        {key: \"grant_type\", value: \"password\"},",
									"        {key:\"username\", value: User},",
									"        {key:\"Password\", value: Pass},",
									"        {key:\"scope\", value: Scope}",
									"    ]}",
									"};",
									"pm.environment.unset(\"carrierSysUserToken\");",
									"pm.sendRequest(postRequest, function (err, res) {",
									"    var responseJson = res.json();",
									"    console.log(responseJson);",
									"    pm.environment.set('carrierSysUserToken', responseJson['access_token']);",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Global Admin",
					"item": [
						{
							"name": "Get 201OK Created- For adding a trading partnership",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Body is as expected\", () => {\r",
											"    let res = pm.response.json()\r",
											"    \r",
											"    pm.expect(res).to.have.property(\"leadRoute\")\r",
											"    pm.expect(res).to.have.property(\"followRoute\")\r",
											"    pm.expect(res).to.have.property(\"tprSetId\")\r",
											"    pm.expect(res).to.have.property(\"leadAccount\")\r",
											"    pm.expect(res).to.have.property(\"leadUserId\")\r",
											"    pm.expect(res).to.have.property(\"followAccount\")\r",
											"    pm.expect(res).to.have.property(\"followUserId\")\r",
											"    pm.expect(res).to.have.property(\"partnerId\")\r",
											"     pm.expect(res).to.have.property(\"tprSetName\")\r",
											"    pm.expect(res).to.have.property(\"ibmMachineAddress\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ivanGlobalToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"leadAccount\": \"autocarr\",\r\n  \"leadUserId\": \"postman\",\r\n  \"followAccount\": \"y7773\",\r\n  \"followUserId\": \"postman\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{reqUrl}}/api/Partners"
							},
							"response": []
						},
						{
							"name": "GET 200ok- List the newly created partnership Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"const schema=\r",
											"    {\r",
											"        \"tprSetId\": 978,\r",
											"        \"leadAccount\": \"autocarr\",\r",
											"        \"leadUserId\": \"postman\",\r",
											"        \"followAccount\": \"y7773\",\r",
											"        \"followUserId\": \"postman\",\r",
											"        \"partnerId\": \"978.y7773.postman\",\r",
											"        \"tprSetName\": \"autocarr.postman Trading Partner Set\",\r",
											"        \"ibmMachineAddress\": null\r",
											"    }\r",
											"\r",
											"pm.test(\"Verify data in response\", () => {\r",
											"    \r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"    \r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ivanGlobalToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{reqUrl}}/api/Partners?leadRoute=autocarr.postman",
									"host": [
										"{{reqUrl}}"
									],
									"path": [
										"api",
										"Partners"
									],
									"query": [
										{
											"key": "leadRoute",
											"value": "autocarr.postman"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get 204ok-  Partner has been deleted Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"204 Partner has been deleted\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ivanGlobalToken}}",
										"type": "text"
									}
								],
								"url": "{{reqUrl}}/api/Partners/{{tradingPartnerID}}"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const URL = pm.environment.get(\"tokenUrl\")",
									"const User = pm.globals.get(\"ivanGlobal\");",
									"const Pass = pm.globals.get(\"ivanPassword\");",
									"const BasicToken = pm.environment.get(\"ivanTokenClient\");",
									"const Scope = pm.globals.get(\"allScope\")",
									"",
									"const postRequest = {",
									"  url: URL,",
									"  method: 'POST',",
									"  timeout: 10,",
									"  header: {",
									"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
									"    \"Authorization\": \"Basic \" + BasicToken",
									"  },",
									"  body: {",
									"    mode: 'urlencoded',",
									"    urlencoded: [",
									"        {key: \"grant_type\", value: \"password\"},",
									"        {key:\"username\", value: User},",
									"        {key:\"Password\", value: Pass},",
									"        {key:\"scope\", value: Scope}",
									"    ]}",
									"};",
									"pm.environment.unset(\"ivanGlobalToken\");",
									"pm.sendRequest(postRequest, function (err, res) {",
									"    var responseJson = res.json();",
									"    ",
									"    pm.environment.set('ivanGlobalToken', responseJson['access_token']);",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Products",
			"item": [
				{
					"name": "IVAN Global admin",
					"item": [
						{
							"name": "GET-- 200 OK I request to create a Product for any company",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"  \r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonData = JSON.parse(responseBody)    \r",
											"   pm.environment.set(\"productId\", jsonData.productId)\r",
											"})\r",
											"\r",
											"pm.test(\"Body is as expected\", () => {\r",
											"    let res = pm.response.json()\r",
											"    \r",
											"    pm.expect(res).to.have.property(\"productId\")\r",
											"    pm.expect(res).to.have.property(\"productName\")\r",
											"    pm.expect(res).to.have.property(\"description\")\r",
											"    pm.expect(res).to.have.property(\"helpDeskNumber\")\r",
											"    pm.expect(res).to.have.property(\"hidden\")\r",
											"  \r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ivanGloablToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n     \"productName\": \" QA_TEST PRODUCT 01 \",\r\n  \"description\": \"discription test\",\r\n  \"helpDeskNumber\": \"000000000000\",\r\n  \"hidden\": true\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{reqUrl}}/api/carriers/{{carrierOrgID}}/products"
							},
							"response": []
						},
						{
							"name": "GET-  404 Not Found with standard error format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Body is as expected\", () => {\r",
											"    let res = pm.response.json()\r",
											"    \r",
											"    pm.expect(res).to.have.property(\"status\")\r",
											"    pm.expect(res).to.have.property(\"message\")\r",
											"    pm.expect(res).to.have.property(\"traceId\")\r",
											"    pm.expect(res).to.have.property(\"validationErrors\")\r",
											"   \r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ivanGloablToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n     \"productName\": \"Test12\",\r\n  \"description\": \"discription test\",\r\n  \"helpDeskNumber\": \"000000000000\",\r\n  \"hidden\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{reqUrl}}/api/carriers/{{nonExistentOrgID}}/products"
							},
							"response": []
						},
						{
							"name": "GET- 400 Bad Request- I request a product that already exists for the company",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body is as expected\", () => {\r",
											"    let res = pm.response.json()\r",
											"    \r",
											"    pm.expect(res).to.have.property(\"status\")\r",
											"    pm.expect(res).to.have.property(\"message\")\r",
											"    pm.expect(res).to.have.property(\"traceId\")\r",
											"    pm.expect(res).to.have.property(\"validationErrors\")\r",
											"   \r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"pm.test('Error message as Expected', () => {\r",
											"    staticMessage = \"Product already exists.\"\r",
											"        var jsonData = JSON.parse(responseBody);\r",
											"pm.expect(jsonData.message).to.include(staticMessage)\r",
											"    \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ivanGloablToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n     \"productName\": \"Test12\",\r\n  \"description\": \"discription test\",\r\n  \"helpDeskNumber\": \"000000000000\",\r\n  \"hidden\": true\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{reqUrl}}/api/carriers/{{carrierOrgID}}/products"
							},
							"response": []
						},
						{
							"name": "DELETE- 204 NoContent -I request to Delete Products for any company",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ivanGloablToken}}",
										"type": "text"
									}
								],
								"url": "{{reqUrl}}/api/carriers/{{carrierOrgID}}/products/{{productId}}"
							},
							"response": []
						},
						{
							"name": "DELETE- 404 Not Found with standard error format-  request to Delete Products for a company that does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Body is as expected\", () => {\r",
											"    let res = pm.response.json()\r",
											"    \r",
											"    pm.expect(res).to.have.property(\"status\")\r",
											"    pm.expect(res).to.have.property(\"message\")\r",
											"    pm.expect(res).to.have.property(\"traceId\")\r",
											"    pm.expect(res).to.have.property(\"validationErrors\")\r",
											"   \r",
											"})\r",
											"\r",
											"pm.test('Error message as Expected', () => {\r",
											"    staticMessage = \"Organization not found.\"\r",
											"        var jsonData = JSON.parse(responseBody);\r",
											"pm.expect(jsonData.message).to.include(staticMessage)\r",
											"    \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ivanGloablToken}}",
										"type": "text"
									}
								],
								"url": "{{reqUrl}}/api/carriers/{{nonExistentOrgID}}/products/{{productId}}"
							},
							"response": []
						},
						{
							"name": "GET- 200 OK-I request to update Products for any company",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body is as expected\", () => {\r",
											"    let res = pm.response.json()\r",
											"    \r",
											"    pm.expect(res).to.have.property(\"productId\")\r",
											"    pm.expect(res).to.have.property(\"productName\")\r",
											"    pm.expect(res).to.have.property(\"description\")\r",
											"    pm.expect(res).to.have.property(\"helpDeskNumber\")\r",
											"     pm.expect(res).to.have.property(\"hidden\")\r",
											"   \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ivanGloablToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"description\": \"NewDiscritopn\",\r\n  \"helpDeskNumber\": \"0000xxxx000xx\",\r\n  \"hidden\": true\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{reqUrl}}/api/carriers/{{carrierOrgID}}/Products/{{testProduct}}"
							},
							"response": []
						},
						{
							"name": "GET-404 Not Found with standard error format- I request to update Products for a company that does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Body is as expected\", () => {\r",
											"    let res = pm.response.json()\r",
											"    \r",
											"    pm.expect(res).to.have.property(\"status\")\r",
											"    pm.expect(res).to.have.property(\"message\")\r",
											"    pm.expect(res).to.have.property(\"traceId\")\r",
											"    pm.expect(res).to.have.property(\"validationErrors\")\r",
											"   \r",
											"})\r",
											"\r",
											"pm.test('Error message as Expected', () => {\r",
											"    staticMessage = \"Organization not found.\"\r",
											"        var jsonData = JSON.parse(responseBody);\r",
											"pm.expect(jsonData.message).to.include(staticMessage)\r",
											"    \r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ivanGloablToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"description\": \"NewDiscritopn\",\r\n  \"helpDeskNumber\": \"0000xxxx000xx\",\r\n  \"hidden\": true\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{reqUrl}}/api/carriers/{{nonExistentOrgID}}/Products/{{testProduct}}"
							},
							"response": []
						},
						{
							"name": "GET-404 Not Found with standard error format- I request to update Products for a company that does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Body is as expected\", () => {\r",
											"    let res = pm.response.json()\r",
											"    \r",
											"    pm.expect(res).to.have.property(\"status\")\r",
											"    pm.expect(res).to.have.property(\"message\")\r",
											"    pm.expect(res).to.have.property(\"traceId\")\r",
											"    pm.expect(res).to.have.property(\"validationErrors\")\r",
											"   \r",
											"})\r",
											"\r",
											"pm.test('Error message as Expected', () => {\r",
											"    staticMessage = \"Organization not found.\"\r",
											"        var jsonData = JSON.parse(responseBody);\r",
											"pm.expect(jsonData.message).to.include(staticMessage)\r",
											"    \r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ivanGloablToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"description\": \"NewDiscritopn\",\r\n  \"helpDeskNumber\": \"0000xxxx000xx\",\r\n  \"hidden\": true\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{reqUrl}}/api/carriers/{{nonExistentOrgID}}/Products/{{nonExistentProductID}}"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const URL = pm.environment.get(\"tokenUrl\");",
									"const User = pm.globals.get(\"ivanGlobal\");",
									"const Pass = pm.globals.get(\"ivanPassword\");",
									"const BasicToken = pm.environment.get(\"ivanTokenClient\");",
									"const Scope = pm.globals.get(\"internalScope\")",
									"const postRequest = {",
									"  url: URL,",
									"  method: 'POST',",
									"  timeout: 10,",
									"  header: {",
									"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
									"    \"Authorization\": \"Basic \" + BasicToken",
									"  },",
									"  body: {",
									"    mode: 'urlencoded',",
									"    urlencoded: [",
									"        {key: \"grant_type\", value: \"password\"},",
									"        {key:\"username\", value: User},",
									"        {key:\"Password\", value: Pass},",
									"        {key:\"scope\", value: Scope}",
									"    ]}",
									"};",
									"pm.environment.unset(\"ivanGloablToken\");",
									"pm.sendRequest(postRequest, function (err, res) {",
									"    var responseJson = res.json();",
									"    console.log(responseJson);",
									"    pm.environment.set('ivanGloablToken', responseJson['access_token']);",
									"    ",
									"});",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Carrier Admin",
					"item": [
						{
							"name": "Get Product List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body as expected\", () => {\r",
											"    const responseBody = pm.response.json()\r",
											"    responseBody.map(data => pm.expect(data).to.have.all.keys(\"productId\", \"productName\", \"description\",\"helpDeskNumber\",\"hidden\"))\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{carrierAdminToken}}",
										"type": "text"
									}
								],
								"url": "{{reqUrl}}/api/carriers/{{carrierOrgID}}/Products/"
							},
							"response": []
						},
						{
							"name": "GET- 401 Not Authorized-  I request to create a Product for a company I have access to",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Body is as expected\", () => {\r",
											"    let res = pm.response.json()\r",
											"    \r",
											"    pm.expect(res).to.have.property(\"status\")\r",
											"    pm.expect(res).to.have.property(\"message\")\r",
											"    pm.expect(res).to.have.property(\"traceId\")\r",
											"    pm.expect(res).to.have.property(\"validationErrors\")\r",
											"   \r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{carrierAdminToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n     \"productName\": \"Test1\",\r\n  \"description\": \"discription test\",\r\n  \"helpDeskNumber\": \"000000000000\",\r\n  \"hidden\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{reqUrl}}/api/carriers/{{carrierOrgID}}/products"
							},
							"response": []
						},
						{
							"name": "POST- 401 Not Authorized- I request to create a Product for a company that does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Body is as expected\", () => {\r",
											"    let res = pm.response.json()\r",
											"    \r",
											"    pm.expect(res).to.have.property(\"status\")\r",
											"    pm.expect(res).to.have.property(\"message\")\r",
											"    pm.expect(res).to.have.property(\"traceId\")\r",
											"    pm.expect(res).to.have.property(\"validationErrors\")\r",
											"   \r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{carrierAdminToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n     \"productName\": \"Test12\",\r\n  \"description\": \"discription test\",\r\n  \"helpDeskNumber\": \"000000000000\",\r\n  \"hidden\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{reqUrl}}/api/carriers/{{nonExistentOrgID}}/products"
							},
							"response": []
						},
						{
							"name": "DELETE- 401 Not Authorized- I request to Delete Products for a company I have access to",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Body is as expected\", () => {\r",
											"    let res = pm.response.json()\r",
											"    \r",
											"    pm.expect(res).to.have.property(\"status\")\r",
											"    pm.expect(res).to.have.property(\"message\")\r",
											"    pm.expect(res).to.have.property(\"traceId\")\r",
											"    pm.expect(res).to.have.property(\"validationErrors\")\r",
											"   \r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{carrierAdminToken}}",
										"type": "text"
									}
								],
								"url": "{{reqUrl}}/api/carriers/{{carrierOrgID}}/products/{{testProduct}}"
							},
							"response": []
						},
						{
							"name": "DELETE- 401 Not Authorized- I request to Delete Products for a company that does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Body is as expected\", () => {\r",
											"    let res = pm.response.json()\r",
											"    \r",
											"    pm.expect(res).to.have.property(\"status\")\r",
											"    pm.expect(res).to.have.property(\"message\")\r",
											"    pm.expect(res).to.have.property(\"traceId\")\r",
											"    pm.expect(res).to.have.property(\"validationErrors\")\r",
											"   \r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{carrierAdminToken}}",
										"type": "text"
									}
								],
								"url": "{{reqUrl}}/api/carriers/{{nonExistentOrgID}}/products/{{productId}}"
							},
							"response": []
						},
						{
							"name": "GET- 200 OK-\t I request to update Products for a company I have access to",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body is as expected\", () => {\r",
											"    let res = pm.response.json()\r",
											"    \r",
											"    pm.expect(res).to.have.property(\"productId\")\r",
											"    pm.expect(res).to.have.property(\"productName\")\r",
											"    pm.expect(res).to.have.property(\"description\")\r",
											"    pm.expect(res).to.have.property(\"helpDeskNumber\")\r",
											"    pm.expect(res).to.have.property(\"hidden\")\r",
											"   \r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{carrierAdminToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"description\": \"NewDiscritopn\",\r\n  \"helpDeskNumber\": \"0000xxxx000xx\",\r\n  \"hidden\": true\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{reqUrl}}/api/carriers/{{carrierOrgID}}/Products/{{testProduct}}"
							},
							"response": []
						},
						{
							"name": "GET-401 Not Authorized- I request to update Products for a company that does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Body is as expected\", () => {\r",
											"    let res = pm.response.json()\r",
											"    \r",
											"    pm.expect(res).to.have.property(\"status\")\r",
											"    pm.expect(res).to.have.property(\"message\")\r",
											"    pm.expect(res).to.have.property(\"traceId\")\r",
											"    pm.expect(res).to.have.property(\"validationErrors\")\r",
											"   \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{carrierAdminToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"description\": \"NewDiscritopn\",\r\n  \"helpDeskNumber\": \"0000xxxx000xx\",\r\n  \"hidden\": true\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{reqUrl}}/api/carriers/{{nonExistentOrgID}}/Products/{{testProduct}}"
							},
							"response": []
						},
						{
							"name": "GET-PUT- 404 Not Found with standard error format- I request to update not exists Product for a company I have access to",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Body is as expected\", () => {\r",
											"    let res = pm.response.json()\r",
											"    \r",
											"    pm.expect(res).to.have.property(\"status\")\r",
											"    pm.expect(res).to.have.property(\"message\")\r",
											"    pm.expect(res).to.have.property(\"traceId\")\r",
											"    pm.expect(res).to.have.property(\"validationErrors\")\r",
											"   \r",
											"})\r",
											"pm.test('Error message as Expected', () => {\r",
											"    staticMessage = \"No Product found.\"\r",
											"        var jsonData = JSON.parse(responseBody);\r",
											"pm.expect(jsonData.message).to.include(staticMessage)\r",
											"    \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{carrierAdminToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"description\": \"NewDiscritopn\",\r\n  \"helpDeskNumber\": \"0000xxxx000xx\",\r\n  \"hidden\": true\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{reqUrl}}/api/carriers/{{carrierOrgID}}/Products/{{nonExistentProductID}}"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const URL = pm.environment.get(\"tokenUrl\");",
									"const User = pm.globals.get(\"carrierAdmin\");",
									"const Pass = pm.globals.get(\"carrierPassword\");",
									"const BasicToken = pm.environment.get(\"ivanTokenClient\");",
									"const Scope = pm.globals.get(\"internalScope\")",
									"const postRequest = {",
									"  url: URL,",
									"  method: 'POST',",
									"  timeout: 10,",
									"  header: {",
									"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
									"    \"Authorization\": \"Basic \" + BasicToken",
									"  },",
									"  body: {",
									"    mode: 'urlencoded',",
									"    urlencoded: [",
									"        {key: \"grant_type\", value: \"password\"},",
									"        {key:\"username\", value: User},",
									"        {key:\"Password\", value: Pass},",
									"        {key:\"scope\", value: Scope}",
									"    ]}",
									"};",
									"pm.environment.unset(\"carrierAdminToken\");",
									"pm.sendRequest(postRequest, function (err, res) {",
									"    var responseJson = res.json();",
									"    console.log(responseJson);",
									"    pm.environment.set('carrierAdminToken', responseJson['access_token']);",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Agency Admin",
					"item": [
						{
							"name": "GET- 401 Not Authorized-  I request to create a Product for a company I have access to Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Body is as expected\", () => {\r",
											"    let res = pm.response.json()\r",
											"    \r",
											"    pm.expect(res).to.have.property(\"status\")\r",
											"    pm.expect(res).to.have.property(\"message\")\r",
											"    pm.expect(res).to.have.property(\"traceId\")\r",
											"    pm.expect(res).to.have.property(\"validationErrors\")\r",
											"   \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{agencyAdminToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n     \"productName\": \"Test1\",\r\n  \"description\": \"discription test\",\r\n  \"helpDeskNumber\": \"000000000000\",\r\n  \"hidden\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{reqUrl}}/api/carriers/{{carrierOrgID}}/products"
							},
							"response": []
						},
						{
							"name": "POST- 401 Not Authorized- I request to create a Product for a company",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Body is as expected\", () => {\r",
											"    let res = pm.response.json()\r",
											"    \r",
											"    pm.expect(res).to.have.property(\"status\")\r",
											"    pm.expect(res).to.have.property(\"message\")\r",
											"    pm.expect(res).to.have.property(\"traceId\")\r",
											"    pm.expect(res).to.have.property(\"validationErrors\")\r",
											"   \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{agencyAdminToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n     \"productName\": \"Test12\",\r\n  \"description\": \"discription test\",\r\n  \"helpDeskNumber\": \"000000000000\",\r\n  \"hidden\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{reqUrl}}/api/carriers/{{nonExistentOrgID}}/products"
							},
							"response": []
						},
						{
							"name": "DELETE- 401 Not Authorized- I request to Delete Products for a company I have access to.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Body is as expected\", () => {\r",
											"    let res = pm.response.json()\r",
											"    \r",
											"    pm.expect(res).to.have.property(\"status\")\r",
											"    pm.expect(res).to.have.property(\"message\")\r",
											"    pm.expect(res).to.have.property(\"traceId\")\r",
											"    pm.expect(res).to.have.property(\"validationErrors\")\r",
											"   \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{agencyAdminToken}}",
										"type": "text"
									}
								],
								"url": "{{reqUrl}}/api/carriers/{{carrierOrgID}}/products/6a8574e1-a984-4703-a880-150dbc440e2a"
							},
							"response": []
						},
						{
							"name": "DELETE- 401 Not Authorized- I request to Delete Products for a company that does not exist Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Body is as expected\", () => {\r",
											"    let res = pm.response.json()\r",
											"    \r",
											"    pm.expect(res).to.have.property(\"status\")\r",
											"    pm.expect(res).to.have.property(\"message\")\r",
											"    pm.expect(res).to.have.property(\"traceId\")\r",
											"    pm.expect(res).to.have.property(\"validationErrors\")\r",
											"   \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{agencyAdminToken}}",
										"type": "text"
									}
								],
								"url": "{{reqUrl}}/api/carriers/{{nonExistentOrgID}}/products/{{productId}}"
							},
							"response": []
						},
						{
							"name": "GET- 401 Not Authorized-I request to update Products for a company",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Body is as expected\", () => {\r",
											"    let res = pm.response.json()\r",
											"    \r",
											"    pm.expect(res).to.have.property(\"status\")\r",
											"    pm.expect(res).to.have.property(\"message\")\r",
											"    pm.expect(res).to.have.property(\"traceId\")\r",
											"    pm.expect(res).to.have.property(\"validationErrors\")\r",
											"   \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{agencyAdminToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"description\": \"NewDiscritopn\",\r\n  \"helpDeskNumber\": \"0000xxxx000xx\",\r\n  \"hidden\": true\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{reqUrl}}/api/carriers/{{carrierOrgID}}/Products/6a8574e1-a984-4703-a880-150dbc440e2a"
							},
							"response": []
						},
						{
							"name": "GET-401 Not Authorized- I request to update Products for a company that does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Body is as expected\", () => {\r",
											"    let res = pm.response.json()\r",
											"    \r",
											"    pm.expect(res).to.have.property(\"status\")\r",
											"    pm.expect(res).to.have.property(\"message\")\r",
											"    pm.expect(res).to.have.property(\"traceId\")\r",
											"    pm.expect(res).to.have.property(\"validationErrors\")\r",
											"   \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{agencyAdminToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"description\": \"NewDiscritopn\",\r\n  \"helpDeskNumber\": \"0000xxxx000xx\",\r\n  \"hidden\": true\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{reqUrl}}/api/carriers/{{nonExistentOrgID}}/Products/6a8574e1-a984-4703-a880-150dbc440e2a"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const URL = pm.environment.get(\"tokenUrl\")",
									"const User = pm.globals.get(\"agencyAdmin\");",
									"const Pass = pm.globals.get(\"agencyPassword\");",
									"const BasicToken = pm.environment.get(\"ivanTokenClient\");",
									"const Scope = pm.globals.get(\"internalScope\")",
									"",
									"const postRequest = {",
									"  url: URL,",
									"  method: 'POST',",
									"  timeout: 10,",
									"  header: {",
									"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
									"    \"Authorization\": \"Basic \" + BasicToken",
									"  },",
									"  body: {",
									"    mode: 'urlencoded',",
									"    urlencoded: [",
									"        {key: \"grant_type\", value: \"password\"},",
									"        {key:\"username\", value: User},",
									"        {key:\"Password\", value: Pass},",
									"        {key:\"scope\", value: Scope}",
									"    ]}",
									"};",
									"pm.environment.unset(\"agencyAdminToken\");",
									"pm.sendRequest(postRequest, function (err, res) {",
									"    var responseJson = res.json();",
									"    console.log(\"this is the response from the json \",responseJson);",
									"    pm.environment.set('agencyAdminToken', responseJson['access_token']);",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Producer",
			"item": [
				{
					"name": "POST",
					"item": [
						{
							"name": "Agency User",
							"item": [
								{
									"name": "400 - Create a Producer for an account code I have access to",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyUserToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"agencyAccount\": \"YB098\",\r\n  \"agencyUserId\": \"YX59BDR\",\r\n  \"companyAccount\": \"IVAN\",\r\n  \"producerCode\": \"593172910\",\r\n  \"contractNumber\": \"\",\r\n  \"participantCode\": \"\",\r\n  \"other1\": \"\",\r\n  \"other2\": \"\",\r\n  \"other3\": \"22616\",\r\n  \"other4\": \"\",\r\n  \"other5\": \"\",\r\n  \"initialLoadCode\": \"No\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{reqUrl}}/api/Organizations/{{agencyAccount}}/Producers"
									},
									"response": []
								},
								{
									"name": "401 - Create a Producer for an account code I do not have access",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"  pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyUserToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"agencyAccount\": \"YB098\",\r\n  \"agencyUserId\": \"YX59BDR\",\r\n  \"companyAccount\": \"IVAN\",\r\n  \"producerCode\": \"593172910\",\r\n  \"contractNumber\": \"\",\r\n  \"participantCode\": \"\",\r\n  \"other1\": \"\",\r\n  \"other2\": \"\",\r\n  \"other3\": \"22616\",\r\n  \"other4\": \"\",\r\n  \"other5\": \"\",\r\n  \"initialLoadCode\": \"No\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{reqUrl}}/api/Organizations/{{y0036AgencyAccount}}/Producers"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\")",
											"const User = pm.globals.get(\"agencyUser\");",
											"const Pass =\"Password123\";",
											"const BasicToken = pm.environment.get(\"agencyTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"agencyUserToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(\"this is the response from the json \",responseJson);",
											"    pm.environment.set('agencyUserToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Agency Admin",
							"item": [
								{
									"name": "400 - Create a Producer for an account code I have access to",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyAdminToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"agencyAccount\": \"YB098\",\r\n  \"agencyUserId\": \"YX59BDR\",\r\n  \"companyAccount\": \"IVAN\",\r\n  \"producerCode\": \"593172910\",\r\n  \"contractNumber\": \"\",\r\n  \"participantCode\": \"\",\r\n  \"other1\": \"\",\r\n  \"other2\": \"\",\r\n  \"other3\": \"22616\",\r\n  \"other4\": \"\",\r\n  \"other5\": \"\",\r\n  \"initialLoadCode\": \"No\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{reqUrl}}/api/Organizations/{{agencyAccount}}/Producers"
									},
									"response": []
								},
								{
									"name": "401 - Create a Producer for an account code I do not have access",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"  pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencyAdminToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"agencyAccount\": \"YB098\",\r\n  \"agencyUserId\": \"YX59BDR\",\r\n  \"companyAccount\": \"IVAN\",\r\n  \"producerCode\": \"593172910\",\r\n  \"contractNumber\": \"\",\r\n  \"participantCode\": \"\",\r\n  \"other1\": \"\",\r\n  \"other2\": \"\",\r\n  \"other3\": \"22616\",\r\n  \"other4\": \"\",\r\n  \"other5\": \"\",\r\n  \"initialLoadCode\": \"No\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{reqUrl}}/api/Organizations/{{y0036AgencyAccount}}/Producers"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\")",
											"const User = pm.globals.get(\"agencyAdmin\");",
											"const Pass =pm.globals.get(\"agencyPassword\");",
											"const BasicToken = pm.environment.get(\"agencyTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"console.log(User, Pass, Scope)",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"agencyAdminToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(\"this is the response from the json \",responseJson);",
											"    pm.environment.set('agencyAdminToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Agency Sys User",
							"item": [
								{
									"name": "400 - Create a Producer for an account code I have access to",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencySysUserToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"agencyAccount\": \"YB098\",\r\n  \"agencyUserId\": \"YX59BDR\",\r\n  \"companyAccount\": \"IVAN\",\r\n  \"producerCode\": \"593172910\",\r\n  \"contractNumber\": \"\",\r\n  \"participantCode\": \"\",\r\n  \"other1\": \"\",\r\n  \"other2\": \"\",\r\n  \"other3\": \"22616\",\r\n  \"other4\": \"\",\r\n  \"other5\": \"\",\r\n  \"initialLoadCode\": \"No\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{reqUrl}}/api/Organizations/{{agencyAccount}}/Producers"
									},
									"response": []
								},
								{
									"name": "401 - Create a Producer for an account code I do not have access",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"  pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{agencySysUserToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"agencyAccount\": \"YB098\",\r\n  \"agencyUserId\": \"YX59BDR\",\r\n  \"companyAccount\": \"IVAN\",\r\n  \"producerCode\": \"593172910\",\r\n  \"contractNumber\": \"\",\r\n  \"participantCode\": \"\",\r\n  \"other1\": \"\",\r\n  \"other2\": \"\",\r\n  \"other3\": \"22616\",\r\n  \"other4\": \"\",\r\n  \"other5\": \"\",\r\n  \"initialLoadCode\": \"No\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{reqUrl}}/api/Organizations/{{y0036AgencyAccount}}/Producers"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const URL = pm.environment.get(\"tokenUrl\")",
											"const User = pm.globals.get(\"agencySysUser\");",
											"const Pass =\"Password123\";",
											"const BasicToken = pm.environment.get(\"agencyTokenClient\");",
											"const Scope = pm.globals.get(\"allScope\")",
											"console.log(User, Pass, Scope)",
											"const postRequest = {",
											"  url: URL,",
											"  method: 'POST',",
											"  timeout: 10,",
											"  header: {",
											"    \"Content-Type\": \"application/x-www-raw-urlencoded\",",
											"    \"Authorization\": \"Basic \" + BasicToken",
											"  },",
											"  body: {",
											"    mode: 'urlencoded',",
											"    urlencoded: [",
											"        {key: \"grant_type\", value: \"password\"},",
											"        {key:\"username\", value: User},",
											"        {key:\"Password\", value: Pass},",
											"        {key:\"scope\", value: Scope}",
											"    ]}",
											"};",
											"pm.environment.unset(\"agencySysUserToken\");",
											"pm.sendRequest(postRequest, function (err, res) {",
											"    var responseJson = res.json();",
											"    console.log(\"this is the response from the json \",responseJson);",
											"    pm.environment.set('agencySysUserToken', responseJson['access_token']);",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "fakeFileId",
			"value": "00000ABC-1111-2222-3333-121231231231"
		}
	]
}